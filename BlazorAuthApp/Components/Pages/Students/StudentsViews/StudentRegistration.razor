@page "/student/registration"
@inject UniversityDbContext _context
@inject NavigationManager Navigation
@rendermode InteractiveServer
<PageTitle>تسجيل المواد - الجامعة الذكية</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-0">تسجيل المواد الدراسية</h2>
                    <p class="text-muted">السنة الدراسية: 2024-2025 - الفصل الأول</p>
                </div>
                <div>
                    <button class="btn btn-success" @onclick="CompleteRegistration" disabled="@isRegistering || selectedCourses.Count == 0">
                        @if (isRegistering)
                        {
                            <span><i class="fas fa-spinner fa-spin me-2"></i>جاري التسجيل...</span>
                        }
                        else
                        {
                            <span><i class="fas fa-check-circle me-2"></i>إتمام التسجيل (@selectedCourses.Count)</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="fas fa-book me-2"></i>المواد المتاحة</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th></th>
                                    <th>رمز المادة</th>
                                    <th>اسم المادة</th>
                                    <th>الساعات المعتمدة</th>
                                    <th>الكلفة</th>
                                    <th>المحاضر</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var course in availableCourses)
                                {
                                    <tr class="@(selectedCourses.Any(c => c.Id == course.Id) ? "table-primary" : "")">
                                        <td>
                                            <input type="checkbox"
                                                   checked="@selectedCourses.Any(c => c.Id == course.Id)"
                                                   @onchange="@(e => ToggleCourseSelection(course, e.Value))" />
                                        </td>
                                        <td><strong>@course.Code</strong></td>
                                        <td>@course.Name</td>
                                        <td class="text-center">@course.Credits</td>
                                        <td><span class="badge bg-success">@course.Fee.ToString("C")</span></td>
                                        <td>@course.Instructor</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0"><i class="fas fa-shopping-cart me-2"></i>المواد المحددة</h5>
                </div>
                <div class="card-body">
                    @if (selectedCourses.Count == 0)
                    {
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-book-open fa-2x mb-3"></i>
                            <p>لا توجد مواد محددة</p>
                        </div>
                    }
                    else
                    {
                        <ul class="list-group mb-3">
                            @foreach (var course in selectedCourses)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <div>
                                        <h6 class="mb-0">@course.Name</h6>
                                        <small class="text-muted">@course.Code</small>
                                    </div>
                                    <div class="text-end">
                                        <span class="badge bg-success">@course.Fee.ToString("C")</span>
                                        <button class="btn btn-sm btn-outline-danger ms-2" @onclick="@(e => RemoveCourse(course))">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                </li>
                            }
                        </ul>

                        <div class="border-top pt-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>عدد المواد:</span>
                                <strong>@selectedCourses.Count</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>إجمالي الساعات:</span>
                                <strong>@selectedCourses.Sum(c => c.Credits)</strong>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>إجمالي الكلفة:</span>
                                <strong class="text-success fs-5">@selectedCourses.Sum(c => c.Fee).ToString("C")</strong>
                            </div>
                        </div>

                        <div class="mt-3">
                            <div class="alert alert-info">
                                <small>رصيد الحساب: <strong class="text-success">@studentAccountBalance.ToString("C")</strong></small>
                            </div>
                        </div>
                    }
                </div>
            </div>

            @if (selectedCourses.Count > 0)
            {
                <div class="card mt-3">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0"><i class="fas fa-exclamation-triangle me-2"></i>ملاحظات مهمة</h5>
                    </div>
                    <div class="card-body">
                        <ul class="mb-0 small">
                            <li>سيتم خصم الكلفة من حسابك بعد إتمام التسجيل</li>
                            <li>يمكنك تعديل التسجيل خلال 48 ساعة</li>
                            <li>الحد الأدنى: 12 ساعة معتمدة</li>
                            <li>الحد الأقصى: 18 ساعة معتمدة</li>
                        </ul>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Course> availableCourses = new();
    private List<Course> selectedCourses = new();
    private Student? currentStudent;
    private decimal studentAccountBalance = 0;
    private bool isRegistering = false;

    protected override async Task OnInitializedAsync()
    {
        // تحميل المواد المتاحة من قاعدة البيانات
        LoadAvailableCourses();

        // تحميل معلومات الطالب الحالي (يجب الحصول عليها من الجلسة أو التوثيق)
        LoadCurrentStudent();
    }

    private void LoadAvailableCourses()
    {
        // تحميل المواد من قاعدة البيانات
        availableCourses = _context.Courses.ToList();
    }

    private void LoadCurrentStudent()
    {
        // هنا يجب الحصول على معلومات الطالب الحالي
        // مثلاً من الجلسة أو التوثيق
        currentStudent = _context.Students.FirstOrDefault(s => s.StudentId == "STU-2024-001");
        if (currentStudent != null)
        {
            studentAccountBalance = currentStudent.AccountBalance;
        }
    }

    private void ToggleCourseSelection(Course course, object? value)
    {
        var isChecked = value?.ToString() == "True";

        if (isChecked && !selectedCourses.Any(c => c.Id == course.Id))
        {
            selectedCourses.Add(course);
        }
        else if (!isChecked && selectedCourses.Any(c => c.Id == course.Id))
        {
            selectedCourses.RemoveAll(c => c.Id == course.Id);
        }
    }

    private void RemoveCourse(Course course)
    {
        selectedCourses.RemoveAll(c => c.Id == course.Id);
    }

    private async Task CompleteRegistration()
    {
        if (selectedCourses.Count == 0 || currentStudent == null) return;

        var totalCost = selectedCourses.Sum(c => c.Fee);

        // التحقق من رصيد الحساب
        if (studentAccountBalance < totalCost)
        {
            // عرض رسالة خطأ
            return;
        }

        isRegistering = true;
        StateHasChanged();

        try
        {
            // حفظ تسجيل المواد في قاعدة البيانات
            foreach (var course in selectedCourses)
            {
                var registration = new CourseRegistration
                    {
                        StudentId = currentStudent.Id,
                        CourseId = course.Id,
                        RegistrationDate = DateTime.Now,
                        Status = "مسجل",
                        AmountPaid = course.Fee,
                        PaymentDate = DateTime.Now
                    };

                _context.CourseRegistrations.Add(registration);

                // تحديث عدد الطلاب في المادة
                course.CurrentStudents++;
                _context.Courses.Update(course);
            }

            // تحديث رصيد الطالب
            currentStudent.AccountBalance -= totalCost;
            _context.Students.Update(currentStudent);

            // حفظ التغييرات
            await _context.SaveChangesAsync();

            // الانتقال لصفحة التأكيد
            Navigation.NavigateTo("/student/confirmation");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing registration: {ex.Message}");
        }
        finally
        {
            isRegistering = false;
        }
    } 
}