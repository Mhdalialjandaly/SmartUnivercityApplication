@page "/admin/applications"
@* @attribute [Authorize(Roles = "Admin")] *@
@inject UniversityDbContext _context
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStudentServices _studentService
@rendermode InteractiveServer

<PageTitle>إدارة طلبات التقديم - الجامعة الذكية</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 fw-bold text-primary">إدارة طلبات التقديم</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/">الرئيسية</a></li>
                            <li class="breadcrumb-item"><a href="/admin">الإدارة</a></li>
                            <li class="breadcrumb-item active">طلبات التقديم</li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-outline-primary" @onclick="RefreshApplications">
                            <i class="fas fa-sync-alt me-2"></i>تحديث
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- إحصائيات سريعة -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="card border-primary border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">إجمالي الطلبات</h5>
                            <h2 class="mb-0 fw-bold">@totalApplications</h2>
                        </div>
                        <div class="bg-primary bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-file-alt fa-2x text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-warning border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">قيد المراجعة</h5>
                            <h2 class="mb-0 fw-bold">@pendingApplications</h2>
                        </div>
                        <div class="bg-warning bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-clock fa-2x text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-success border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">المقبولة</h5>
                            <h2 class="mb-0 fw-bold">@acceptedApplications</h2>
                        </div>
                        <div class="bg-success bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-check-circle fa-2x text-success"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-danger border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">المرفوضة</h5>
                            <h2 class="mb-0 fw-bold">@rejectedApplications</h2>
                        </div>
                        <div class="bg-danger bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-times-circle fa-2x text-danger"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- علامات التبويب -->
    <div class="row">
        <div class="col-12">
            <ul class="nav nav-tabs mb-4" id="applicationTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="all-tab" data-bs-toggle="tab" data-bs-target="#all" type="button" role="tab" @onclick="() => FilterApplications(ApplicationStatus.All)">
                        جميع الطلبات
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="pending-tab" data-bs-toggle="tab" data-bs-target="#pending" type="button" role="tab" @onclick="() => FilterApplications(ApplicationStatus.Pending)">
                        قيد المراجعة
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="accepted-tab" data-bs-toggle="tab" data-bs-target="#accepted" type="button" role="tab" @onclick="() => FilterApplications(ApplicationStatus.Accepted)">
                        المقبولة
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="rejected-tab" data-bs-toggle="tab" data-bs-target="#rejected" type="button" role="tab" @onclick="() => FilterApplications(ApplicationStatus.Rejected)">
                        المرفوضة
                    </button>
                </li>
            </ul>

            <div class="tab-content" id="applicationTabsContent">
                <!-- جميع الطلبات -->
                <div class="tab-pane fade show active"  role="tabpanel">@*  id="all"  *@
                    <div class="card">
                        <div class="card-header bg-white">
                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <h5 class="mb-0">قائمة طلبات التقديم</h5>
                                </div>
                                <div class="col-md-6">
                                    <div class="d-flex justify-content-md-end gap-2">
                                        <div class="input-group" style="max-width: 300px;">
                                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                                            <input type="text" class="form-control" placeholder="بحث عن طلب..." @bind="searchTerm" @oninput="SearchApplications">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>#</th>
                                            <th>الاسم الكامل</th>
                                            <th>البريد الإلكتروني</th>
                                            <th>القسم المطلوب</th>
                                            <th>المؤهل الدراسي</th>
                                            <th>المعدل</th>
                                            <th>تاريخ التقديم</th>
                                            <th>الحالة</th>
                                            <th>الإجراءات</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @if (applications.Any())
                                        {
                                            @for (int i = 0; i < applications.Count; i++)
                                            {
                                                var app = applications[i];
                                                <tr>
                                                    <td>@app.Id</td>
                                                    <td>@($"{app.FirstName} {app.LastName}")</td>
                                                    <td>@app.Email</td>
                                                    <td>@GetDepartmentName(app.DepartmentId)</td>
                                                    <td>@app.EducationLevel</td>
                                                    <td>@app.GPA.ToString("F2")</td>
                                                    <td>@app.SubmitDate.ToString("yyyy-MM-dd")</td>
                                                    <td>
                                                        <span class="badge @(app.Status == "قيد المراجعة" ? "bg-warning" :
                                                                            app.Status == "مقبول" ? "bg-success" :
                                                                            app.Status == "مرفوض" ? "bg-danger" : "bg-secondary")">
                                                            @app.Status
                                                        </span>
                                                    </td>
                                                    <td>
                                                        <div class="dropdown">
                                                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                                <i class="fas fa-ellipsis-v"></i>
                                                            </button>
                                                            <ul class="dropdown-menu">
                                                                <li><a class="dropdown-item" href="javascript:void(0)" @onclick="() => ViewApplicationDetails(app)" data-bs-toggle="modal" data-bs-target="#viewApplicationModal"><i class="fas fa-eye me-2"></i>عرض التفاصيل</a></li>
                                                                @if (app.Status == "قيد المراجعة")
                                                                {
                                                                    <li><a class="dropdown-item text-success" href="javascript:void(0)" @onclick="() => AcceptApplication(app)"><i class="fas fa-check me-2"></i>قبول</a></li>
                                                                    <li><a class="dropdown-item text-danger" href="javascript:void(0)" @onclick="() => ShowRejectModal(app)" data-bs-toggle="modal" data-bs-target="#rejectApplicationModal"><i class="fas fa-times me-2"></i>رفض</a></li>
                                                                    
                                                                }
                                                                <li><hr class="dropdown-divider"></li>
                                                                <li><a class="dropdown-item text-danger" href="javascript:void(0)" @onclick="() => DeleteApplication(app.Id)"><i class="fas fa-trash me-2"></i>حذف</a></li>
                                                            </ul>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        }
                                        else
                                        {
                                            <tr>
                                                <td colspan="9" class="text-center">لا توجد طلبات</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- ترقيم الصفحات -->
                            @if (totalPages > 1)
                            {
                                <nav aria-label="Page navigation">
                                    <ul class="pagination justify-content-center">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(currentPage - 1)" tabindex="-1">السابق</a>
                                        </li>

                                        @for (int i = 1; i <= totalPages; i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(i)">@i</a>
                                            </li>
                                        }

                                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                            <a class="page-link" href="javascript:void(0)" @onclick="() => GoToPage(currentPage + 1)">التالي</a>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal عرض تفاصيل الطلب -->
<div class="modal fade" id="viewApplicationModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">تفاصيل طلب التقديم #@selectedApplication?.Id</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (selectedApplication != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-user me-2"></i>المعلومات الشخصية</h6>
                            <hr>
                            <p><strong>الاسم:</strong> @($"{selectedApplication.FirstName} {selectedApplication.LastName}")</p>
                            <p><strong>تاريخ الميلاد:</strong> @selectedApplication.BirthDate.ToString("yyyy-MM-dd")</p>
                            <p><strong>الجنس:</strong> @selectedApplication.Gender</p>
                            <p><strong>رقم الهاتف:</strong> @selectedApplication.Phone</p>
                            <p><strong>البريد الإلكتروني:</strong> @selectedApplication.Email</p>
                            <p><strong>العنوان:</strong> @selectedApplication.Address</p>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fas fa-graduation-cap me-2"></i>المعلومات الأكاديمية</h6>
                            <hr>
                            <p><strong>القسم المطلوب:</strong> @GetDepartmentName(selectedApplication.DepartmentId)</p>
                            <p><strong>المؤهل الدراسي:</strong> @selectedApplication.EducationLevel</p>
                            <p><strong>المعدل:</strong> @selectedApplication.GPA.ToString("F2")</p>
                            <p><strong>تاريخ التقديم:</strong> @selectedApplication.SubmitDate.ToString("yyyy-MM-dd HH:mm")</p>
                            <p>
                                <strong>الحالة:</strong>
                                <span class="badge @(selectedApplication.Status == "قيد المراجعة" ? "bg-warning" :
                                                    selectedApplication.Status == "مقبول" ? "bg-success" :
                                                    selectedApplication.Status == "مرفوض" ? "bg-danger" : "bg-secondary")">
                                    @selectedApplication.Status
                                </span>
                            </p>
                            @if (!string.IsNullOrEmpty(selectedApplication.RejectionReason))
                            {
                                <p><strong>سبب الرفض:</strong> <span class="text-danger">@selectedApplication.RejectionReason</span></p>
                            }
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedApplication.CertificatePath))
                    {
                        <div class="mt-4">
                            <h6><i class="fas fa-file-pdf me-2"></i>الشهادة المرفقة</h6>
                            <hr>
                            <a href="@selectedApplication.CertificatePath" target="_blank" class="btn btn-outline-primary">
                                <i class="fas fa-download me-2"></i>تحميل الشهادة
                            </a>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إغلاق</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal رفض الطلب -->
<div class="modal fade" id="rejectApplicationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">رفض طلب التقديم #@applicationToReject?.Id</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (applicationToReject != null)
                {
                    <div class="mb-3">
                        <label class="form-label">سبب الرفض *</label>
                        <textarea class="form-control" rows="4" placeholder="أدخل سبب الرفض..." @bind="rejectionReason" required></textarea>
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        هل أنت متأكد من رفض هذا الطلب؟ لا يمكن التراجع عن هذا الإجراء.
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-danger" @onclick="RejectApplication" disabled="@(string.IsNullOrEmpty(rejectionReason))">رفض الطلب</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<StudentApplication> applications = new();
    private StudentApplication? selectedApplication;
    private StudentApplication? applicationToReject;
    private string searchTerm = "";
    private string rejectionReason = "";

    // إحصائيات
    private int totalApplications = 0;
    private int pendingApplications = 0;
    private int acceptedApplications = 0;
    private int rejectedApplications = 0;

    // ترقيم الصفحات
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    // الفلاتر
    private ApplicationStatus currentStatus = ApplicationStatus.All;

    // الأقسام
    private List<Department> departments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        await LoadStatistics();
        await LoadApplications();
    }

    private async Task LoadDepartments()
    {
        try
        {
            departments = await _context.Departments.ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            totalApplications = await _context.StudentApplications.CountAsync();
            pendingApplications = await _context.StudentApplications.CountAsync(a => a.Status == "قيد المراجعة");
            acceptedApplications = await _context.StudentApplications.CountAsync(a => a.Status == "مقبول");
            rejectedApplications = await _context.StudentApplications.CountAsync(a => a.Status == "مرفوض");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    private async Task LoadApplications()
    {
        try
        {
            var query = _context.StudentApplications.AsQueryable();

            // تطبيق الفلاتر
            if (!string.IsNullOrEmpty(searchTerm))
            {
                query = query.Where(a =>
                    a.FirstName.Contains(searchTerm) ||
                    a.LastName.Contains(searchTerm) ||
                    a.Email.Contains(searchTerm));
            }

            if (currentStatus != ApplicationStatus.All)
            {
                var status = currentStatus switch
                {
                    ApplicationStatus.Pending => "قيد المراجعة",
                    ApplicationStatus.Accepted => "مقبول",
                    ApplicationStatus.Rejected => "مرفوض",
                    _ => ""
                };
                query = query.Where(a => a.Status == status);
            }

            // ترقيم الصفحات
            totalApplications = await query.CountAsync();
            totalPages = (int)Math.Ceiling((double)totalApplications / pageSize);

            applications = await query
                .Skip((currentPage - 1) * pageSize)
                .Take(pageSize)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
        }
    }

    private async Task RefreshApplications()
    {
        await LoadStatistics();
        await LoadApplications();
        StateHasChanged();
    }

    private async Task FilterApplications(ApplicationStatus status)
    {
        currentStatus = status;
        currentPage = 1;
        await LoadApplications();
    }

    private async Task SearchApplications(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        await LoadApplications();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadApplications();
        }
    }

    private async void ViewApplicationDetails(StudentApplication application)
    {
        selectedApplication = application;
        // فتح الـ Modal
        await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#viewApplicationModal");
    }

    private async Task AcceptApplication(StudentApplication application)
    {
        try
        {  // إنشاء حساب طالب جديد
            var savedUser = await CreateStudentAccount(application);

            // تحديث حالة الطلب
            application.Status = "مقبول";
            application.StudentId = savedUser.StudentId;  //  GenerateStudentId();
            application.TemporaryPassword = GenerateTemporaryPassword();



            _context.StudentApplications.Update(application);
            await _context.SaveChangesAsync();



            // تحديث الإحصائيات والقائمة
            await LoadStatistics();
            await LoadApplications();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accepting application: {ex.Message}");
        }
    }

    private async void ShowRejectModal(StudentApplication application)
    {
        applicationToReject = application;
        rejectionReason = "";
        // فتح الـ Modal
        await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#rejectApplicationModal");
    }

    private async Task RejectApplication()
    {
        if (applicationToReject != null && !string.IsNullOrEmpty(rejectionReason))
        {
            try
            {
                applicationToReject.Status = "مرفوض";
                applicationToReject.RejectionReason = rejectionReason;

                _context.StudentApplications.Update(applicationToReject);
                await _context.SaveChangesAsync();

                // إغلاق الـ Modal
                await JS.InvokeVoidAsync("bootstrap.Modal.getInstance", "#rejectApplicationModal");

                // تحديث الإحصائيات والقائمة
                await RefreshApplications();

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rejecting application: {ex.Message}");
            }
        }
    }

    private async Task<StudentDto> CreateStudentAccount(StudentApplication application)
    {
        try
        {
            var student = new StudentDto
                {
                    StudentId = application.StudentId,
                    FirstName = application.FirstName,
                    LastName = application.LastName,
                    Email = application.Email,
                    Phone = application.Phone,
                    BirthOfDate = application.BirthDate,
                    Sexual = application.Gender == "ذكر",
                    HomeAddress = application.Address,
                    DepartmentId = application.DepartmentId,
                    Status = StudentStatus.Active,
                    StatusOnSite = "نشط",
                    RegistrationDate = DateTime.Now,
                    UserNameOnSite = application.Email,
                    PasswordOnSite = application.TemporaryPassword,
                    // باقي الحقول تبقى فارغة أو بالقيم الافتراضية
                    Religion = "",
                    SecoundPhone = "",
                    TrueIsEmployee = false,
                    WorkAddress = "",
                    PoliticalNationalism = "",
                    Nationality = "",
                    HomeNumber = 0,
                    CivilstatusIDNumberAndNationalCard = "",
                    CivilstatusIDNumberAndNationalCardFrom = "",
                    CivilstatusIDNumberAndNationalCardDate = DateTime.MinValue,
                    NationalityCertificateNumber = 0,
                    NationalityCertificateNumberFrom = "",
                    NationalityCertificateNumberDate = DateTime.MinValue,
                    ExamNumber = 0,
                    SecretNumber = 0,
                    ApplyTunnel = false,
                    TunnelId = 1,
                    ERegistrationCompleted = false,
                    RegistraionCompleted = false,
                    SubmissionIsCompleted = false,
                    SubmissionDepartment = "",
                    TunnelDepartment = "",
                    AccountsReceiptNumber = 0,
                    SchoolName = "",
                    Branch = "",
                    DateOfSchoolGraduate = DateTime.MinValue,
                    StudentTotalWithoutAdditions = 0,
                    StudentTotalWithAdditions = 0,
                    StudentGPAWithoutAdditions = 0,
                    StudentGPAWithAdditions = 0,
                    FullAddress = application.Address,
                    AccountBalance = 0               
                };              

            try
            {
                var savedUser =  await _studentService.CreateStudentAsync(student);
                return savedUser;
            }
            catch (Exception)
            { 
                throw;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating student account: {ex.Message}");
            return new StudentDto();
        }
    }

    private async Task DeleteApplication(int applicationId)
    {
        try
        {
            var application = await _context.StudentApplications.FindAsync(applicationId);
            if (application != null)
            {
                _context.StudentApplications.Remove(application);
                await _context.SaveChangesAsync();

                // تحديث الإحصائيات والقائمة
                await LoadStatistics();
                await LoadApplications();

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting application: {ex.Message}");
        }
    }

    private string GenerateStudentId()
    {
        return $"STU-{DateTime.Now:yyyy}-{new Random().Next(1000, 9999)}";
    }

    private string GenerateTemporaryPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private string GetDepartmentName(int departmentId)
    {
        var department = departments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Name ?? "غير محدد";
    }

    public enum ApplicationStatus
    {
        All,
        Pending,
        Accepted,
        Rejected
    }

   
}