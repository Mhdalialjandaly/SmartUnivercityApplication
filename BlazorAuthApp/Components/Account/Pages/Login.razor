@page "/login"
@using Microsoft.AspNetCore.Identity
@using BlazorAuthApp.Provider
@inject NavigationManager Navigation
@inject SignInManager<User> _signInManager
@inject UserManager<User> _userManager
@inject ILogger<Login> _logger

@rendermode InteractiveServer

<div class="login-page">
    <div class="container">
        <form @onsubmit="HandleLogin">
            <div class="row">
                <h1>تسجيل الدخول</h1>
            </div>
            <div class="row">
                <div>
                    <label for="username">اسم المستخدم</label>
                    <input id="username" type="text" class="form-control" @bind="Input.Username" required />
                </div>
                <div>
                    <label for="password">كلمة المرور</label>
                    <input id="password" type="password" class="form-control" @bind="Input.Password" required />
                </div>
                <div>
                    <button type="submit" class="btn" disabled="@isLoggingIn">
                        @if (isLoggingIn)
                        {
                            <span>جاري تسجيل الدخول...</span>
                        }
                        else
                        {
                            <span>تسجيل الدخول</span>
                        }
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="row">
                    <div class="error-message">
                        @errorMessage
                    </div>
                </div>
            }
        </form>
    </div>
</div>


<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .login-page {
        min-height: 100vh;
        background: #eee;
        display: flex;
        font-family: sans-serif;
    }

    .container {
        margin: auto;
        width: 500px;
        max-width: 90%;
    }

        .container form {
            width: 100%;
            height: 100%;
            padding: 20px;
            background: white;
            border-radius: 4px;
            box-shadow: 0 8px 16px rgb(0,0,0,.3);
        }

            .container form h1 {
                text-align: center;
                margin-bottom: 24px;
                color: #222;
            }

            .container form label {
                display: block;
                margin-bottom: 5px;
                color: #333;
                font-weight: bold;
            }

            .container form .form-control {
                width: 100%;
                height: 40px;
                background: white;
                border-radius: 4px;
                border: 1px solid silver;
                margin: 10px 0 18px 0;
                padding: 0 10px;
                font-size: 16px;
            }

                .container form .form-control:focus {
                    outline: 2px solid #007bff;
                    border-color: #007bff;
                }

            .container form .btn {
                margin-left: 50%;
                transform: translateX(-50%);
                width: 220px;
                height: 34px;
                border: none;
                outline: none;
                background: #27a327;
                cursor: pointer;
                font-size: 16px;
                text-transform: uppercase;
                color: white;
                border-radius: 4px;
                transition: .3s;
            }

                .container form .btn:hover:not(:disabled) {
                    opacity: .7;
                }

                .container form .btn:disabled {
                    opacity: 0.5;
                    cursor: not-allowed;
                }

    .error-message {
        padding: 10px;
        border-radius: 4px;
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    @@media (max-width: 576px) {
        .container {
            width: 95%;
            margin: 20px auto;
        }

            .container form .btn {
                width: 180px;
            }
    }
</style>


@code {
    private LoginInputModel Input = new();
    private bool isLoggingIn = false;
    private string errorMessage = "";

    public class LoginInputModel
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        if (isLoggingIn) return;
        isLoggingIn = true;
        errorMessage = "";

        try
        {
            var user = await _userManager.FindByNameAsync(Input.Username);
            if (user == null || !await _userManager.CheckPasswordAsync(user, Input.Password))
            {
                errorMessage = "بيانات الدخول غير صحيحة.";
                return;
            }

            var result = await _signInManager.PasswordSignInAsync(user, Input.Password, isPersistent: false, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                // ✅ هذا هو الحل النهائي لتفادي "Headers are read-only"
                Navigation.NavigateTo("/", forceLoad: true);
            }
            else
            {
                errorMessage = "فشل تسجيل الدخول، تحقق من المعلومات.";
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Login failed.");
            errorMessage = $"حدث خطأ أثناء تسجيل الدخول.";
        }
        finally
        {
            isLoggingIn = false;
        }
    }

    protected override Task OnInitializedAsync()
    {
        errorMessage = "";
        return base.OnInitializedAsync();
    }
}
