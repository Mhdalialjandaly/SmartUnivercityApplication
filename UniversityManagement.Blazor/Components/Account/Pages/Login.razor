@page "/Account/Login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@rendermode InteractiveServer
<PageTitle>Login</PageTitle>

<div class="login-container" dir="ltr">
    <div class="login-box">
        <h2>Login</h2>

        <EditForm Model="Input" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Username</label>
                <InputText @bind-Value="Input.Email" id="username" class="form-control" placeholder="Enter Email" />
                <ValidationMessage For="@(() => Input.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <div class="password-input">
                    <InputText type="password"
                               @bind-Value="Input.Password"
                           @bind:event="oninput"
                           id="password"
                           class="form-control"
                           placeholder="Enter password" />
                    <button type="button" class="toggle-password" onclick="togglePassword('password', this)">
                        Show
                    </button>
                </div>
                <ValidationMessage For="@(() => Input.Password)" />
            </div>

            <div class="form-group">
                <label class="remember-me">
                    <InputCheckbox @bind-Value="Input.RememberMe" />
                    Remember me
                </label>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }

            <button type="submit" class="login-btn">Login</button>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        background-color: #eee;
        padding: 20px;
    }

    .login-box {
        background: white;
        padding: 40px;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        width: 130%;
        max-width: 500px;
        text-align: center;
    }

    h2 {
        margin-bottom: 30px;
        color: #222;
        font-size: 34px;
        font-weight:bold;
    }

    .form-group {
        margin-bottom: 20px;
        text-align: left;
    }

    label {
        display: block;
        font-weight:bold;
        margin-bottom: 5px;
        color: #222;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 24px;
        box-sizing: border-box;
    }

    .password-input {
        position: relative;
    }

    .toggle-password {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #007bff;
        cursor: pointer;
        font-size: 14px;
        z-index: 2;
    }

    .login-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 12px 30px;
        border-radius: 4px;
        font-size: 20px;
        cursor: pointer;
        margin-top: 10px;
        width: 70%;
    }

        .login-btn:hover {
            background-color: #218838;
        }

    .remember-me {
        display: flex;
        align-items: center;
        font-weight: normal;
        cursor: pointer;
    }

        .remember-me input {
            margin-right: 8px;
        }

    .error-message {
        color: #dc3545;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 15px;
        text-align: left;
    }

    .validation-message {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        display: block;
    }

    .validation-summary-errors {
        color: #dc3545;
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        padding: 10px;
        border-radius: 4px;
        margin-bottom: 15px;
        text-align: left;
    }

        .validation-summary-errors ul {
            margin: 0;
            padding-left: 20px;
        }
</style>

<script>
    function togglePassword(fieldId, button) {
        const passwordField = document.getElementById(fieldId);
        if (passwordField.type === 'password') {
            passwordField.type = 'text';
            button.textContent = 'Hide';
        } else {
            passwordField.type = 'password';
            button.textContent = 'Show';
        }
    }
</script>

@code {
    private string errorMessage = "";

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string ReturnUrl { get; set; } = "/";

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        try
        {
            errorMessage = "";

            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.IsLockedOut)
            {
                errorMessage = "Account locked out. Please try again later.";
            }
            else if (result.IsNotAllowed)
            {
                errorMessage = "Login not allowed. Please confirm your email address.";
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during login");
            errorMessage = "An error occurred during login.";
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Username is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me")]
        public bool RememberMe { get; set; } = false;
    }
} 