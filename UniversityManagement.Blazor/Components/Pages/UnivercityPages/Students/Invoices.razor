@page "/students/{studentId}/invoices"
@attribute [Authorize]
@inject IStudentServices _studentService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject UniversityDbContext _context

<PageTitle>فواتير الطالب - الجامعة الذكية</PageTitle>
<div class="main-panel">
    <div class="content">
        <div class="page-inner">
            <div class="container-fluid">
                <div class="row mb-4">
                    <div class="col-12">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h1 class="h3 mb-0 fw-bold text-primary">فواتير الطالب: <span id="studentName">@studentName</span></h1>
                                <nav aria-label="breadcrumb">
                                    <ol class="breadcrumb">
                                        <li class="breadcrumb-item"><a href="/">الرئيسية</a></li>
                                        <li class="breadcrumb-item"><a href="/students">شؤون الطلاب</a></li>
                                        <li class="breadcrumb-item"><a href="/students/@studentId">تفاصيل الطالب</a></li>
                                        <li class="breadcrumb-item active">الفواتير</li>
                                    </ol>
                                </nav>
                            </div>
                            <div>
                                <!-- Add buttons for actions like "إضافة فاتورة" if applicable -->
                                <button class="btn btn-primary" disabled><i class="fas fa-plus me-2"></i>إضافة فاتورة جديدة</button>
                            </div>
                        </div>
                    </div>
                </div>

                @if (isLoading)
                {
                    <div class="d-flex justify-content-center my-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">جاري التحميل...</span>
                        </div>
                    </div>
                }
                else if (studentPayments == null || !studentPayments.Any())
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i> لا توجد فواتير لهذا الطالب.
                    </div>
                }
                else
                {
                    <div class="card">
                        <div class="card-header bg-white">
                            <h5 class="mb-0">قائمة الفواتير</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th>#</th>
                                            <th>رقم الفاتورة</th>
                                            <th>التاريخ</th>
                                            <th>الوصف</th>
                                            <th>المبلغ</th>
                                            <th>الحالة</th>
                                            <th>الإجراءات</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < studentPayments.Count; i++)
                                        {
                                            var payment = studentPayments[i];
                                            <tr>
                                                <td>@(i + 1)</td>
                                                <td>@($"INV-{payment.Id:D6}")</td>
                                                <td>@(payment.PaymentDate != DateTime.MinValue ? payment.PaymentDate.ToString("yyyy-MM-dd") : "غير محدد")</td>
                                                <td>@GetPaymentDescription(payment)</td>
                                                <td>@payment.Amount.ToString("C")</td>
                                                <td>
                                                    <span class="badge @(payment.Status == "مدفوع" ? "bg-success" : "bg-danger")">
                                                        @(payment.Status == "مدفوع" ? "مدفوعة" : "غير مدفوعة")
                                                    </span>
                                                </td>
                                                <td>
                                                    <div class="dropdown">
                                                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                            <i class="fas fa-ellipsis-v"></i>
                                                        </button>
                                                        <ul class="dropdown-menu">
                                                            <li><a class="dropdown-item" href="#"><i class="fas fa-eye me-2"></i>عرض التفاصيل</a></li>
                                                            <li><a class="dropdown-item" href="#"><i class="fas fa-print me-2"></i>طباعة</a></li>
                                                            <li><hr class="dropdown-divider"></li>
                                                            <li><a class="dropdown-item text-danger" href="#"><i class="fas fa-trash me-2"></i>حذف</a></li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string studentId { get; set; } = string.Empty;

    private List<StudentPayment> studentPayments = new();
    private string studentName = "جارٍ التحميل...";
    private bool isLoading = true;
    private Student studentDetails = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentDetails();
        await LoadStudentPayments();
    }

    private async Task LoadStudentDetails()
    {
        try
        {
            studentDetails = await _context.Students
                .FirstOrDefaultAsync(s => s.StudentId == studentId);

            if (studentDetails != null)
            {
                studentName = $"{studentDetails.FirstName} {studentDetails.LastName}";
            }
            else
            {
                studentName = "غير محدد";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student details: {ex.Message}");
            studentName = "خطأ في تحميل البيانات";
        }
    }

    private async Task LoadStudentPayments()
    {
        isLoading = true;
        try
        {
            if (studentDetails != null && studentDetails.Id > 0)
            {
                studentPayments = await _context.StudentPayments
                    .Where(sp => sp.StudentId == studentDetails.Id)
                    .OrderByDescending(sp => sp.PaymentDate)
                    .ToListAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student payments: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetPaymentDescription(StudentPayment payment)
    {
        // يمكنك تخصيص هذا حسب نوع الدفع
        if (payment.Amount >= 1000)
            return "رسوم التسجيل";
        else if (payment.Amount >= 500)
            return "رسوم الفصل الدراسي";
        else
            return "رسوم متنوعة";
    }
}

<style>
    /* Add any specific styles for this page if needed */
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .table th {
        font-weight: 600;
    }

    .badge {
        font-size: 0.75em;
    }

    .breadcrumb {
        background-color: transparent;
        padding: 0;
    }

    .breadcrumb-item a {
        text-decoration: none;
    }

    .breadcrumb-item.active {
        color: #6c757d;
    }

    .alert-info {
        border-radius: 0.375rem;
    }

    .dropdown-menu {
        font-size: 0.875rem;
    }

    .table-responsive {
        border-radius: 0.375rem;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(0, 0, 0, 0.02);
    }
</style>