@page "/chat"
@inject IChatServices ChatService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<div class="main-panel">
    <div class="content">
        <div class="page-inner">
            <div class="university-chat-container">
                <!-- Sidebar -->
                <div class="chat-sidebar university-theme">
                    <div class="chat-sidebar-header">
                        <div class="header-content">
                            <div class="header-title-section">
                                <h3 class="sidebar-title">المحادثات</h3>
                                <span class="conversation-count">@conversations?.Count() محادثة</span>
                            </div>
                            <button class="btn-new-conversation pulse-animation" @onclick="StartNewConversation" title="محادثة جديدة">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>

                    <div class="search-container">
                        <div class="search-box">
                            <i class="fas fa-search search-icon"></i>
                            <input type="text" placeholder="ابحث في المحادثات..." @bind="searchTerm" class="search-input" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="clear-search" @onclick="() => searchTerm = string.Empty">
                                    <i class="fas fa-times"></i>
                                </button>
                            }
                        </div>
                    </div>

                    <div class="conversation-list">
                        @if (isLoading)
                        {
                            <div class="loading-state">
                                <div class="university-spinner">
                                    <div class="spinner-ring"></div>
                                </div>
                                <p class="loading-text">جارٍ تحميل المحادثات...</p>
                            </div>
                        }
                        else if (conversations == null || !conversations.Any())
                        {
                            <div class="empty-state">
                                <div class="empty-icon-container">
                                    <i class="fas fa-comments empty-icon"></i>
                                </div>
                                <h4 class="empty-title">لا توجد محادثات</h4>
                                <p class="empty-description">ابدأ محادثة جديدة مع زملائك وأساتذتك</p>
                                <button class="btn-empty-primary" @onclick="StartNewConversation">
                                    <i class="fas fa-plus-circle me-2"></i>
                                    محادثة جديدة
                                </button>
                            </div>
                        }
                        else if (!filteredConversations.Any())
                        {
                            <div class="no-results-state">
                                <i class="fas fa-search no-results-icon"></i>
                                <h4>لا توجد نتائج</h4>
                                <p>لم يتم العثور على محادثات تطابق بحثك</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var conv in filteredConversations)
                            {
                                <div class="conversation-item @(selectedConversation?.Id == conv.Id ? "active" : "") @(GetUnreadCount(conv) > 0 ? "unread" : "")"
                                     @onclick="() => SelectConversation(conv)">
                                    <div class="conversation-avatar">
                                        @if (conv.IsGroup)
                                        {
                                            <div class="avatar-badge group-badge">
                                                <i class="fas fa-users"></i>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="avatar-badge user-badge">
                                                <i class="fas fa-user"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="conversation-details">
                                        <div class="conversation-header">
                                            <div class="conversation-title-container">
                                                <h4 class="conversation-title">@conv.Title</h4>
                                                @if (conv.IsGroup)
                                                {
                                                    <span class="group-indicator" title="محادثة جماعية">
                                                        <i class="fas fa-users"></i>
                                                    </span>
                                                }
                                            </div>
                                            @if (conv.Messages.Any())
                                            {
                                                <div class="conversation-time">
                                                    @FormatTime(conv.Messages.Last().SentAt)
                                                </div>
                                            }
                                        </div>
                                        <div class="conversation-preview">
                                            @if (conv.Messages.Any())
                                            {
                                                <div class="preview-content">
                                                    <span class="last-message-sender">@conv.Messages.Last().SenderName: </span>
                                                    <span class="last-message-text">@TruncateText(conv.Messages.Last().Content, 40)</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <span class="no-messages">محادثة جديدة - لا توجد رسائل</span>
                                            }
                                        </div>
                                        <div class="conversation-meta">
                                            @if (conv.IsGroup)
                                            {
                                                <span class="participant-count">@conv.Participants.Count مشارك</span>
                                            }
                                        </div>
                                    </div>
                                    @if (GetUnreadCount(conv) > 0)
                                    {
                                        <div class="unread-badge">@GetUnreadCount(conv)</div>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>

                <!-- Main Chat Area -->
                <div class="chat-main">
                    @if (selectedConversation == null)
                    {
                        <div class="welcome-chat university-welcome">
                            <div class="welcome-content">
                                <div class="welcome-icon animated-bounce">
                                    <div class="icon-background">
                                        <i class="fas fa-comments"></i>
                                    </div>
                                </div>
                                <h2 class="welcome-title">مرحباً بك في محادثات الجامعة الذكية</h2>
                                <p class="welcome-description">اختر محادثة من القائمة أو أنشئ محادثة جديدة لبدء التفاعل مع زملائك وأساتذتك</p>
                                <div class="welcome-actions">
                                    <button class="btn-primary-lg pulse-animation" @onclick="StartNewConversation">
                                        <i class="fas fa-plus-circle me-2"></i>
                                        محادثة جديدة
                                    </button>
                                    <button class="btn-secondary-lg" @onclick="RefreshConversations">
                                        <i class="fas fa-sync-alt me-2"></i>
                                        تحديث
                                    </button>
                                </div>
                                <div class="welcome-stats">
                                    <div class="stat-item">
                                        <i class="fas fa-comments stat-icon"></i>
                                        <div class="stat-content">
                                            <span class="stat-number">@conversations?.Count()??0</span>
                                            <span class="stat-label">محادثة</span>
                                        </div>
                                    </div>
                                    <div class="stat-item">
                                        <i class="fas fa-users stat-icon"></i>
                                        <div class="stat-content">
                                            <span class="stat-number">@GetTotalParticipants()</span>
                                            <span class="stat-label">مشارك</span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <ChatWindow Conversation="selectedConversation" UserId="currentUserId" ChatService="ChatService" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* University Chat Theme - RTL */
    .university-chat-container {
        display: flex;
        height: calc(100vh - 120px);
        background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        direction: rtl;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
    }

    /* Sidebar Styles - University Theme */
    .chat-sidebar {
        width: 380px;
        background: white;
        border-left: 1px solid #e2e8f0;
        display: flex;
        flex-direction: column;
        box-shadow: -2px 0 15px rgba(0, 0, 0, 0.05);
        position: relative;
    }

    .chat-sidebar-header {
        padding: 20px;
        border-bottom: 1px solid #e2e8f0;
        background: linear-gradient(135deg, #0f1724 0%, #1e293b 100%);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-title-section {
        display: flex;
        flex-direction: column;
    }

    .sidebar-title {
        margin: 0 0 4px 0;
        font-size: 1.3rem;
        font-weight: 700;
        color: white;
        letter-spacing: -0.5px;
    }

    .conversation-count {
        font-size: 0.85rem;
        color: #94a3b8;
        font-weight: 500;
    }

    .btn-new-conversation {
        width: 42px;
        height: 42px;
        border-radius: 50%;
        background: linear-gradient(135deg, #0ea37a 0%, #087a5c 100%);
        border: none;
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 12px rgba(14, 163, 122, 0.25);
    }

        .btn-new-conversation:hover {
            transform: translateY(-2px) scale(1.05);
            box-shadow: 0 6px 16px rgba(14, 163, 122, 0.35);
        }

        .btn-new-conversation:active {
            transform: translateY(0) scale(0.98);
        }

    /* Search Styles */
    .search-container {
        padding: 15px 20px;
        background: #f8fafc;
        border-bottom: 1px solid #f1f5f9;
    }

    .search-box {
        position: relative;
    }

    .search-icon {
        position: absolute;
        right: 15px;
        top: 50%;
        transform: translateY(-50%);
        color: #94a3b8;
        font-size: 16px;
        transition: color 0.2s ease;
    }

    .search-input {
        width: 100%;
        padding: 14px 45px 14px 16px;
        border: 2px solid #e2e8f0;
        border-radius: 28px;
        font-size: 0.95rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        background: white;
        color: #0f1724;
        font-weight: 500;
    }

        .search-input:focus {
            outline: none;
            border-color: #0ea37a;
            background: white;
            box-shadow: 0 0 0 4px rgba(14, 163, 122, 0.15);
        }

            .search-input:focus + .search-icon {
                color: #0ea37a;
            }

    .clear-search {
        position: absolute;
        left: 15px;
        top: 50%;
        transform: translateY(-50%);
        background: #f1f5f9;
        border: none;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #64748b;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .clear-search:hover {
            background: #e2e8f0;
            color: #0f1724;
        }

    /* Conversation List */
    .conversation-list {
        flex: 1;
        overflow-y: auto;
        padding: 8px 0;
    }

    /* Conversation Item */
    .conversation-item {
        display: flex;
        padding: 16px 20px;
        border-bottom: 1px solid #f8fafc;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        background: transparent;
    }

        .conversation-item:hover {
            background: #f8fafc;
            transform: translateX(-2px);
        }

        .conversation-item.active {
            background: linear-gradient(90deg, #f0fdf4 0%, #ecfdf5 100%);
            border-right: 4px solid #0ea37a;
        }

        .conversation-item.unread {
            background: #f0f9ff;
        }

        .conversation-item.active:hover {
            background: linear-gradient(90deg, #dcfce7 0%, #d1fae5 100%);
        }

    .conversation-avatar {
        margin-left: 15px;
        position: relative;
    }

    .avatar-badge {
        width: 52px;
        height: 52px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
    }

    .conversation-item:hover .avatar-badge {
        transform: scale(1.05);
    }

    .user-badge {
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        color: white;
    }

    .group-badge {
        background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%);
        color: white;
    }

    .conversation-details {
        flex: 1;
        min-width: 0;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .conversation-header {
        display: flex;
        justify-content: space-between;
        margin-bottom: 6px;
        align-items: flex-start;
    }

    .conversation-title-container {
        display: flex;
        align-items: center;
        gap: 8px;
        min-width: 0;
    }

    .conversation-title {
        font-weight: 600;
        color: #0f1724;
        font-size: 1.05rem;
        margin: 0;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        flex: 1;
    }

    .group-indicator {
        color: #8b5cf6;
        font-size: 0.8rem;
        background: rgba(139, 92, 246, 0.1);
        padding: 4px;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .conversation-time {
        font-size: 0.75rem;
        color: #94a3b8;
        font-weight: 500;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .conversation-preview {
        margin-bottom: 6px;
    }

    .preview-content {
        font-size: 0.9rem;
        color: #64748b;
        line-height: 1.4;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .last-message-sender {
        font-weight: 600;
        color: #0f1724;
    }

    .last-message-text {
        color: #64748b;
    }

    .no-messages {
        font-style: italic;
        color: #94a3b8;
        font-size: 0.85rem;
    }

    .conversation-meta {
        display: flex;
        gap: 10px;
    }

    .participant-count {
        font-size: 0.75rem;
        color: #94a3b8;
        background: #f1f5f9;
        padding: 2px 8px;
        border-radius: 12px;
        font-weight: 500;
    }

    .unread-badge {
        background: linear-gradient(135deg, #0ea37a 0%, #087a5c 100%);
        color: white;
        border-radius: 50%;
        width: 26px;
        height: 26px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
        font-weight: 700;
        flex-shrink: 0;
        box-shadow: 0 2px 8px rgba(14, 163, 122, 0.3);
        animation: pulse 2s infinite;
    }

    /* Welcome Chat Area */
    .chat-main {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: white;
    }

    .welcome-chat {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #f0f9ff 0%, #e0f2fe 100%);
    }

    .welcome-content {
        text-align: center;
        max-width: 600px;
        padding: 2rem;
    }

    .welcome-icon {
        margin-bottom: 2rem;
    }

    .icon-background {
        width: 100px;
        height: 100px;
        background: linear-gradient(135deg, #0ea37a 0%, #087a5c 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        box-shadow: 0 10px 25px rgba(14, 163, 122, 0.3);
    }

        .icon-background i {
            color: white;
            font-size: 3rem;
        }

    .welcome-title {
        color: #0f1724;
        font-size: 2rem;
        margin-bottom: 1rem;
        font-weight: 800;
        line-height: 1.2;
        letter-spacing: -0.5px;
    }

    .welcome-description {
        color: #64748b;
        font-size: 1.15rem;
        line-height: 1.6;
        margin-bottom: 2.5rem;
        font-weight: 400;
    }

    .welcome-actions {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-bottom: 3rem;
        flex-wrap: wrap;
    }

    .btn-primary-lg, .btn-secondary-lg {
        padding: 14px 28px;
        border-radius: 30px;
        font-size: 1.05rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border: none;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    }

    .btn-primary-lg {
        background: linear-gradient(135deg, #0ea37a 0%, #087a5c 100%);
        color: white;
    }

        .btn-primary-lg:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(14, 163, 122, 0.4);
        }

    .btn-secondary-lg {
        background: #f1f5f9;
        color: #0f1724;
    }

        .btn-secondary-lg:hover {
            background: #e2e8f0;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
        }

    .welcome-stats {
        display: flex;
        gap: 30px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 12px;
        background: white;
        padding: 15px 20px;
        border-radius: 16px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.2rem;
    }

    .stat-content {
        display: flex;
        flex-direction: column;
    }

    .stat-number {
        font-size: 1.5rem;
        font-weight: 700;
        color: #0f1724;
        line-height: 1.2;
    }

    .stat-label {
        font-size: 0.9rem;
        color: #64748b;
        font-weight: 500;
    }

    /* Loading States */
    .loading-state {
        text-align: center;
        padding: 3rem 2rem;
    }

    .university-spinner {
        display: flex;
        justify-content: center;
        margin-bottom: 1.5rem;
    }

    .spinner-ring {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f4f6;
        border-top: 4px solid #0ea37a;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        color: #64748b;
        font-size: 1rem;
        margin: 0;
        font-weight: 500;
    }

    /* Empty States */
    .empty-state, .no-results-state {
        text-align: center;
        padding: 3rem 2rem;
    }

    .empty-icon-container, .no-results-icon {
        font-size: 4rem;
        color: #cbd5e1;
        margin-bottom: 1.5rem;
    }

    .no-results-icon {
        font-size: 3rem;
    }

    .empty-title, .no-results-state h4 {
        color: #0f1724;
        font-size: 1.5rem;
        margin-bottom: 0.75rem;
        font-weight: 700;
    }

    .empty-description, .no-results-state p {
        color: #64748b;
        font-size: 1.05rem;
        margin-bottom: 2rem;
        line-height: 1.5;
    }

    .btn-empty-primary {
        background: linear-gradient(135deg, #0ea37a 0%, #087a5c 100%);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 25px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 15px rgba(14, 163, 122, 0.25);
    }

        .btn-empty-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(14, 163, 122, 0.35);
        }

    /* Animations */
    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@keyframes pulse {
        0% {
            transform: scale(1);
        }

        50% {
            transform: scale(1.1);
        }

        100% {
            transform: scale(1);
        }
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }

        40% {
            transform: translateY(-10px);
        }

        60% {
            transform: translateY(-5px);
        }
    }

    .pulse-animation {
        animation: pulse 2s infinite;
    }

    .animated-bounce {
        animation: bounce 2s infinite;
    }

    /* Scrollbar Customization */
    .conversation-list::-webkit-scrollbar {
        width: 6px;
    }

    .conversation-list::-webkit-scrollbar-track {
        background: #f8fafc;
        border-radius: 3px;
    }

    .conversation-list::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 3px;
    }

        .conversation-list::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }

    /* Responsive Design */
    @@media (max-width: 1200px) {
        .chat-sidebar {
            width: 340px;
        }

        .welcome-stats {
            gap: 20px;
        }

        .stat-item {
            padding: 12px 16px;
        }
    }

    @@media (max-width: 992px) {
        .chat-sidebar {
            width: 300px;
        }

        .sidebar-title {
            font-size: 1.2rem;
        }

        .welcome-title {
            font-size: 1.7rem;
        }

        .welcome-description {
            font-size: 1rem;
        }

        .welcome-actions {
            flex-direction: column;
            align-items: center;
        }
    }

    @@media (max-width: 768px) {
        .university-chat-container {
            flex-direction: column;
            height: calc(100vh - 80px);
        }

        .chat-sidebar {
            width: 100%;
            height: 400px;
        }

        .chat-main {
            height: calc(100vh - 480px);
        }

        .welcome-content {
            padding: 1.5rem;
        }

        .welcome-title {
            font-size: 1.5rem;
        }

        .welcome-stats {
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .stat-item {
            width: 100%;
            max-width: 250px;
        }
    }

    @@media (max-width: 576px) {
        .chat-sidebar {
            height: 350px;
        }

        .chat-main {
            height: calc(100vh - 430px);
        }

        .header-content {
            flex-direction: column;
            gap: 15px;
            align-items: flex-start;
        }

        .search-container {
            padding: 12px 15px;
        }

        .search-input {
            padding: 12px 40px 12px 14px;
        }

        .conversation-item {
            padding: 12px 15px;
        }

        .avatar-badge {
            width: 44px;
            height: 44px;
            font-size: 16px;
        }

        .conversation-title {
            font-size: 0.95rem;
        }

        .preview-content {
            font-size: 0.85rem;
        }

        .welcome-content {
            padding: 1rem;
        }

        .welcome-title {
            font-size: 1.3rem;
        }

        .welcome-description {
            font-size: 0.95rem;
            margin-bottom: 1.5rem;
        }

        .btn-primary-lg, .btn-secondary-lg {
            padding: 12px 20px;
            font-size: 0.95rem;
        }

        .welcome-actions {
            gap: 10px;
            margin-bottom: 2rem;
        }

        .stat-number {
            font-size: 1.2rem;
        }

        .stat-label {
            font-size: 0.8rem;
        }
    }
</style>

@code {
    private List<ConversationDto> conversations;
    private ConversationDto selectedConversation;
    private string searchTerm = "";
    private string currentUserId = "1"; // يجب استبدالها بآلية للحصول على ID المستخدم الحالي
    private bool isLoading = true;

    private IEnumerable<ConversationDto> filteredConversations =>
        conversations?.Where(c => string.IsNullOrEmpty(searchTerm) ||
                     c.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                     ?? Enumerable.Empty<ConversationDto>();

    protected override async Task OnInitializedAsync()
    {
        await LoadConversations();
    }

    private async Task LoadConversations()
    {
        try
        {
            isLoading = true;
            conversations = await ChatService.GetUserConversationsAsync(currentUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading conversations: {ex.Message}");
            // يمكنك إضافة رسالة خطأ للمستخدم هنا
        }
        finally
        {
            isLoading = false;
        }
    }

    private void SelectConversation(ConversationDto conversation)
    {
        selectedConversation = conversation;
    }

    private void StartNewConversation()
    {
        Navigation.NavigateTo("/chat/new");
    }

    private async Task RefreshConversations()
    {
        await LoadConversations();
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text)) return "";
        return text.Length <= maxLength ? text : text.Substring(0, maxLength) + "...";
    }

    private int GetUnreadCount(ConversationDto conversation)
    {
        // تنفيذ منطقي لحساب الرسائل غير المقروءة
        return conversation.Messages.Count(m => !m.IsRead && m.ReceiverId == currentUserId);
    }

    private string FormatTime(DateTime dateTime)
    {
        var now = DateTime.Now;
        var timeDiff = now - dateTime;

        if (timeDiff.TotalDays < 1)
        {
            return dateTime.ToString("HH:mm");
        }
        else if (timeDiff.TotalDays < 7)
        {
            return dateTime.ToString("ddd", new System.Globalization.CultureInfo("ar-SA"));
        }
        else
        {
            return dateTime.ToString("dd/MM");
        }
    }

    private int GetTotalParticipants()
    {
        if (conversations == null) return 0;
        return conversations.Sum(c => c.Participants.Count);
    }
}