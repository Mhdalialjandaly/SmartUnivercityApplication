@page "/acceptance"
@attribute [Authorize(Roles = "Admin")]

@inject UniversityDbContext _context
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStudentServices _studentService
@inject IDepartmentServices _departmentService
@inject IStudentApplicationsServices _applicationService
@rendermode InteractiveServer

<style>
    /* أنماط CSS من ملف النص */
    *, *:before, *:after {
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
    }

    html, body {
        padding: 0;
        margin: 0;
        font-family: "Sora", sans-serif;
        font-size: 15px;
        font-weight: 400;
        color: rgba(18, 24, 32, 0.7);
        line-height: 170%;
        background-color: #f9f9f9;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: "Sora", sans-serif;
        color: rgb(18, 24, 32);
        font-weight: 600;
        line-height: 140%;
    }

    h1 {
        font-size: 42px;
    }

    h2 {
        font-size: 36px;
    }

    h3 {
        font-size: 28px;
    }

    h4 {
        font-size: 22px;
    }

    h5 {
        font-size: 18px;
    }

    h6 {
        font-size: 16px;
    }

    a {
        color: inherit;
        text-decoration: none;
    }

    .mil-accent {
        color: rgb(245, 124, 0);
    }

    .mil-bold {
        font-weight: 500;
    }

    .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .mil-section {
        padding: 80px 0;
    }

    .mil-section-title {
        text-align: center;
        margin-bottom: 60px;
    }

        .mil-section-title h2 {
            font-size: 36px;
            margin-bottom: 15px;
        }

        .mil-section-title p {
            color: rgba(18, 24, 32, 0.5);
            max-width: 600px;
            margin: 0 auto;
        }

    .mil-flex {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
    }

    .mil-flex-center {
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    }

    .mil-mb-30 {
        margin-bottom: 30px;
    }

    .mil-mb-60 {
        margin-bottom: 60px;
    }

    .mil-mb-90 {
        margin-bottom: 90px;
    }

    .mil-mt-30 {
        margin-top: 30px;
    }

    .mil-mt-60 {
        margin-top: 60px;
    }

    .mil-mt-90 {
        margin-top: 90px;
    }

    .mil-center {
        text-align: center;
    }

    .mil-button {
        cursor: pointer;
        height: 60px;
        padding: 0 40px;
        font-family: "Sora", sans-serif;
        font-size: 16px;
        color: rgb(18, 24, 32);
        font-weight: 500;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        text-align: center;
        border: none;
        border-radius: 40px;
        background-color: rgb(245, 124, 0);
        color: white;
        -webkit-transition: 0.4s cubic-bezier(0, 0, 0.3642, 1);
        transition: 0.4s cubic-bezier(0, 0, 0.3642, 1);
    }

        .mil-button:hover {
            -webkit-transform: translateY(-5px);
            transform: translateY(-5px);
            -webkit-box-shadow: 0px 10px 20px 0px rgba(245, 124, 0, 0.3);
            box-shadow: 0px 10px 20px 0px rgba(245, 124, 0, 0.3);
        }

        .mil-button.mil-button-sm {
            height: 50px;
            padding: 0 30px;
            font-size: 14px;
        }

    .mil-top-panel {
        padding: 0 10px;
        height: 80px;
        background-color: rgb(255, 255, 255);
        width: 100%;
        z-index: 999;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-shadow: 0px 0px 40px 0px rgba(18, 24, 32, 0.1);
        box-shadow: 0px 0px 40px 0px rgba(18, 24, 32, 0.1);
        position: fixed;
        top: 0;
        left: 0;
    }

    .mil-logo img {
        height: 50px;
    }

    .mil-navigation nav ul {
        list-style: none;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
    }

        .mil-navigation nav ul li {
            margin: 0 15px;
            position: relative;
        }

            .mil-navigation nav ul li a {
                font-family: "Sora", sans-serif;
                text-decoration: none;
                color: rgb(18, 24, 32);
                font-weight: 400;
                white-space: nowrap;
                -webkit-transition: 0.2s cubic-bezier(0, 0, 0.3642, 1);
                transition: 0.2s cubic-bezier(0, 0, 0.3642, 1);
            }

                .mil-navigation nav ul li a:hover {
                    color: rgb(245, 124, 0);
                }

    .mil-menu-btn {
        display: none;
        cursor: pointer;
        width: 30px;
        height: 30px;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    }

        .mil-menu-btn span, .mil-menu-btn span:after, .mil-menu-btn span:before {
            content: "";
            display: block;
            width: 24px;
            height: 2px;
            background: rgb(18, 24, 32);
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            -webkit-transition: inherit;
            transition: inherit;
        }

        .mil-menu-btn span {
            position: relative;
        }

            .mil-menu-btn span:before {
                top: -8px;
            }

            .mil-menu-btn span:after {
                top: 8px;
            }

        .mil-menu-btn.mil-active span {
            background: transparent;
        }

            .mil-menu-btn.mil-active span:before {
                top: 0;
                -webkit-transform: rotate(45deg);
                transform: rotate(45deg);
            }

            .mil-menu-btn.mil-active span:after {
                top: 0;
                -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
            }

    /* أنماط إضافية للوحة الطلاب */
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        padding-top: 80px;
    }

    .students-dashboard {
        display: flex;
        min-height: calc(100vh - 80px);
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
    }

    .sidebar-header {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-header h3 {
            color: white;
            margin: 10px 0;
        }

    .sidebar-menu {
        padding: 20px 0;
    }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover, .sidebar-menu a.active {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border-right: 3px solid var(--primary-color);
            }

        .sidebar-menu i {
            margin-left: 10px;
            font-size: 18px;
        }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .applications-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .applications-header h2 {
            margin: 0;
        }

    .applications-nav {
        display: flex;
        gap: 10px;
    }

        .applications-nav button {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            font-family: 'Sora', sans-serif;
        }

            .applications-nav button:hover {
                background: #f5f5f5;
            }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
        font-size: 24px;
    }

    .stat-primary {
        background: rgba(245, 124, 0, 0.1);
        color: var(--primary-color);
    }

    .stat-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .stat-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .stat-danger {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .stat-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .stat-content h3 {
        margin: 0 0 5px;
        font-size: 24px;
        color: var(--dark-color);
    }

    .stat-content p {
        margin: 0;
        color: #777;
        font-size: 14px;
    }

    .applications-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .application-card {
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .application-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

    .application-header {
        padding: 20px;
        background: linear-gradient(135deg, var(--primary-color), #ff9800);
        color: white;
    }

    .application-avatar {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        border: 3px solid white;
        margin: 0 auto 15px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background: white;
        color: var(--primary-color);
        font-size: 24px;
        font-weight: bold;
    }

    .application-header h3 {
        margin: 0 0 5px;
        font-size: 18px;
        text-align: center;
    }

    .application-id {
        display: inline-block;
        background: rgba(255, 255, 255, 0.2);
        padding: 3px 10px;
        border-radius: 20px;
        font-size: 12px;
        text-align: center;
    }

    .application-body {
        padding: 20px;
    }

    .application-info {
        margin-bottom: 15px;
    }

        .application-info p {
            margin: 8px 0;
            display: flex;
            align-items: center;
        }

        .application-info i {
            margin-left: 10px;
            color: var(--primary-color);
            width: 20px;
            text-align: center;
        }

    .application-stats {
        display: flex;
        justify-content: space-between;
        padding-top: 15px;
        border-top: 1px solid #eee;
    }

    .stat-item {
        text-align: center;
    }

        .stat-item .number {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-color);
        }

        .stat-item .label {
            font-size: 12px;
            color: #777;
        }

    .application-footer {
        padding: 15px 20px;
        background: #f9f9f9;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-pending {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-accepted {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-rejected {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s;
        font-family: 'Sora', sans-serif;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .btn-outline:hover {
            background: #f5f5f5;
        }

    .btn-success {
        background: #4caf50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s;
        font-family: 'Sora', sans-serif;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .btn-success:hover {
            background: #45a049;
        }

    .btn-danger {
        background: #f44336;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s;
        font-family: 'Sora', sans-serif;
        display: flex;
        align-items: center;
        gap: 5px;
    }

        .btn-danger:hover {
            background: #da190b;
        }

    .loading {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .loading i {
            font-size: 48px;
            color: var(--primary-color);
            margin-bottom: 15px;
            animation: spin 1s linear infinite;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .no-applications {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .no-applications i {
            font-size: 48px;
            color: #ddd;
            margin-bottom: 15px;
        }

    .search-box {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
    }

    .search-input {
        flex: 1;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-family: 'Sora', sans-serif;
    }

    .filter-select {
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-family: 'Sora', sans-serif;
    }

    .tabs {
        display: flex;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .tab {
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px 20px;
        cursor: pointer;
        font-family: 'Sora', sans-serif;
        transition: all 0.3s;
    }

        .tab:hover, .tab.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-header h3, .sidebar-menu span {
            display: none;
        }

        .sidebar-menu a {
            justify-content: center;
            padding: 15px;
        }

        .sidebar-menu i {
            margin-left: 0;
        }

        .applications-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .students-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
        }

        .sidebar-menu {
            display: flex;
            overflow-x: auto;
        }

            .sidebar-menu ul {
                display: flex;
            }

            .sidebar-menu li {
                margin-bottom: 0;
                margin-left: 5px;
            }

            .sidebar-menu a {
                border-radius: 5px;
                border-right: none !important;
                border-bottom: 3px solid transparent;
            }

                .sidebar-menu a:hover, .sidebar-menu a.active {
                    border-right: none;
                    border-bottom: 3px solid var(--primary-color);
                }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .applications-grid {
            grid-template-columns: 1fr;
        }

        .applications-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .applications-nav {
            justify-content: center;
        }

        .search-box {
            flex-direction: column;
        }
    }

    /* أنماط المودال */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        backdrop-filter: blur(5px);
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        animation: modalSlideIn 0.3s ease-out;
    }

    @@keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-50px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, var(--primary-color), #ff9800);
        color: white;
        border-radius: 15px 15px 0 0;
    }

        .modal-header h3 {
            margin: 0;
            font-size: 22px;
        }

    .modal-close {
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background 0.3s;
    }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

    .modal-body {
        padding: 20px;
    }

    .detail-section {
        margin-bottom: 20px;
    }

        .detail-section h4 {
            color: var(--primary-color);
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 10px;
            margin-bottom: 15px;
        }

    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        padding: 8px 0;
        border-bottom: 1px solid #eee;
    }

    .detail-label {
        font-weight: 500;
        color: var(--dark-color);
    }

    .detail-value {
        color: #555;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        background: #f9f9f9;
        border-radius: 0 0 15px 15px;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        cursor: pointer;
        font-family: 'Sora', sans-serif;
        font-weight: 500;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .btn-primary:hover {
            background: #e65100;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(245, 124, 0, 0.3);
        }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 8px;
        cursor: pointer;
        font-family: 'Sora', sans-serif;
        font-weight: 500;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 8px;
    }

        .btn-secondary:hover {
            background: #545b62;
            transform: translateY(-2px);
        }

    .rejection-form {
        margin-top: 20px;
        padding-top: 20px;
        border-top: 1px solid #eee;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
            color: var(--dark-color);
        }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-family: 'Sora', sans-serif;
        font-size: 14px;
        transition: border-color 0.3s;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(245, 124, 0, 0.1);
        }

    .alert-warning {
        background: #fff3cd;
        color: #856404;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #ffeaa7;
        margin-top: 15px;
    }

        .alert-warning i {
            margin-left: 5px;
        }
</style>

<!-- Top Panel -->
<div class="mil-top-panel">
    <div class="mil-logo">
        <a href="#home"><img src="https://via.placeholder.com/150x50?text=الجامعة" alt="Logo"></a>
    </div>
    <div class="mil-navigation">
        <nav>
            <ul>
                <li><a href="/"><i class="fas fa-home"></i> الرئيسية</a></li>
                <li><a href="/students-managment"><i class="fas fa-users"></i> الطلاب</a></li>
                <li><a href="/admin/applications"><i class="fas fa-file-signature"></i> طلبات التقديم</a></li>
                <li><a href="#contact"><i class="fas fa-phone"></i> اتصل بنا</a></li>
            </ul>
        </nav>
    </div>
    <div class="mil-menu-btn">
        <span></span>
    </div>
</div>

<div class="students-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        <div class="top-bar">
            <div class="user-profile">
                <div class="user-info">
                    <h4>د. أحمد محمد</h4>
                    <p>مدير النظام - قسم إدارة الطلاب</p>
                </div>
                <img src="https://via.placeholder.com/40" alt="User" style="width: 40px; height: 40px; border-radius: 50%; margin-left: 10px;">
            </div>
        </div>

        <div class="applications-header">
            <h2><i class="fas fa-file-signature"></i> إدارة طلبات التقديم</h2>
            <div class="applications-nav">
                <button @onclick="RefreshApplications"><i class="fas fa-sync"></i> تحديث</button>
            </div>
        </div>

        <!-- بطاقات الإحصائيات -->
        <div class="stats-cards">
            <div class="stat-card">
                <div class="stat-icon stat-primary">
                    <i class="fas fa-file-alt"></i>
                </div>
                <div class="stat-content">
                    <h3>@totalApplications</h3>
                    <p>إجمالي الطلبات</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon stat-warning">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-content">
                    <h3>@pendingApplications</h3>
                    <p>قيد المراجعة</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon stat-success">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-content">
                    <h3>@acceptedApplications</h3>
                    <p>المقبولة</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon stat-danger">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="stat-content">
                    <h3>@rejectedApplications</h3>
                    <p>المرفوضة</p>
                </div>
            </div>
        </div>

        <!-- شريط البحث والفلاتر -->
        <div class="search-box">
            <input type="text" class="search-input" placeholder="بحث في الطلبات..." @bind="searchTerm" @oninput="SearchApplications" />
            <select class="filter-select" @onchange="FilterByDepartment">
                <option value="">كل الأقسام</option>
                @foreach (var dept in departments)
                {
                    <option value="@dept.Id">@dept.Name</option>
                }
            </select>
        </div>

        <!-- علامات التبويب -->
        <div class="tabs">
            <div class="tab @(currentStatus == ApplicationStatus.All ? "active" : "")" @onclick="() => FilterApplications(ApplicationStatus.All)">
                <i class="fas fa-list"></i> جميع الطلبات
            </div>
            <div class="tab @(currentStatus == ApplicationStatus.Pending ? "active" : "")" @onclick="() => FilterApplications(ApplicationStatus.Pending)">
                <i class="fas fa-clock"></i> قيد المراجعة
            </div>
            <div class="tab @(currentStatus == ApplicationStatus.Accepted ? "active" : "")" @onclick="() => FilterApplications(ApplicationStatus.Accepted)">
                <i class="fas fa-check-circle"></i> المقبولة
            </div>
            <div class="tab @(currentStatus == ApplicationStatus.Rejected ? "active" : "")" @onclick="() => FilterApplications(ApplicationStatus.Rejected)">
                <i class="fas fa-times-circle"></i> المرفوضة
            </div>
        </div>

        <!-- عرض التحميل -->
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner"></i>
                <p>جاري تحميل بيانات الطلبات...</p>
            </div>
        }
        else if (applications == null || !applications.Any())
        {
            <div class="no-applications">
                <i class="fas fa-file-alt"></i>
                <p>لا توجد بيانات طلبات حالياً.</p>
                <button class="mil-button" @onclick="RefreshApplications"><i class="fas fa-sync"></i> تحديث البيانات</button>
            </div>
        }
        else
        {
            <!-- بطاقات الطلبات -->
            <div class="applications-grid">
                @foreach (var app in applications)
                {
                    <div class="application-card">
                        <div class="application-header">
                            <div class="application-avatar">
                                @GetInitials(app.FirstName, app.LastName)
                            </div>
                            <h3>@app.FirstName @app.LastName</h3>
                            <span class="application-id">طلب #@app.Id</span>
                        </div>
                        <div class="application-body">
                            <div class="application-info">
                                <p><i class="fas fa-graduation-cap"></i> @GetDepartmentName(app.DepartmentId)</p>
                                <p><i class="fas fa-envelope"></i> @app.Email</p>
                                <p><i class="fas fa-phone"></i> @app.Phone</p>
                                <p><i class="fas fa-calendar"></i> @app.SubmitDate.ToString("yyyy-MM-dd")</p>
                            </div>
                            <div class="application-stats">
                                <div class="stat-item">
                                    <div class="number">@app.GPA.ToString("F2")</div>
                                    <div class="label">المعدل</div>
                                </div>
                                <div class="stat-item">
                                    <div class="number">@GetEducationLevel(app.EducationLevel)</div>
                                    <div class="label">المؤهل</div>
                                </div>
                            </div>
                        </div>
                        <div class="application-footer">
                            <span class="badge @(GetStatusBadgeClass(app.Status))">@GetStatusText(app.Status)</span>
                            <div style="display: flex; gap: 5px;">
                                <button class="btn-outline" @onclick="() => ViewApplicationDetails(app)">
                                    <i class="fas fa-eye"></i>
                                </button>
                                @if (app.Status == "قيد المراجعة")
                                {
                                    <button class="btn-success" @onclick="() => AcceptApplication(app)">
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <button class="btn-danger" @onclick="() => ShowRejectModal(app)">
                                        <i class="fas fa-times"></i>
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<!-- مودال عرض التفاصيل -->
@if (showDetailsModal && selectedApplication != null)
{
    <div class="modal-overlay" @onclick="CloseDetailsModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3><i class="fas fa-file-alt"></i> تفاصيل الطلب #@selectedApplication.Id</h3>
                <button class="modal-close" @onclick="CloseDetailsModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="detail-section">
                    <h4><i class="fas fa-user"></i> المعلومات الشخصية</h4>
                    <div class="detail-item">
                        <span class="detail-label">الاسم الكامل:</span>
                        <span class="detail-value">@selectedApplication.FirstName @selectedApplication.LastName</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">البريد الإلكتروني:</span>
                        <span class="detail-value">@selectedApplication.Email</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">رقم الهاتف:</span>
                        <span class="detail-value">@selectedApplication.Phone</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">تاريخ الميلاد:</span>
                        <span class="detail-value">@selectedApplication.BirthDate.ToString("yyyy-MM-dd")</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">الجنس:</span>
                        <span class="detail-value">@selectedApplication.Gender</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">العنوان:</span>
                        <span class="detail-value">@selectedApplication.Address</span>
                    </div>
                </div>

                <div class="detail-section">
                    <h4><i class="fas fa-graduation-cap"></i> المعلومات الأكاديمية</h4>
                    <div class="detail-item">
                        <span class="detail-label">القسم المطلوب:</span>
                        <span class="detail-value">@GetDepartmentName(selectedApplication.DepartmentId)</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">المؤهل الدراسي:</span>
                        <span class="detail-value">@selectedApplication.EducationLevel</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">المعدل التراكمي:</span>
                        <span class="detail-value">@selectedApplication.GPA.ToString("F2")</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">تاريخ التقديم:</span>
                        <span class="detail-value">@selectedApplication.SubmitDate.ToString("yyyy-MM-dd HH:mm")</span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">الحالة:</span>
                        <span class="detail-value">
                            <span class="badge @(GetStatusBadgeClass(selectedApplication.Status))">@GetStatusText(selectedApplication.Status)</span>
                        </span>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedApplication.RejectionReason))
                    {
                        <div class="detail-item">
                            <span class="detail-label">سبب الرفض:</span>
                            <span class="detail-value text-danger">@selectedApplication.RejectionReason</span>
                        </div>
                    }
                </div>

                @if (!string.IsNullOrEmpty(selectedApplication.CertificatePath))
                {
                    <div class="detail-section">
                        <h4><i class="fas fa-paperclip"></i> المستندات المرفقة</h4>
                        <div class="detail-item">
                            <span class="detail-label">الشهادة:</span>
                            <span class="detail-value">
                                <a href="@selectedApplication.CertificatePath" target="_blank" class="btn-outline">
                                    <i class="fas fa-download"></i> تحميل الشهادة
                                </a>
                            </span>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" @onclick="CloseDetailsModal">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>
}

<!-- مودال رفض الطلب -->
@if (showRejectModal && applicationToReject != null)
{
    <div class="modal-overlay" @onclick="CloseRejectModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header" style="background: linear-gradient(135deg, #ef4444, #dc2626); color: white;">
                <h3><i class="fas fa-times-circle"></i> رفض الطلب #@applicationToReject.Id</h3>
                <button class="modal-close" @onclick="CloseRejectModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>سبب الرفض <span style="color: red;">*</span></label>
                    <textarea class="form-control" rows="4" placeholder="أدخل سبب الرفض..." @bind="rejectionReason" required></textarea>
                </div>
                <div class="alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    سيتم إعلام الطالب برفض طلبه. لا يمكن التراجع عن هذا الإجراء.
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-secondary" @onclick="CloseRejectModal">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button class="btn-danger" @onclick="RejectApplication" disabled="@string.IsNullOrEmpty(rejectionReason)">
                    <i class="fas fa-times-circle"></i> تأكيد الرفض
                </button>
            </div>
        </div>
    </div>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const menuBtn = document.querySelector('.mil-menu-btn');
        const navigation = document.querySelector('.mil-navigation');

        menuBtn.addEventListener('click', function () {
            menuBtn.classList.toggle('mil-active');
            navigation.style.display = navigation.style.display === 'block' ? 'none' : 'block';
        });

        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({ behavior: 'smooth' });
            });
        });

        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            item.addEventListener('click', function (e) {
                document.querySelectorAll('.sidebar-menu a').forEach(link => link.classList.remove('active'));
                this.classList.add('active');
            });
        });
    });
</script>

@code {
    private List<StudentApplicationDto> applications = new();
    private StudentApplicationDto selectedApplication;
    private StudentApplicationDto applicationToReject;
    private string searchTerm = "";
    private string rejectionReason = "";
    private int? selectedDepartmentId = null;
    private bool isLoading = true;

    // إحصائيات
    private int totalApplications = 0;
    private int pendingApplications = 0;
    private int acceptedApplications = 0;
    private int rejectedApplications = 0;

    // الفلاتر
    private ApplicationStatus currentStatus = ApplicationStatus.All;

    // الأقسام
    private List<DepartmentDto> departments = new();

    // مودالات
    private bool showDetailsModal = false;
    private bool showRejectModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        await LoadStatistics();
        await LoadApplications();
    }

    private async Task LoadDepartments()
    {
        try
        {
            departments = await _departmentService.GetAllDepartmentsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            totalApplications = await _applicationService.GetApplicationsCountAsync();
            pendingApplications = await _applicationService.GetPendingCountAsync();
            acceptedApplications = await _applicationService.GetApprovedCountAsync();
            rejectedApplications = await _applicationService.GetRejectedCountAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    private async Task LoadApplications()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            List<StudentApplicationDto> allApps = currentStatus switch
            {
                ApplicationStatus.Pending => await _applicationService.GetPendingApplicationsAsync(),
                ApplicationStatus.Accepted => (await _applicationService.GetAllApplicationsAsync()).Where(a => a.Status == "مقبول").ToList(),
                ApplicationStatus.Rejected => (await _applicationService.GetAllApplicationsAsync()).Where(a => a.Status == "مرفوض").ToList(),
                _ => await _applicationService.GetAllApplicationsAsync()
            };

            // بحث
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                allApps = allApps.Where(a =>
                    a.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            // تصفية حسب القسم
            if (selectedDepartmentId.HasValue)
            {
                allApps = allApps.Where(a => a.DepartmentId == selectedDepartmentId.Value).ToList();
            }

            applications = allApps;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshApplications()
    {
        await LoadStatistics();
        await LoadApplications();
    }

    private async Task FilterApplications(ApplicationStatus status)
    {
        currentStatus = status;
        await LoadApplications();
    }

    private async Task SearchApplications(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await LoadApplications();
    }

    private async Task FilterByDepartment(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        selectedDepartmentId = string.IsNullOrEmpty(value) ? null : (int?)int.Parse(value);
        await LoadApplications();
    }

    private async Task ViewApplicationDetails(StudentApplicationDto application)
    {
        selectedApplication = application;
        showDetailsModal = true;
    }

    private void CloseDetailsModal()
    {
        showDetailsModal = false;
        selectedApplication = null;
    }

    private async Task AcceptApplication(StudentApplicationDto application)
    {
        try
        {
            application.TemporaryPassword = GenerateTemporaryPassword();
            var success = await _applicationService.ApproveApplicationAsync(application.Id);
            if (success)
            {
                await CreateStudentAccount(application);
                await LoadStatistics();
                await LoadApplications();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accepting application: {ex.Message}");
        }
    }

    private async Task ShowRejectModal(StudentApplicationDto application)
    {
        applicationToReject = application;
        rejectionReason = "";
        showRejectModal = true;
    }

    private void CloseRejectModal()
    {
        showRejectModal = false;
        applicationToReject = null;
        rejectionReason = "";
    }

    private async Task RejectApplication()
    {
        if (applicationToReject != null && !string.IsNullOrEmpty(rejectionReason))
        {
            try
            {
                var success = await _applicationService.RejectApplicationAsync(applicationToReject.Id, rejectionReason);
                if (success)
                {
                    await LoadStatistics();
                    await LoadApplications();
                    CloseRejectModal();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rejecting application: {ex.Message}");
            }
        }
    }

    // Helper functions
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "قيد المراجعة" => "badge-pending",
            "مقبول" => "badge-accepted",
            "مرفوض" => "badge-rejected",
            _ => "badge-pending"
        };
    }

    private string GetStatusText(string status)
    {
        return status switch
        {
            "قيد المراجعة" => "قيد المراجعة",
            "مقبول" => "مقبول",
            "مرفوض" => "مرفوض",
            _ => status
        };
    }

    private async Task<StudentDto> CreateStudentAccount(StudentApplicationDto application)
    {
        try
        {
            var student = new StudentDto
                {
                    StudentId = GenerateStudentId(),
                    FullName = application.FirstName + "-" + application.LastName,
                    Phone = application.Phone,
                    BirthOfDate = application.BirthDate,
                    Sexual = application.Gender == "ذكر",
                    HomeAddress = application.Address,
                    DepartmentId = application.DepartmentId,
                    Status = StudentStatus.New,
                    StatusOnSite = "نشط",
                    RegistrationDate = DateTime.Now,
                    UserNameOnSite = application.Email,
                    PasswordOnSite = application.TemporaryPassword,
                    NationalityId = application.NationalityId,
                    // باقي الحقول تبقى فارغة أو بالقيم الافتراضية
                    Religion = application.Religion,
                    SecoundPhone = "",
                    TrueIsEmployee = false,
                    WorkAddress = "",
                    PoliticalNationalism = "",
                    NationalityName = "",
                    HomeNumber = 0,
                    CivilstatusIDNumberAndNationalCard = "",
                    CivilstatusIDNumberAndNationalCardFrom = "",
                    CivilstatusIDNumberAndNationalCardDate = DateTime.MinValue,
                    NationalityCertificateNumber = 0,
                    NationalityCertificateNumberFrom = "",
                    NationalityCertificateNumberDate = DateTime.MinValue,
                    ExamNumber = 0,
                    SecretNumber = 0,
                    ApplyTunnel = false,
                    TunnelId = 1,
                    ERegistrationCompleted = false,
                    RegistraionCompleted = false,
                    SubmissionIsCompleted = false,
                    SubmissionDepartment = "",
                    TunnelDepartment = "",
                    AccountsReceiptNumber = 0,
                    SchoolName = "",
                    Branch = "",
                    DateOfSchoolGraduate = DateTime.MinValue,
                    StudentTotalWithoutAdditions = 0,
                    StudentTotalWithAdditions = 0,
                    StudentGPAWithoutAdditions = 0,
                    StudentGPAWithAdditions = 0,
                    FullAddress = application.Address,
                    AccountBalance = 0,
                    Email = application.Email
                };

            try
            {
                var savedUser = await _studentService.CreateStudentAsync(student);
                return savedUser;
            }
            catch (Exception)
            {
                throw;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating student account: {ex.Message}");
            return new StudentDto();
        }
    }

    private string GenerateStudentId()
    {
        return $"STU-{DateTime.Now:yyyy}-{new Random().Next(1000, 9999)}";
    }

    private string GenerateTemporaryPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private string GetDepartmentName(int departmentId)
    {
        var department = departments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Name ?? "غير محدد";
    }

    private string GetInitials(string firstName, string lastName)
    {
        var firstInitial = !string.IsNullOrEmpty(firstName) ? firstName.Substring(0, 1) : "";
        var lastInitial = !string.IsNullOrEmpty(lastName) ? lastName.Substring(0, 1) : "";
        return $"{firstInitial}{lastInitial}".ToUpper();
    }

    private string GetEducationLevel(string level)
    {
        return level switch
        {
            "ثانوي" => "ثانوي",
            "دبلوم" => "دبلوم",
            "بكالوريوس" => "بكالوريوس",
            _ => level
        };
    }

    public enum ApplicationStatus
    {
        All,
        Pending,
        Accepted,
        Rejected
    }
}