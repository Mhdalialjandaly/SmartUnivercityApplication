@page "/reportsview"
@attribute [Authorize(Roles = "Admin")]
@using UniversityManagementSystem.Application.DTOs
@inject IReportServices ReportService
@inject IToastService ToastService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<style>
    /* أنماط CSS من ملف النص */
    *, *:before, *:after {
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
    }

    html, body {
        padding: 0;
        margin: 0;
        font-family: "Sora", sans-serif;
        font-size: 15px;
        font-weight: 400;
        color: rgba(18, 24, 32, 0.7);
        line-height: 170%;
        background-color: #f9f9f9;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: "Sora", sans-serif;
        color: rgb(18, 24, 32);
        font-weight: 600;
        line-height: 140%;
    }

    h1 {
        font-size: 42px;
    }

    h2 {
        font-size: 36px;
    }

    h3 {
        font-size: 28px;
    }

    h4 {
        font-size: 22px;
    }

    h5 {
        font-size: 18px;
    }

    h6 {
        font-size: 16px;
    }

    a {
        color: inherit;
        text-decoration: none;
    }

    .mil-accent {
        color: rgb(245, 124, 0);
    }

    .mil-bold {
        font-weight: 500;
    }

    .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .mil-section {
        padding: 80px 0;
    }

    .mil-section-title {
        text-align: center;
        margin-bottom: 60px;
    }

        .mil-section-title h2 {
            font-size: 36px;
            margin-bottom: 15px;
        }

        .mil-section-title p {
            color: rgba(18, 24, 32, 0.5);
            max-width: 600px;
            margin: 0 auto;
        }

    .mil-flex {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
    }

    .mil-flex-center {
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    }

    .mil-mb-30 {
        margin-bottom: 30px;
    }

    .mil-mb-60 {
        margin-bottom: 60px;
    }

    .mil-mb-90 {
        margin-bottom: 90px;
    }

    .mil-mt-30 {
        margin-top: 30px;
    }

    .mil-mt-60 {
        margin-top: 60px;
    }

    .mil-mt-90 {
        margin-top: 90px;
    }

    .mil-center {
        text-align: center;
    }

    .mil-button {
        cursor: pointer;
        height: 60px;
        padding: 0 40px;
        font-family: "Sora", sans-serif;
        font-size: 16px;
        color: rgb(18, 24, 32);
        font-weight: 500;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        text-align: center;
        border: none;
        border-radius: 40px;
        background-color: rgb(245, 124, 0);
        color: white;
        -webkit-transition: 0.4s cubic-bezier(0, 0, 0.3642, 1);
        transition: 0.4s cubic-bezier(0, 0, 0.3642, 1);
    }

        .mil-button:hover {
            -webkit-transform: translateY(-5px);
            transform: translateY(-5px);
            -webkit-box-shadow: 0px 10px 20px 0px rgba(245, 124, 0, 0.3);
            box-shadow: 0px 10px 20px 0px rgba(245, 124, 0, 0.3);
        }

        .mil-button.mil-button-sm {
            height: 50px;
            padding: 0 30px;
            font-size: 14px;
        }

    .mil-top-panel {
        padding: 0 10px;
        height: 80px;
        background-color: rgb(255, 255, 255);
        width: 100%;
        z-index: 999;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-shadow: 0px 0px 40px 0px rgba(18, 24, 32, 0.1);
        box-shadow: 0px 0px 40px 0px rgba(18, 24, 32, 0.1);
        position: fixed;
        top: 0;
        left: 0;
    }

    .mil-logo img {
        height: 50px;
    }

    .mil-navigation nav ul {
        list-style: none;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
    }

        .mil-navigation nav ul li {
            margin: 0 15px;
            position: relative;
        }

            .mil-navigation nav ul li a {
                font-family: "Sora", sans-serif;
                text-decoration: none;
                color: rgb(18, 24, 32);
                font-weight: 400;
                white-space: nowrap;
                -webkit-transition: 0.2s cubic-bezier(0, 0, 0.3642, 1);
                transition: 0.2s cubic-bezier(0, 0, 0.3642, 1);
            }

                .mil-navigation nav ul li a:hover {
                    color: rgb(245, 124, 0);
                }

    .mil-menu-btn {
        display: none;
        cursor: pointer;
        width: 30px;
        height: 30px;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    }

        .mil-menu-btn span, .mil-menu-btn span:after, .mil-menu-btn span:before {
            content: "";
            display: block;
            width: 24px;
            height: 2px;
            background: rgb(18, 24, 32);
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            -webkit-transition: inherit;
            transition: inherit;
        }

        .mil-menu-btn span {
            position: relative;
        }

            .mil-menu-btn span:before {
                top: -8px;
            }

            .mil-menu-btn span:after {
                top: 8px;
            }

        .mil-menu-btn.mil-active span {
            background: transparent;
        }

            .mil-menu-btn.mil-active span:before {
                top: 0;
                -webkit-transform: rotate(45deg);
                transform: rotate(45deg);
            }

            .mil-menu-btn.mil-active span:after {
                top: 0;
                -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
            }

    /* أنماط إضافية للوحة التقارير */
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        padding-top: 80px;
    }

    .reports-dashboard {
        display: flex;
        min-height: calc(100vh - 80px);
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: calc(100vh - 80px);
        overflow-y: auto;
    }

    .sidebar-header {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-header h3 {
            color: white;
            margin: 10px 0;
        }

    .sidebar-menu {
        padding: 20px 0;
    }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover, .sidebar-menu a.active {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border-right: 3px solid var(--primary-color);
            }

        .sidebar-menu i {
            margin-left: 10px;
            font-size: 18px;
        }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: calc(100vh - 80px);
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .user-profile {
        display: flex;
        align-items: center;
    }

        .user-profile img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-left: 10px;
        }

    .search-box {
        display: flex;
        align-items: center;
    }

        .search-box input {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 5px 0 0 5px;
            outline: none;
            font-family: 'Sora', sans-serif;
        }

        .search-box button {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 0 5px 5px 0;
            background: #f5f5f5;
            cursor: pointer;
            transition: all 0.3s;
        }

            .search-box button:hover {
                background: #e0e0e0;
            }

    .report-filters {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .filter-row {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        margin-bottom: 15px;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .filter-group select, .filter-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
            box-sizing: border-box;
        }

    .filter-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
        font-family: 'Sora', sans-serif;
        display: inline-flex;
        align-items: center;
        gap: 5px;
    }

        .btn i {
            margin-left: 5px;
        }

    .btn-primary {
        background: var(--primary-color);
        color: white;
        box-shadow: 0 4px 6px rgba(245, 124, 0, 0.2);
    }

        .btn-primary:hover {
            background: #e65100;
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(245, 124, 0, 0.3);
        }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

        .btn-outline:hover {
            background: #f5f5f5;
        }

    .btn-success {
        background: #4caf50;
        color: white;
    }

        .btn-success:hover {
            background: #43a047;
            transform: translateY(-2px);
        }

    .btn-danger {
        background: #f44336;
        color: white;
    }

        .btn-danger:hover {
            background: #e53935;
            transform: translateY(-2px);
        }

    .report-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        background: rgba(245, 124, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon i {
            color: var(--primary-color);
            font-size: 24px;
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table-responsive {
        overflow-x: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

        .table tr:hover {
            background: #f5f5f5;
        }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-primary {
        background: rgba(245, 124, 0, 0.1);
        color: var(--primary-color);
    }

    .badge-danger {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .chart-container {
        height: 300px;
        margin-top: 20px;
    }

    .export-buttons {
        display: flex;
        gap: 10px;
    }

    .loading {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .loading i {
            font-size: 48px;
            color: var(--primary-color);
            margin-bottom: 15px;
            animation: spin 1s linear infinite;
        }

    .no-data {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .no-data i {
            font-size: 48px;
            color: #ddd;
            margin-bottom: 15px;
        }

    /* أنماط المودال المحسّنة */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 10000;
        backdrop-filter: blur(5px);
        animation: fadeIn 0.3s ease;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.25);
        animation: modalSlideIn 0.3s ease-out;
        position: relative;
    }

    .modal-header {
        padding: 20px 25px;
        border-bottom: 1px solid #f0f0f0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, var(--primary-color), #ff9800);
        color: white;
        border-radius: 12px 12px 0 0;
        position: sticky;
        top: 0;
        z-index: 10;
    }

        .modal-header h3 {
            margin: 0;
            font-size: 22px;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 10px;
        }

    .modal-close {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: all 0.3s;
    }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(90deg);
        }

    .modal-body {
        padding: 25px;
    }

    .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 25px;
    }

    .form-group {
        margin-bottom: 20px;
        position: relative;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark-color);
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 14px 16px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        font-family: 'Sora', sans-serif;
        font-size: 15px;
        transition: all 0.3s;
        box-sizing: border-box;
        background-color: #fafafa;
    }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(245, 124, 0, 0.15);
            background-color: white;
        }

        .form-control:disabled {
            background-color: #f5f5f5;
            color: #999;
            cursor: not-allowed;
        }

    select.form-control {
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23666' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 16px center;
        background-size: 16px;
        padding-right: 45px;
    }

    .section-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--primary-color);
        margin: 30px 0 20px;
        padding-bottom: 12px;
        border-bottom: 2px solid rgba(245, 124, 0, 0.2);
        position: relative;
    }

        .section-title:first-child {
            margin-top: 0;
        }

        .section-title::after {
            content: '';
            position: absolute;
            bottom: -2px;
            left: 0;
            width: 60px;
            height: 2px;
            background: var(--primary-color);
        }

    .modal-footer {
        padding: 20px 25px;
        border-top: 1px solid #f0f0f0;
        display: flex;
        justify-content: flex-end;
        gap: 15px;
        background: #fafafa;
        border-radius: 0 0 12px 12px;
        position: sticky;
        bottom: 0;
        z-index: 10;
    }

    .required-field::after {
        content: '*';
        color: #e53935;
        margin-right: 4px;
    }

    .error-message {
        color: #e53935;
        font-size: 13px;
        margin-top: 5px;
        display: block;
    }

    .success-message {
        background: #e8f5e9;
        color: #2e7d32;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #c8e6c9;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        border-radius: 12px;
        flex-direction: column;
        gap: 15px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgba(245, 124, 0, 0.3);
        border-top: 4px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        font-weight: 500;
        color: var(--dark-color);
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-header h3, .sidebar-menu span {
            display: none;
        }

        .sidebar-menu a {
            justify-content: center;
            padding: 15px;
        }

        .sidebar-menu i {
            margin-left: 0;
        }

        .main-content {
            margin-right: 70px;
        }

        .report-cards {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .reports-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .sidebar-menu {
            display: flex;
            overflow-x: auto;
        }

            .sidebar-menu ul {
                display: flex;
            }

            .sidebar-menu li {
                margin-bottom: 0;
                margin-left: 5px;
            }

            .sidebar-menu a {
                border-radius: 5px;
                border-right: none !important;
                border-bottom: 3px solid transparent;
            }

                .sidebar-menu a:hover, .sidebar-menu a.active {
                    border-right: none;
                    border-bottom: 3px solid var(--primary-color);
                }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .filter-row {
            flex-direction: column;
        }

        .card-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .modal-content {
            width: 95%;
            margin: 10px;
            max-height: 95vh;
        }

        .form-row {
            grid-template-columns: 1fr;
            gap: 15px;
        }

        .modal-footer {
            flex-direction: column;
        }

            .modal-footer button {
                width: 100%;
                justify-content: center;
            }
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-30px) scale(0.95);
        }

        to {
            opacity: 1;
            transform: translateY(0) scale(1);
        }
    }
</style>

<!-- Top Panel -->
<div class="mil-top-panel">
    <div class="mil-logo">
        <a href="/"><img src="https://via.placeholder.com/150x50?text=الجامعة" alt="Logo"></a>
    </div>
    <div class="mil-navigation">
        <nav>
            <ul>
                <li><a href="/"><i class="fas fa-home"></i> الرئيسية</a></li>
                <li><a href="/studentsview"><i class="fas fa-users"></i> الطلاب</a></li>
                <li><a href="/coursesview"><i class="fas fa-book"></i> المقررات</a></li>
                <li><a href="/assessments"><i class="fas fa-clipboard-list"></i> التقييمات</a></li>
                <li><a href="/reportsview"><i class="fas fa-chart-bar"></i> التقارير</a></li>
                <li><a href="#contact"><i class="fas fa-phone"></i> اتصل بنا</a></li>
            </ul>
        </nav>
    </div>
    <div class="mil-menu-btn">
        <span></span>
    </div>
</div>

<div class="reports-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        <!-- الشريط العلوي -->
        <div class="top-bar">
            <div class="search-box">
                <input type="text" placeholder="بحث في التقارير..." @bind="searchTerm" />
                <button class="mil-button mil-button-sm" @onclick="SearchReports"><i class="fas fa-search"></i></button>
            </div>
            <div class="user-profile">
                <div class="user-info">
                    <h4>د. أحمد محمد</h4>
                    <p>أستاذ مساعد - قسم علوم الحاسب</p>
                </div>
                <img src="https://via.placeholder.com/40" alt="User" style="width: 40px; height: 40px; border-radius: 50%; margin-left: 10px;">
            </div>
        </div>

        <!-- رأس الصفحة -->
        <div class="page-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
            <h2><i class="fas fa-chart-bar"></i> التقارير</h2>
            <button class="mil-button" @onclick="ShowAddReportModal"><i class="fas fa-plus"></i> إضافة تقرير جديد</button>
        </div>

        <!-- مرشحات التقارير -->
        <div class="report-filters">
            <h3><i class="fas fa-filter"></i> تصفية التقارير</h3>
            <div class="filter-row">
                <div class="filter-group">
                    <label for="report-type">نوع التقرير</label>
                    <select id="report-type" class="form-control" @bind="selectedReportType">
                        <option value="academic">الأداء الأكاديمي</option>
                        <option value="attendance">الحضور والغياب</option>
                        <option value="exam">النتائج الامتحانية</option>
                        <option value="evaluation">تقييم الطلاب</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="semester">الفصل الدراسي</label>
                    <select id="semester" class="form-control" @bind="selectedSemester">
                        <option value="2-1445">الفصل الدراسي الثاني 1445ه</option>
                        <option value="1-1445">الفصل الدراسي الأول 1445ه</option>
                        <option value="2-1444">الفصل الدراسي الثاني 1444ه</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="course">المقرر</label>
                    <select id="course" class="form-control" @bind="selectedCourse">
                        <option value="">جميع المقررات</option>
                        @if (courses != null)
                        {
                            @foreach (var course in courses)
                            {
                                <option value="@course.Id">@course.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="filter-row">
                <div class="filter-group">
                    <label for="date-from">من تاريخ</label>
                    <input type="date" id="date-from" class="form-control" @bind="dateFrom">
                </div>
                <div class="filter-group">
                    <label for="date-to">إلى تاريخ</label>
                    <input type="date" id="date-to" class="form-control" @bind="dateTo">
                </div>
            </div>
            <div class="filter-buttons">
                <button class="btn btn-primary" @onclick="GenerateReport"><i class="fas fa-chart-bar"></i> عرض التقرير</button>
                <button class="btn btn-outline" @onclick="ResetFilters"><i class="fas fa-redo"></i> إعادة تعيين</button>
            </div>
        </div>

        <!-- عرض التحميل -->
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner"></i>
                <p>جاري تحميل التقارير...</p>
            </div>
        }
        else if (hasData)
        {
            <!-- بطاقات الإحصائيات -->
            <div class="report-cards">
                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@reportSummary.TotalStudents</h4>
                        <p>عدد الطلاب</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@reportSummary.AttendanceRate%</h4>
                        <p>معدل الحضور</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-star"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@reportSummary.AverageRating.ToString("F1")</h4>
                        <p>متوسط التقييم</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@reportSummary.SuccessRate%</h4>
                        <p>نسبة النجاح</p>
                    </div>
                </div>
            </div>

            <!-- تقرير الأداء الأكاديمي -->
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-chart-line"></i> تقرير الأداء الأكاديمي - @GetSemesterText(selectedSemester)</h3>
                    <div class="export-buttons">
                        <button class="btn btn-outline" @onclick="ExportToPDF"><i class="fas fa-file-pdf"></i> PDF</button>
                        <button class="btn btn-outline" @onclick="ExportToExcel"><i class="fas fa-file-excel"></i> Excel</button>
                    </div>
                </div>
                <div class="chart-container">
                    <!-- مخطط الأداء -->
                    <div style="display: flex; align-items: flex-end; height: 200px; gap: 10px; padding: 20px; border: 1px solid #eee; border-radius: 5px;">
                        @if (coursePerformance != null && coursePerformance.Any())
                        {
                            @foreach (var performance in coursePerformance)
                            {
                                <div style="flex: 1; display: flex; flex-direction: column; align-items: center;">
                                    <div style="width: 40px; background: @GetRandomColor(); height: @(performance.AverageScore * 2)px;"></div>
                                    <span style="margin-top: 10px; font-size: 12px; text-align: center;">@performance.CourseName</span>
                                </div>
                            }
                        }
                        else
                        {
                            <div style="width: 100%; text-align: center; padding: 50px;">
                                <p>لا توجد بيانات لعرضها</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- تفاصيل التقرير -->
            <div class="card" style="margin-top: 20px;">
                <div class="card-header">
                    <h3><i class="fas fa-table"></i> تفاصيل الأداء حسب المقرر</h3>
                    <button class="btn btn-primary">عرض الكل</button>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>المقرر</th>
                                <th>عدد الطلاب</th>
                                <th>متوسط الدرجات</th>
                                <th>معدل الحضور</th>
                                <th>نسبة النجاح</th>
                                <th>تقييم الطلاب</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (courseDetails != null && courseDetails.Any())
                            {
                                @foreach (var detail in courseDetails)
                                {
                                    <tr>
                                        <td>@detail.CourseName</td>
                                        <td>@detail.StudentCount</td>
                                        <td>@detail.AverageScore.ToString("F1")</td>
                                        <td>@detail.AttendanceRate%</td>
                                        <td>@detail.SuccessRate%</td>
                                        <td><span class="badge @(GetRatingBadgeClass(detail.AverageRating))">@detail.AverageRating.ToString("F1")/5</span></td>
                                        <td>
                                            <button class="btn btn-outline btn-sm" @onclick="() => ShowEditReportModal(detail)"><i class="fas fa-edit"></i></button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteReport(detail.Id)"><i class="fas fa-trash"></i></button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" style="text-align: center;">لا توجد بيانات لعرضها</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- تقرير الحضور والغياب -->
            <div class="card" style="margin-top: 20px;">
                <div class="card-header">
                    <h3><i class="fas fa-calendar-check"></i> تقرير الحضور والغياب</h3>
                    <div class="export-buttons">
                        <button class="btn btn-outline" @onclick="ExportAttendanceToPDF"><i class="fas fa-file-pdf"></i> PDF</button>
                        <button class="btn btn-outline" @onclick="ExportAttendanceToExcel"><i class="fas fa-file-excel"></i> Excel</button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>المقرر</th>
                                <th>إجمالي المحاضرات</th>
                                <th>متوسط الحضور</th>
                                <th>الطلاب الحاضرون</th>
                                <th>الطلاب الغائبون</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (attendanceReports != null && attendanceReports.Any())
                            {
                                @foreach (var attendance in attendanceReports)
                                {
                                    <tr>
                                        <td>@attendance.CourseName</td>
                                        <td>@attendance.TotalLectures</td>
                                        <td>@attendance.AttendanceRate%</td>
                                        <td>@attendance.PresentStudents</td>
                                        <td>@attendance.AbsentStudents</td>
                                        <td>
                                            <button class="btn btn-outline btn-sm" @onclick="() => ShowEditAttendanceModal(attendance)"><i class="fas fa-edit"></i></button>
                                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteAttendanceReport(attendance.Id)"><i class="fas fa-trash"></i></button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" style="text-align: center;">لا توجد بيانات لعرضها</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else
        {
            <div class="no-data">
                <i class="fas fa-chart-bar"></i>
                <p>لا توجد بيانات تقارير حالياً.</p>
                <button class="mil-button" @onclick="ShowAddReportModal"><i class="fas fa-plus"></i> إضافة تقرير جديد</button>
            </div>
        }
    </div>
</div>

<!-- مودال إضافة/تعديل التقرير -->
@if (showReportModal)
{
    <div class="modal-overlay" @onclick="CloseReportModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            @if (isSubmitting)
            {
                <div class="loading-overlay">
                    <div class="spinner"></div>
                    <div class="loading-text">جاري @(isEditMode ? "تحديث" : "إضافة") التقرير...</div>
                </div>
            }
            <div class="modal-header">
                <h3><i class="fas @(isEditMode ? "fa-edit" : "fa-plus")"></i> @(isEditMode ? "تعديل التقرير" : "إضافة تقرير جديد")</h3>
                <button class="modal-close" @onclick="CloseReportModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="success-message">
                        <i class="fas fa-check-circle"></i> @successMessage
                    </div>
                }
                <form @onsubmit:preventDefault="true">
                    <!-- معلومات التقرير الأساسية -->
                    <h4 class="section-title">معلومات التقرير الأساسية</h4>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="reportTitle" class="required-field">عنوان التقرير *</label>
                            <input type="text" id="reportTitle" class="form-control" @bind="currentReport.Title" required />
                        </div>
                        <div class="form-group">
                            <label for="reportType" class="required-field">نوع التقرير *</label>
                            <select id="reportType" class="form-control" @bind="currentReport.Type" required>
                                <option value="Academic">أكاديمي</option>
                                <option value="Attendance">حضور وغياب</option>
                                <option value="Exam">امتحانات</option>
                                <option value="Evaluation">تقييم</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="reportDate" class="required-field">تاريخ التقرير *</label>
                            <input type="date" id="reportDate" class="form-control" @bind="currentReport.ReportDate" required />
                        </div>
                        <div class="form-group">
                            <label for="semester" class="required-field">الفصل الدراسي *</label>
                            <select id="semester" class="form-control" @bind="currentReport.Semester" required>
                                <option value="2-1445">الفصل الدراسي الثاني 1445ه</option>
                                <option value="1-1445">الفصل الدراسي الأول 1445ه</option>
                                <option value="2-1444">الفصل الدراسي الثاني 1444ه</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="courseId">المقرر</label>
                            <select id="courseId" class="form-control" @bind="currentReport.CourseId">
                                <option value="">اختر المقرر</option>
                                @if (courses != null)
                                {
                                    @foreach (var course in courses)
                                    {
                                        <option value="@course.Id">@course.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="departmentId">القسم</label>
                            <select id="departmentId" class="form-control" @bind="currentReport.DepartmentId">
                                <option value="">اختر القسم</option>
                                @if (departments != null)
                                {
                                    @foreach (var dept in departments)
                                    {
                                        <option value="@dept.Id">@dept.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="generatedBy">تم إنشاؤه بواسطة</label>
                            <input type="text" id="generatedBy" class="form-control" @bind="currentReport.GeneratedBy" />
                        </div>
                        <div class="form-group">
                            <label for="status" class="required-field">الحالة *</label>
                            <select id="status" class="form-control" @bind="currentReport.Status" required>
                                <option value="Draft">مسودة</option>
                                <option value="Published">منشور</option>
                                <option value="Archived">مؤرشف</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group full-width">
                            <label for="description">الوصف</label>
                            <textarea id="description" class="form-control" @bind="currentReport.Description" rows="3"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseReportModal">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button class="btn btn-primary" @onclick="SaveReport" disabled="@isSubmitting">
                    <i class="fas @(isEditMode ? "fa-save" : "fa-plus")"></i> @(isEditMode ? "حفظ التغييرات" : "إضافة التقرير")
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string searchTerm = "";
    private string selectedReportType = "academic";
    private string selectedSemester = "2-1445";
    private string selectedCourse = "";
    private DateTime dateFrom = DateTime.Now.AddDays(-30);
    private DateTime dateTo = DateTime.Now;
    private bool isLoading = true;
    private bool hasData = false;
    private bool isSubmitting = false;
    private string successMessage = "";

    // متغيرات المودال
    private bool showReportModal = false;
    private bool isEditMode = false;
    private ReportDto currentReport = new ReportDto();

    // البيانات الديناميكية
    private ReportSummaryDto reportSummary = new();
    private List<CourseDto> courses = new();
    private List<DepartmentDto> departments = new();
    private List<CoursePerformanceDto> coursePerformance = new();
    private List<CourseDetailDto> courseDetails = new();
    private List<AttendanceReportDto> attendanceReports = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadInitialData();
        await GenerateReport();
    }

    private async Task LoadInitialData()
    {
        try
        {
            // تحميل المقررات
            // courses = await CourseService.GetAllCoursesAsync() ?? new List<CourseDto>();
            
            // تحميل الأقسام
            // departments = await DepartmentService.GetAllDepartmentsAsync() ?? new List<DepartmentDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading initial data: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء تحميل البيانات الأساسية", "خطأ");
        }
    }

    private async Task GenerateReport()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // تحميل ملخص التقرير
            reportSummary = await ReportService.GetReportSummaryAsync() ?? new ReportSummaryDto();

            // تحميل أداء المقررات
            coursePerformance = await ReportService.GetCoursePerformanceAsync() ?? new List<CoursePerformanceDto>();

            // تحميل تفاصيل المقررات
            courseDetails = await ReportService.GetCourseDetailsAsync() ?? new List<CourseDetailDto>();

            // تحميل تقارير الحضور
            attendanceReports = await ReportService.GetAttendanceReportsAsync() ?? new List<AttendanceReportDto>();

            hasData = true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating report: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء إنشاء التقرير", "خطأ");
            hasData = false;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SearchReports()
    {
        // تنفيذ البحث في التقارير
        await GenerateReport();
    }

    private void ResetFilters()
    {
        selectedReportType = "academic";
        selectedSemester = "2-1445";
        selectedCourse = "";
        dateFrom = DateTime.Now.AddDays(-30);
        dateTo = DateTime.Now;
        searchTerm = "";
    }

    private string GetSemesterText(string semester)
    {
        return semester switch
        {
            "2-1445" => "الفصل الدراسي الثاني 1445ه",
            "1-1445" => "الفصل الدراسي الأول 1445ه",
            "2-1444" => "الفصل الدراسي الثاني 1444ه",
            _ => "الفصل الدراسي الحالي"
        };
    }

    private string GetRandomColor()
    {
        var colors = new[] { "#4caf50", "#2196f3", "#ff9800", "#f44336", "#9c27b0", "#3f51b5" };
        var random = new Random();
        return colors[random.Next(colors.Length)];
    }

    private string GetRatingBadgeClass(double rating)
    {
        return rating switch
        {
            >= 4.0 => "badge-success",
            >= 3.0 => "badge-warning",
            _ => "badge-danger"
        };
    }

    // دوال تصدير التقارير
    private async Task ExportToPDF()
    {
        try
        {
            // هنا يجب استدعاء خدمة التصدير إلى PDF
            // var result = await ReportService.ExportToPDFAsync();
            // await JSRuntime.InvokeVoidAsync("downloadFile", "report.pdf", result);
            ToastService.ShowSuccess("تم تصدير التقرير إلى PDF بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to PDF: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء تصدير التقرير إلى PDF", "خطأ");
        }
    }

    private async Task ExportToExcel()
    {
        try
        {
            // هنا يجب استدعاء خدمة التصدير إلى Excel
            // var result = await ReportService.ExportToExcelAsync();
            // await JSRuntime.InvokeVoidAsync("downloadFile", "report.xlsx", result);
            ToastService.ShowSuccess("تم تصدير التقرير إلى Excel بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting to Excel: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء تصدير التقرير إلى Excel", "خطأ");
        }
    }

    private async Task ExportAttendanceToPDF()
    {
        try
        {
            // هنا يجب استدعاء خدمة التصدير إلى PDF لتقرير الحضور
            // var result = await ReportService.ExportAttendanceToPDFAsync();
            // await JSRuntime.InvokeVoidAsync("downloadFile", "attendance_report.pdf", result);
            ToastService.ShowSuccess("تم تصدير تقرير الحضور إلى PDF بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting attendance to PDF: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء تصدير تقرير الحضور إلى PDF", "خطأ");
        }
    }

    private async Task ExportAttendanceToExcel()
    {
        try
        {
            // هنا يجب استدعاء خدمة التصدير إلى Excel لتقرير الحضور
            // var result = await ReportService.ExportAttendanceToExcelAsync();
            // await JSRuntime.InvokeVoidAsync("downloadFile", "attendance_report.xlsx", result);
            ToastService.ShowSuccess("تم تصدير تقرير الحضور إلى Excel بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error exporting attendance to Excel: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء تصدير تقرير الحضور إلى Excel", "خطأ");
        }
    }

    // دوال المودال لإضافة وتعديل التقارير
    private void ShowAddReportModal()
    {
        isEditMode = false;
        currentReport = new ReportDto
            {
                ReportDate = DateTime.Now,
                Status = ReportStatus.Draft,
                Type = ReportType.Academic
            };
        showReportModal = true;
        successMessage = "";
    }

    private void ShowEditReportModal(CourseDetailDto detail)
    {
        isEditMode = true;
        currentReport = new ReportDto
            {
                Id = detail.Id,
                Title = $"تقرير {detail.CourseName}",
                Type = ReportType.Academic,
                ReportDate = DateTime.Now,
                Semester = selectedSemester,
                Status = ReportStatus.Published,
                Description = $"تقرير تفصيلي عن أداء مقرر {detail.CourseName}"
            };
        showReportModal = true;
        successMessage = "";
    }

    private void ShowEditAttendanceModal(AttendanceReportDto attendance)
    {
        isEditMode = true;
        currentReport = new ReportDto
            {
                Id = attendance.Id,
                Title = $"تقرير حضور {attendance.CourseName}",
                Type = ReportType.Attendance,
                ReportDate = DateTime.Now,
                Semester = selectedSemester,
                Status = ReportStatus.Published,
                Description = $"تقرير حضور وغياب لمقرر {attendance.CourseName}"
            };
        showReportModal = true;
        successMessage = "";
    }

    private void CloseReportModal()
    {
        showReportModal = false;
        currentReport = new ReportDto();
        successMessage = "";
    }

    private async Task SaveReport()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();

            if (isEditMode)
            {
                // تحديث التقرير
                await ReportService.UpdateReportAsync(currentReport.Id, currentReport);
                ToastService.ShowSuccess("تم تحديث التقرير بنجاح", "نجاح");
            }
            else
            {
                // إضافة تقرير جديد
                await ReportService.CreateReportAsync(currentReport);
                ToastService.ShowSuccess("تم إضافة التقرير بنجاح", "نجاح");
            }

            await GenerateReport(); // إعادة تحميل التقارير
            CloseReportModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving report: {ex.Message}");
            ToastService.ShowError($"حدث خطأ أثناء {(isEditMode ? "تحديث" : "إضافة")} التقرير", "خطأ");
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task DeleteReport(int id)
    {
        try
        {
            if (await ConfirmDelete("هل أنت متأكد من حذف هذا التقرير؟"))
            {
                await ReportService.DeleteReportAsync(id);
                ToastService.ShowSuccess("تم حذف التقرير بنجاح", "نجاح");
                await GenerateReport(); // إعادة تحميل التقارير
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting report: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء حذف التقرير", "خطأ");
        }
    }

    private async Task DeleteAttendanceReport(int id)
    {
        try
        {
            if (await ConfirmDelete("هل أنت متأكد من حذف تقرير الحضور هذا؟"))
            {
                await ReportService.DeleteReportAsync(id);
                ToastService.ShowSuccess("تم حذف تقرير الحضور بنجاح", "نجاح");
                await GenerateReport(); // إعادة تحميل التقارير
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting attendance report: {ex.Message}");
            ToastService.ShowError("حدث خطأ أثناء حذف تقرير الحضور", "خطأ");
        }
    }

    private async Task<bool> ConfirmDelete(string message)
    {
        // هنا يجب تنفيذ مودال التأكيد أو استخدام مكتبة تأكيد
        return true; // مؤقتاً نعيد true
    }
}