@page "/trailaccountmentbalance"


@attribute [Authorize(Roles = "Admin,Accountant")]
@inject ITrialBalanceService TrialBalanceService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<style>
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
        --trial-balance-color: #9c27b0;
        --debit-color: #2196F3;
        --credit-color: #F44336;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .search-box input {
        padding: 8px 15px;
        border: 1px solid #ddd;
        border-radius: 5px 0 0 5px;
        outline: none;
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-success {
        background: var(--success-color);
        color: white;
    }

    .btn-info {
        background: var(--info-color);
        color: white;
    }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon.accounts {
            background: rgba(156, 39, 176, 0.1);
        }

        .stat-icon.debit {
            background: rgba(33, 150, 243, 0.1);
        }

        .stat-icon.credit {
            background: rgba(244, 67, 54, 0.1);
        }

        .stat-icon.balance {
            background: rgba(76, 175, 80, 0.1);
        }

        .stat-icon.status {
            background: rgba(255, 152, 0, 0.1);
        }

        .stat-icon i {
            font-size: 24px;
        }

        .stat-icon.accounts i {
            color: #9c27b0;
        }

        .stat-icon.debit i {
            color: var(--debit-color);
        }

        .stat-icon.credit i {
            color: var(--credit-color);
        }

        .stat-icon.balance i {
            color: var(--success-color);
        }

        .stat-icon.status i {
            color: var(--warning-color);
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .amount-positive {
        color: var(--debit-color);
        font-weight: 600;
    }

    .amount-negative {
        color: var(--credit-color);
        font-weight: 600;
    }

    .balance-positive {
        color: var(--success-color);
        font-weight: 600;
    }

    .balance-negative {
        color: var(--error-color);
        font-weight: 600;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
        color:darkblue;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-error {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .filter-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-row {
        display: flex;
        gap: 15px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .filter-group input, .filter-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .filter-actions {
        display: flex;
        gap: 10px;
    }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    .export-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .total-row {
        font-weight: bold;
        background: #f0f0f0;
    }

    .balance-status {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .balance-balanced {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .balance-unbalanced {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }

        .export-buttons {
            flex-direction: column;
        }
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>


<div class="faculty-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> جاري توليد ميزان المراجعة...
            </div>
        }
        else if (hasError)
        {
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>خطأ!</strong>
                    <p>حدث خطأ أثناء توليد ميزان المراجعة. يرجى المحاولة مرة أخرى.</p>
                    <button class="btn btn-primary" @onclick="GenerateTrialBalance">إعادة المحاولة</button>
                </div>
            </div>
        }
        else
        {
            <!-- الشريط العلوي -->
            <div class="top-bar">
                <h2><i class="fas fa-balance-scale"></i> ميزان المراجعة</h2>
                <div class="user-profile">
                    <div class="user-info">
                        <h4>ميزان المراجعة المحاسبي</h4>
                        <p>لفترة من @trialBalance.FromDate.ToString("yyyy/MM/dd") إلى @trialBalance.ToDate.ToString("yyyy/MM/dd")</p>
                    </div>
                </div>
            </div>

            <!-- بطاقات الإحصائيات -->
            <div class="dashboard-cards">
                <div class="card stat-card">
                    <div class="stat-icon accounts">
                        <i class="fas fa-file-invoice"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@trialBalance.Accounts.Count</h4>
                        <p>إجمالي الحسابات</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon debit">
                        <i class="fas fa-arrow-down"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-positive">@trialBalance.TotalDebit.ToString("C")</h4>
                        <p>إجمالي المدين</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon credit">
                        <i class="fas fa-arrow-up"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-negative">@trialBalance.TotalCredit.ToString("C")</h4>
                        <p>إجمالي الدائن</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon balance">
                        <i class="fas fa-balance-scale"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="@(trialBalance.IsBalanced ? "balance-positive" : "balance-negative")">
                            @trialBalance.Difference.ToString("C")
                        </h4>
                        <p>فرق الميزان</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon status">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4>
                            <span class="badge @(trialBalance.IsBalanced ? "badge-success" : "badge-error")">
                                @(trialBalance.IsBalanced ? "متوازن" : "غير متوازن")
                            </span>
                        </h4>
                        <p>حالة الميزان</p>
                    </div>
                </div>
            </div>

            <!-- قسم الفلترة -->
            <div class="filter-section">
                <h3><i class="fas fa-filter"></i> توليد ميزان المراجعة</h3>
                <div class="filter-row">
                    <div class="filter-group">
                        <label for="fromDate">من تاريخ *</label>
                        <input type="date" id="fromDate" @bind="fromDate" required />
                    </div>
                    <div class="filter-group">
                        <label for="toDate">إلى تاريخ *</label>
                        <input type="date" id="toDate" @bind="toDate" required />
                    </div>
                    <div class="filter-actions">
                        <button class="btn btn-primary" @onclick="GenerateTrialBalance">
                            <i class="fas fa-sync"></i> توليد الميزان
                        </button>
                        <button class="btn btn-outline" @onclick="SetDefaultDates">
                            <i class="fas fa-calendar"></i> الفترات الافتراضية
                        </button>
                    </div>
                </div>

                @if (trialBalance.Accounts.Any())
                {
                    <div class="export-buttons">
                        <button class="btn btn-success" @onclick="ExportToExcel">
                            <i class="fas fa-file-excel"></i> تصدير إلى Excel
                        </button>
                        <button class="btn btn-info" @onclick="ExportToPdf">
                            <i class="fas fa-file-pdf"></i> تصدير إلى PDF
                        </button>
                        <button class="btn btn-outline" @onclick="PrintTrialBalance">
                            <i class="fas fa-print"></i> طباعة
                        </button>
                    </div>
                }
            </div>

            <!-- جدول ميزان المراجعة -->
            @if (trialBalance.Accounts.Any())
            {
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-table"></i> تفاصيل ميزان المراجعة</h3>
                        <div class="balance-status @(trialBalance.IsBalanced ? "balance-balanced" : "balance-unbalanced")">
                            <i class="fas @(trialBalance.IsBalanced ? "fa-check-circle" : "fa-exclamation-triangle")"></i>
                            @(trialBalance.IsBalanced ? "الميزان متوازن" : "الميزان غير متوازن")
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رمز الحساب</th>
                                    <th>اسم الحساب</th>
                                    <th>نوع الحساب</th>
                                    <th class="text-center">المدين</th>
                                    <th class="text-center">الدائن</th>
                                    <th class="text-center">الرصيد</th>
                                    <th class="text-center">نوع الرصيد</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var account in trialBalance.Accounts)
                                {
                                    <tr>
                                        <td><strong>@account.AccountCode</strong></td>
                                        <td>@account.AccountName</td>
                                        <td><span class="badge badge-info">@account.AccountType</span></td>
                                        <td class="text-center amount-positive">@account.DebitAmount.ToString("C")</td>
                                        <td class="text-center amount-negative">@account.CreditAmount.ToString("C")</td>
                                        <td class="text-center @(account.Balance >= 0 ? "balance-positive" : "balance-negative")">
                                            @Math.Abs(account.Balance).ToString("C")
                                        </td>
                                        <td class="text-center">
                                            <span class="badge @(account.Balance >= 0 ? "badge-success" : "badge-error")">
                                                @(account.Balance >= 0 ? "مدين" : "دائن")
                                            </span>
                                        </td>
                                    </tr>
                                }
                                <tr class="total-row">
                                    <td colspan="3"><strong>الإجمالي</strong></td>
                                    <td class="text-center amount-positive"><strong>@trialBalance.TotalDebit.ToString("C")</strong></td>
                                    <td class="text-center amount-negative"><strong>@trialBalance.TotalCredit.ToString("C")</strong></td>
                                    <td class="text-center @(trialBalance.Difference >= 0 ? "balance-positive" : "balance-negative")">
                                        <strong>@trialBalance.Difference.ToString("C")</strong>
                                    </td>
                                    <td class="text-center">
                                        <span class="badge @(trialBalance.IsBalanced ? "badge-success" : "badge-error")">
                                            @(trialBalance.IsBalanced ? "متوازن" : "غير متوازن")
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            }
            else if (!isLoading && !hasError)
            {
                <div class="card">
                    <div class="card-body text-center">
                        <i class="fas fa-info-circle fa-3x" style="color: #777;"></i>
                        <h4>لا توجد بيانات</h4>
                        <p>يرجى تحديد فترة زمنية لتوليد ميزان المراجعة</p>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private DateTime fromDate = DateTime.Now.AddMonths(-1);
    private DateTime toDate = DateTime.Now;

    private TrialBalanceDto trialBalance = new TrialBalanceDto();

    protected override async Task OnInitializedAsync()
    {
        await GenerateTrialBalance();
    }

    private async Task GenerateTrialBalance()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            trialBalance = await TrialBalanceService.GenerateTrialBalanceAsync(fromDate, toDate);

            ToastService.ShowSuccess("تم توليد ميزان المراجعة بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء توليد الميزان: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetDefaultDates()
    {
        // تعيين الفترات الافتراضية (مثلاً بداية ونهاية السنة الحالية)
        var now = DateTime.Now;
        fromDate = new DateTime(now.Year, 1, 1);
        toDate = new DateTime(now.Year, 12, 31);
    }

    private async Task ExportToExcel()
    {
        try
        {
            var excelData = await TrialBalanceService.ExportTrialBalanceToExcelAsync(fromDate, toDate);
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير الميزان إلى Excel بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfData = await TrialBalanceService.ExportTrialBalanceToPdfAsync(fromDate, toDate);
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير الميزان إلى PDF بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private void PrintTrialBalance()
    {
        // تنفيذ الطباعة
        ToastService.ShowInfo("جاري تحضير الطباعة...", "طباعة");
        // يمكنك إضافة كود الطباعة هنا
    }
}