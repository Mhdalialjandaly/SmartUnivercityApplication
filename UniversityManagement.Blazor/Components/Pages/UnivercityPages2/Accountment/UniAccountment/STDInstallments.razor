@page "/stnst"

@attribute [Authorize(Roles = "Admin,FinanceManager,Registrar")]
@inject IStudentInstallmentsService InstallmentsService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


<style>
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
        --installment-color: #9c27b0;
        --paid-color: #4CAF50;
        --pending-color: #FF9800;
        --overdue-color: #F44336;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-success {
        background: var(--success-color);
        color: white;
    }

    .btn-info {
        background: var(--info-color);
        color: white;
    }

    .btn-warning {
        background: var(--warning-color);
        color: white;
    }

    .btn-danger {
        background: var(--error-color);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon.students {
            background: rgba(156, 39, 176, 0.1);
        }

        .stat-icon.installments {
            background: rgba(76, 175, 80, 0.1);
        }

        .stat-icon.pending {
            background: rgba(255, 152, 0, 0.1);
        }

        .stat-icon.overdue {
            background: rgba(244, 67, 54, 0.1);
        }

        .stat-icon.collected {
            background: rgba(33, 150, 243, 0.1);
        }

        .stat-icon.outstanding {
            background: rgba(158, 158, 158, 0.1);
        }

        .stat-icon i {
            font-size: 24px;
        }

        .stat-icon.students i {
            color: var(--installment-color);
        }

        .stat-icon.installments i {
            color: var(--paid-color);
        }

        .stat-icon.pending i {
            color: var(--pending-color);
        }

        .stat-icon.overdue i {
            color: var(--overdue-color);
        }

        .stat-icon.collected i {
            color: var(--info-color);
        }

        .stat-icon.outstanding i {
            color: #9e9e9e;
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .amount-total {
        color: var(--info-color);
        font-weight: 600;
    }

    .amount-paid {
        color: var(--success-color);
        font-weight: 600;
    }

    .amount-outstanding {
        color: var(--error-color);
        font-weight: 600;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-error {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .badge-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .badge-secondary {
        background: rgba(158, 158, 158, 0.1);
        color: #9e9e9e;
    }

    .filter-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-row {
        display: flex;
        gap: 15px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .filter-group input, .filter-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .filter-actions {
        display: flex;
        gap: 10px;
    }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    .export-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        flex-wrap: wrap;
    }

    .total-row {
        font-weight: bold;
        background: #f0f0f0;
    }

    .section-title {
        background: #f3e5f5;
        padding: 10px 15px;
        border-radius: 5px;
        margin: 15px 0;
        font-weight: 600;
        color: #6a1b9a;
    }

    .installment-form {
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

    .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .form-col {
        flex: 1;
        min-width: 250px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .status-paid {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .status-pending {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .status-overdue {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .overdue-highlight {
        color: var(--error-color);
        font-weight: 600;
    }

    .upcoming-highlight {
        color: var(--warning-color);
        font-weight: 600;
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }

        .export-buttons {
            flex-direction: column;
        }

        .form-row {
            flex-direction: column;
        }
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #777;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .tabs {
        display: flex;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .tab {
        padding: 10px 20px;
        cursor: pointer;
        border-bottom: 3px solid transparent;
    }

        .tab.active {
            border-bottom: 3px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 600;
        }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .installment-breakdown {
        background: #e1f5fe;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .installment-item {
        text-align: center;
    }

        .installment-item .amount {
            font-size: 18px;
            font-weight: 600;
            margin: 5px 0;
        }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<div class="faculty-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> جاري تحميل بيانات أقساط الطلبة...
            </div>
        }
        else if (hasError)
        {
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>خطأ!</strong>
                    <p>حدث خطأ أثناء تحميل بيانات أقساط الطلبة. يرجى المحاولة مرة أخرى.</p>
                    <button class="btn btn-primary" @onclick="LoadInstallmentData">إعادة المحاولة</button>
                </div>
            </div>
        }
        else
        {
            <!-- الشريط العلوي -->
            <div class="top-bar">
                <h2><i class="fas fa-graduation-cap"></i> أقساط الطلبة</h2>
                <div class="user-profile">
                    <div class="user-info">
                        <h4>إدارة أقساط الطلبة</h4>
                        <p>آخر تحديث: @DateTime.Now.ToString("yyyy/MM/dd HH:mm")</p>
                    </div>
                </div>
            </div>

            <!-- بطاقات الإحصائيات -->
            <div class="dashboard-cards">
                <div class="card stat-card">
                    <div class="stat-icon students">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@stats.TotalStudents</h4>
                        <p>إجمالي الطلبة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon installments">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-paid">@stats.PaidInstallments</h4>
                        <p>الأقساط المدفوعة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon pending">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-paid">@stats.PendingInstallments</h4>
                        <p>الأقساط المعلقة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon overdue">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="overdue-highlight">@stats.OverdueInstallments</h4>
                        <p>الأقساط المتأخرة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon collected">
                        <i class="fas fa-money-bill-wave"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-paid">@stats.CollectedAmount.ToString("C")</h4>
                        <p>المجموع المدفوع</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon outstanding">
                        <i class="fas fa-minus-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-outstanding">@stats.OutstandingAmount.ToString("C")</h4>
                        <p>المستحقات المتبقية</p>
                    </div>
                </div>
            </div>

            <!-- قسم الفلترة -->
            <div class="filter-section">
                <h3><i class="fas fa-filter"></i> تصفية أقساط الطلبة</h3>
                <div class="filter-row">
                    <div class="filter-group">
                        <label for="searchTerm">البحث</label>
                        <input type="text" id="searchTerm" @bind="searchTerm" placeholder="البحث باسم الطالب أو الرقم..." />
                    </div>
                    <div class="filter-group">
                        <label for="programFilter">البرنامج</label>
                        <select id="programFilter" @bind="programFilter">
                            <option value="">جميع البرامج</option>
                            <option value="بكالوريوس علوم حاسوب">بكالوريوس علوم حاسوب</option>
                            <option value="بكالوريوس إدارة أعمال">بكالوريوس إدارة أعمال</option>
                            <option value="ماجستير علوم حاسوب">ماجستير علوم حاسوب</option>
                            <option value="ماجستير إدارة أعمال">ماجستير إدارة أعمال</option>
                            <option value="دكتوراه علوم حاسوب">دكتوراه علوم حاسوب</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="statusFilter">الحالة</label>
                        <select id="statusFilter" @bind="statusFilter">
                            <option value="">جميع الحالات</option>
                            <option value="Paid">مدفوع</option>
                            <option value="Pending">معلق</option>
                            <option value="Partial">جزئي</option>
                            <option value="Overdue">متأخر</option>
                        </select>
                    </div>
                    <div class="filter-actions">
                        <button class="btn btn-primary" @onclick="FilterInstallments">
                            <i class="fas fa-search"></i> بحث
                        </button>
                        <button class="btn btn-outline" @onclick="ClearFilters">
                            <i class="fas fa-times"></i> مسح
                        </button>
                    </div>
                </div>

                <div class="export-buttons">
                    <button class="btn btn-success" @onclick="()=>ShowInstallmentModal()">
                        <i class="fas fa-plus"></i> إضافة قسط جديد
                    </button>
                    <button class="btn btn-info" @onclick="ShowGenerateInstallmentsModal">
                        <i class="fas fa-sync"></i> توليد الأقساط التلقائية
                    </button>
                    <button class="btn btn-warning" @onclick="ExportToExcel">
                        <i class="fas fa-file-excel"></i> تصدير إلى Excel
                    </button>
                    <button class="btn btn-danger" @onclick="ExportToPdf">
                        <i class="fas fa-file-pdf"></i> تصدير إلى PDF
                    </button>
                    <button class="btn btn-outline" @onclick="PrintInstallments">
                        <i class="fas fa-print"></i> طباعة
                    </button>
                </div>
            </div>

            <!-- علامات التبويب -->
            <div class="tabs">
                <div class="tab @(activeTab == "installments" ? "active" : "")" @onclick="()=> SwitchTab(InstallmentsString)">
                    <i class="fas fa-list"></i> قائمة الأقساط
                </div>
                <div class="tab @(activeTab == "overdue" ? "active" : "")" @onclick="()=> SwitchTab(OverdueString)">
                    <i class="fas fa-exclamation-triangle"></i> الأقساط المتأخرة
                </div>
                <div class="tab @(activeTab == "upcoming" ? "active" : "")" @onclick="()=> SwitchTab(UpcomingString)">
                    <i class="fas fa-calendar-check"></i> الأقساط القادمة
                </div>
                <div class="tab @(activeTab == "payments" ? "active" : "")" @onclick="()=> SwitchTab(PaymentsString)">
                    <i class="fas fa-money-check"></i> مدفوعات الأقساط
                </div>
            </div>

            <!-- قائمة الأقساط -->
            <div class="tab-content @(activeTab == "installments" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-graduation-cap"></i> جميع أقساط الطلبة</h3>
                        <span class="badge badge-info">@filteredInstallments.Count قسط</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الطالب</th>
                                    <th>اسم الطالب</th>
                                    <th>البرنامج</th>
                                    <th>السنة الأكاديمية</th>
                                    <th class="text-center">المبلغ الإجمالي</th>
                                    <th class="text-center">المدفوع</th>
                                    <th class="text-center">المستحق</th>
                                    <th>تاريخ الاستحقاق</th>
                                    <th class="text-center">الحالة</th>
                                    <th class="text-center">آخر دفع</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var installment in filteredInstallments)
                                {
                                    <tr class="@(installment.IsOverdue ? "overdue-highlight" : "")">
                                        <td><strong>@installment.StudentId</strong></td>
                                        <td>@installment.StudentName</td>
                                        <td>@installment.Program</td>
                                        <td>@installment.AcademicYear</td>
                                        <td class="text-center amount-total">@installment.Amount.ToString("C")</td>
                                        <td class="text-center amount-paid">@installment.PaidAmount.ToString("C")</td>
                                        <td class="text-center amount-outstanding">@installment.OutstandingAmount.ToString("C")</td>
                                        <td>@installment.DueDate.ToString("yyyy/MM/dd")</td>
                                        <td class="text-center">
                                            <span class="badge @(GetStatusBadgeClass(installment.Status, installment.IsOverdue))">
                                                @GetStatusText(installment.Status, installment.IsOverdue)
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            @if (installment.LastPaymentDate.HasValue)
                                            {
                                                @installment.LastPaymentDate.Value.ToString("yyyy/MM/dd")
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowInstallmentModal(installment)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-info" @onclick="()=> ShowPaymentModal(installment)" title="الدفع">
                                                <i class="fas fa-money-bill"></i>
                                            </button>
                                            <button class="btn btn-sm btn-warning" @onclick="()=> ShowHistoryModal(installment)" title="السجل">
                                                <i class="fas fa-history"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="()=> DeleteInstallment(installment.Id)" title="حذف">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                                @if (filteredInstallments.Any())
                                {
                                    <tr class="total-row">
                                        <td colspan="4"><strong>الإجمالي</strong></td>
                                        <td class="text-center amount-total">
                                            <strong>@filteredInstallments.Sum(i => i.Amount).ToString("C")</strong>
                                        </td>
                                        <td class="text-center amount-paid">
                                            <strong>@filteredInstallments.Sum(i => i.PaidAmount).ToString("C")</strong>
                                        </td>
                                        <td class="text-center amount-outstanding">
                                            <strong>@filteredInstallments.Sum(i => i.OutstandingAmount).ToString("C")</strong>
                                        </td>
                                        <td colspan="4"></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- الأقساط المتأخرة -->
            <div class="tab-content @(activeTab == "overdue" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-exclamation-triangle"></i> الأقساط المتأخرة</h3>
                        <span class="badge badge-error">@overdueInstallments.Count قسط</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الطالب</th>
                                    <th>اسم الطالب</th>
                                    <th>البرنامج</th>
                                    <th class="text-center">المبلغ</th>
                                    <th>تاريخ الاستحقاق</th>
                                    <th>أيام التأخير</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var installment in overdueInstallments)
                                {
                                    <tr>
                                        <td><strong>@installment.StudentId</strong></td>
                                        <td>@installment.StudentName</td>
                                        <td>@installment.Program</td>
                                        <td class="text-center amount-outstanding">@installment.OutstandingAmount.ToString("C")</td>
                                        <td>@installment.DueDate.ToString("yyyy/MM/dd")</td>
                                        <td class="overdue-highlight">@installment.DaysOverdue يوم</td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-success" @onclick="()=> ShowPaymentModal(installment)" title="دفع">
                                                <i class="fas fa-money-bill"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowInstallmentModal(installment)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- الأقساط القادمة -->
            <div class="tab-content @(activeTab == "upcoming" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-calendar-check"></i> الأقساط القادمة</h3>
                        <span class="badge badge-warning">@upcomingInstallments.Count قسط</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الطالب</th>
                                    <th>اسم الطالب</th>
                                    <th>البرنامج</th>
                                    <th class="text-center">المبلغ</th>
                                    <th>تاريخ الاستحقاق</th>
                                    <th>الأيام المتبقية</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var installment in upcomingInstallments)
                                {
                                    <tr>
                                        <td><strong>@installment.StudentId</strong></td>
                                        <td>@installment.StudentName</td>
                                        <td>@installment.Program</td>
                                        <td class="text-center amount-total">@installment.Amount.ToString("C")</td>
                                        <td>@installment.DueDate.ToString("yyyy/MM/dd")</td>
                                        <td class="upcoming-highlight">@((installment.DueDate - DateTime.Now).Days) يوم</td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowInstallmentModal(installment)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- مدفوعات الأقساط -->
            <div class="tab-content @(activeTab == "payments" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-money-check"></i> أحدث مدفوعات الأقساط</h3>
                        <span class="badge badge-info">@recentPayments.Count دفعة</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الطالب</th>
                                    <th>اسم الطالب</th>
                                    <th>البرنامج</th>
                                    <th class="text-center">المبلغ</th>
                                    <th>تاريخ الدفع</th>
                                    <th>طريقة الدفع</th>
                                    <th>رقم الإيصال</th>
                                    <th class="text-center">الحالة</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var payment in recentPayments)
                                {
                                    <tr>
                                        <td>@payment.StudentInstallmentId</td>
                                        <td>@payment.StudentName</td>
                                        <td>@GetStudentProgram(payment.StudentInstallmentId)</td>
                                        <td class="text-center amount-paid">@payment.Amount.ToString("C")</td>
                                        <td>@payment.PaymentDate.ToString("yyyy/MM/dd")</td>
                                        <td>@payment.PaymentMethod</td>
                                        <td>@payment.ReceiptNumber</td>
                                        <td class="text-center">
                                            <span class="badge @(GetPaymentStatusBadgeClass(payment.Status))">
                                                @GetPaymentStatusText(payment.Status)
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal إضافة/تعديل قسط -->
@if (showInstallmentModal)
{
    <div class="modal-overlay" @onclick="CloseInstallmentModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@(isEditMode ? "تعديل قسط الطالب" : "إضافة قسط جديد")</h3>
                <button class="modal-close" @onclick="CloseInstallmentModal">&times;</button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveInstallment">
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="studentId">رقم الطالب *</label>
                                <input type="text" id="studentId" @bind="currentInstallment.StudentId" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="studentName">اسم الطالب *</label>
                                <input type="text" id="studentName" @bind="currentInstallment.StudentName" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="program">البرنامج *</label>
                                <select id="program" @bind="currentInstallment.Program" required>
                                    <option value="">اختر البرنامج</option>
                                    <option value="بكالوريوس علوم حاسوب">بكالوريوس علوم حاسوب</option>
                                    <option value="بكالوريوس إدارة أعمال">بكالوريوس إدارة أعمال</option>
                                    <option value="ماجستير علوم حاسوب">ماجستير علوم حاسوب</option>
                                    <option value="ماجستير إدارة أعمال">ماجستير إدارة أعمال</option>
                                    <option value="دكتوراه علوم حاسوب">دكتوراه علوم حاسوب</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="academicYear">السنة الأكاديمية *</label>
                                <input type="text" id="academicYear" @bind="currentInstallment.AcademicYear" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="amount">المبلغ *</label>
                                <input type="number" id="amount" @bind="currentInstallment.Amount" step="0.01" min="0" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="dueDate">تاريخ الاستحقاق *</label>
                                <input type="date" id="dueDate" @bind="currentInstallment.DueDate" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="status">الحالة *</label>
                                <select id="status" @bind="currentInstallment.Status" required>
                                    <option value="Pending">معلق</option>
                                    <option value="Paid">مدفوع</option>
                                    <option value="Partial">جزئي</option>
                                    <option value="Overdue">متأخر</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="outstandingAmount">المستحق</label>
                                <input type="number" id="outstandingAmount" @bind="currentInstallment.OutstandingAmount" step="0.01" min="0" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="notes">ملاحظات</label>
                        <textarea id="notes" @bind="currentInstallment.Notes" rows="2"></textarea>
                    </div>

                    <div class="installment-breakdown">
                        <div class="installment-item">
                            <div>المبلغ الإجمالي</div>
                            <div class="amount amount-total">@currentInstallment.Amount.ToString("C")</div>
                        </div>
                        <div class="installment-item">
                            <div>المدفوع</div>
                            <div class="amount amount-paid">@currentInstallment.PaidAmount.ToString("C")</div>
                        </div>
                        <div class="installment-item">
                            <div>المستحق</div>
                            <div class="amount amount-outstanding">@currentInstallment.OutstandingAmount.ToString("C")</div>
                        </div>
                        <div class="installment-item">
                            <div>نسبة الدفع</div>
                            <div class="amount amount-paid">@currentInstallment.PaymentPercentage.ToString("F1")%</div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseInstallmentModal">إلغاء</button>
                <button class="btn btn-primary" @onclick="SaveInstallment" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span><span class="loading-spinner"></span> جاري الحفظ...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "حفظ التغييرات" : "حفظ القسط")</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal دفع القسط -->
@if (showPaymentModal)
{
    <div class="modal-overlay" @onclick="ClosePaymentModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>دفع قسط: @selectedInstallment?.StudentName</h3>
                <button class="modal-close" @onclick="ClosePaymentModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="section-title">إضافة دفعة جديدة</div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentAmount">المبلغ *</label>
                            <input type="number" id="paymentAmount" @bind="newPayment.Amount" step="0.01" min="0" max="@selectedInstallment?.OutstandingAmount" required />
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentMethod">طريقة الدفع *</label>
                            <select id="paymentMethod" @bind="newPayment.PaymentMethod" required>
                                <option value="نقداً">نقداً</option>
                                <option value="تحويل بنكي">تحويل بنكي</option>
                                <option value="شيك">شيك</option>
                                <option value="بطاقة ائتمان">بطاقة ائتمان</option>
                                <option value="حوالة">حوالة</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentDate">تاريخ الدفع *</label>
                            <input type="date" id="paymentDate" @bind="newPayment.PaymentDate" required />
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="receiptNumber">رقم الإيصال</label>
                            <input type="text" id="receiptNumber" @bind="newPayment.ReceiptNumber" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="paymentNotes">ملاحظات</label>
                    <textarea id="paymentNotes" @bind="newPayment.Notes" rows="2"></textarea>
                </div>
                <button class="btn btn-success" @onclick="AddPayment">
                    <i class="fas fa-plus"></i> إضافة دفعة
                </button>

                <div class="section-title" style="margin-top: 20px;">سجل الدفعات</div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>التاريخ</th>
                                <th class="text-center">المبلغ</th>
                                <th>طريقة الدفع</th>
                                <th>رقم الإيصال</th>
                                <th class="text-center">الحالة</th>
                                <th>ملاحظات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in installmentPayments)
                            {
                                <tr>
                                    <td>@payment.PaymentDate.ToString("yyyy/MM/dd")</td>
                                    <td class="text-center amount-paid">@payment.Amount.ToString("C")</td>
                                    <td>@payment.PaymentMethod</td>
                                    <td>@payment.ReceiptNumber</td>
                                    <td class="text-center">
                                        <span class="badge @(GetPaymentStatusBadgeClass(payment.Status))">
                                            @GetPaymentStatusText(payment.Status)
                                        </span>
                                    </td>
                                    <td>@payment.Notes</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="ClosePaymentModal">إغلاق</button>
            </div>
        </div>
    </div>
}

<!-- Modal السجل -->
@if (showHistoryModal)
{
    <div class="modal-overlay" @onclick="CloseHistoryModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>سجل أقساط: @selectedInstallment?.StudentName</h3>
                <button class="modal-close" @onclick="CloseHistoryModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>التاريخ</th>
                                <th>البرنامج</th>
                                <th class="text-center">المبلغ</th>
                                <th class="text-center">المدفوع</th>
                                <th class="text-center">المستحق</th>
                                <th>تاريخ الاستحقاق</th>
                                <th class="text-center">الحالة</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var history in installmentHistory)
                            {
                                <tr>
                                    <td>@history.CreatedAt.ToString("yyyy/MM/dd")</td>
                                    <td>@history.Program</td>
                                    <td class="text-center amount-total">@history.Amount.ToString("C")</td>
                                    <td class="text-center amount-paid">@history.PaidAmount.ToString("C")</td>
                                    <td class="text-center amount-outstanding">@history.OutstandingAmount.ToString("C")</td>
                                    <td>@history.DueDate.ToString("yyyy/MM/dd")</td>
                                    <td class="text-center">
                                        <span class="badge @(GetStatusBadgeClass(history.Status, history.DueDate < DateTime.Now && history.Status != PaymentStatus.Paid))">
                                            @GetStatusText(history.Status, history.DueDate < DateTime.Now && history.Status != PaymentStatus.Paid)
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseHistoryModal">إغلاق</button>
            </div>
        </div>
    </div>
}

<!-- Modal توليد الأقساط التلقائية -->
@if (showGenerateInstallmentsModal)
{
    <div class="modal-overlay" @onclick="CloseGenerateInstallmentsModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>توليد الأقساط التلقائية</h3>
                <button class="modal-close" @onclick="CloseGenerateInstallmentsModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    سيتم توليد أقساط جديدة لجميع الطلبة بناءً على خطة الدفع المحددة
                </div>

                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="generateProgram">البرنامج</label>
                            <select id="generateProgram" @bind="generateProgram">
                                <option value="">جميع البرامج</option>
                                <option value="بكالوريوس علوم حاسوب">بكالوريوس علوم حاسوب</option>
                                <option value="بكالوريوس إدارة أعمال">بكالوريوس إدارة أعمال</option>
                                <option value="ماجستير علوم حاسوب">ماجستير علوم حاسوب</option>
                                <option value="ماجستير إدارة أعمال">ماجستير إدارة أعمال</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="generateAcademicYear">السنة الأكاديمية</label>
                            <input type="text" id="generateAcademicYear" @bind="generateAcademicYear" />
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="generateAmount">المبلغ الافتراضي</label>
                            <input type="number" id="generateAmount" @bind="generateAmount" step="0.01" min="0" />
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="generateDueDate">تاريخ الاستحقاق الافتراضي</label>
                            <input type="date" id="generateDueDate" @bind="generateDueDate" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseGenerateInstallmentsModal">إلغاء</button>
                <button class="btn btn-success" @onclick="GenerateInstallments" disabled="@isGenerating">
                    @if (isGenerating)
                    {
                        <span><span class="loading-spinner"></span> جاري التوليد...</span>
                    }
                    else
                    {
                        <span><i class="fas fa-sync"></i> توليد الأقساط</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private bool showInstallmentModal = false;
    private bool showPaymentModal = false;
    private bool showHistoryModal = false;
    private bool showGenerateInstallmentsModal = false;
    private bool isSaving = false;
    private bool isGenerating = false;
    private bool isEditMode = false;
    private string activeTab = "installments";
    private string InstallmentsString = "installments";
    private string OverdueString = "overdue";
    private string UpcomingString = "upcoming";
    private string PaymentsString = "payments";

    private StudentInstallmentStatsDto stats = new StudentInstallmentStatsDto();
    private List<StudentInstallmentDto> allInstallments = new List<StudentInstallmentDto>();
    private List<StudentInstallmentDto> filteredInstallments = new List<StudentInstallmentDto>();
    private List<StudentInstallmentDto> overdueInstallments = new List<StudentInstallmentDto>();
    private List<StudentInstallmentDto> upcomingInstallments = new List<StudentInstallmentDto>();
    private List<InstallmentPaymentDto> recentPayments = new List<InstallmentPaymentDto>();
    private List<InstallmentPaymentDto> installmentPayments = new List<InstallmentPaymentDto>();
    private List<InstallmentHistoryDto> installmentHistory = new List<InstallmentHistoryDto>();

    private StudentInstallmentDto currentInstallment = new StudentInstallmentDto();
    private StudentInstallmentDto selectedInstallment = new StudentInstallmentDto();
    private InstallmentPaymentDto newPayment = new InstallmentPaymentDto();
    private string generateProgram = "";
    private string generateAcademicYear = DateTime.Now.Year.ToString();
    private decimal generateAmount = 0;
    private DateTime generateDueDate = DateTime.Now.AddMonths(1);

    // فلاتر
    private string searchTerm = "";
    private string programFilter = "";
    private string statusFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadInstallmentData();
    }

    private async Task LoadInstallmentData()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            stats = await InstallmentsService.GetInstallmentStatsAsync();
            allInstallments = await InstallmentsService.GetAllStudentInstallmentsAsync();
            filteredInstallments = allInstallments;
            overdueInstallments = await InstallmentsService.GetOverdueInstallmentsAsync();
            upcomingInstallments = await InstallmentsService.GetUpcomingInstallmentsAsync();

            // تحميل أحدث المدفوعات
            recentPayments = new List<InstallmentPaymentDto>(); // سيتم تحميلها حسب الحاجة

            ToastService.ShowSuccess("تم تحميل بيانات أقساط الطلبة بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء تحميل البيانات: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterInstallments()
    {
        try
        {
            PaymentStatus? status = null;
            if (!string.IsNullOrEmpty(statusFilter))
            {
                status = statusFilter switch
                {
                    "Paid" => PaymentStatus.Paid,
                    "Pending" => PaymentStatus.Pending,
                    "Partial" => PaymentStatus.Partial,
                    "Overdue" => PaymentStatus.Overdue,
                    _ => null
                };
            }

            var result = await InstallmentsService.GetStudentInstallmentsAsync(1, 1000, searchTerm, programFilter, status);
            filteredInstallments = result.Data.ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصفية: {ex.Message}", "خطأ");
        }
    }

    private void ClearFilters()
    {
        searchTerm = "";
        programFilter = "";
        statusFilter = "";
        filteredInstallments = allInstallments;
    }

    private void SwitchTab(string tab)
    {
        activeTab = tab;
    }

    private void ShowInstallmentModal(StudentInstallmentDto installment = null)
    {
        isEditMode = installment != null;

        if (isEditMode)
        {
            currentInstallment = new StudentInstallmentDto
                {
                    Id = installment.Id,
                    StudentId = installment.StudentId,
                    StudentName = installment.StudentName,
                    Program = installment.Program,
                    AcademicYear = installment.AcademicYear,
                    Amount = installment.Amount,
                    OutstandingAmount = installment.OutstandingAmount,
                    DueDate = installment.DueDate,
                    LastPaymentDate = installment.LastPaymentDate,
                    Status = installment.Status,
                    Notes = installment.Notes
                };
        }
        else
        {
            currentInstallment = new StudentInstallmentDto
                {
                    Amount = 0,
                    OutstandingAmount = 0,
                    DueDate = DateTime.Now.AddMonths(1),
                    Status = PaymentStatus.Pending,
                    AcademicYear = DateTime.Now.Year.ToString()
                };
        }

        showInstallmentModal = true;
    }

    private void CloseInstallmentModal()
    {
        showInstallmentModal = false;
        isSaving = false;
        isEditMode = false;
    }

    private async Task SaveInstallment()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            if (isEditMode)
            {
                await InstallmentsService.UpdateStudentInstallmentAsync(currentInstallment.Id, currentInstallment);
                ToastService.ShowSuccess("تم تحديث قسط الطالب بنجاح", "نجاح");
            }
            else
            {
                await InstallmentsService.AddStudentInstallmentAsync(currentInstallment);
                ToastService.ShowSuccess("تم إضافة قسط الطالب بنجاح", "نجاح");
            }

            CloseInstallmentModal();
            await LoadInstallmentData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحفظ: {ex.Message}", "خطأ");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowPaymentModal(StudentInstallmentDto installment)
    {
        selectedInstallment = installment;
        newPayment = new InstallmentPaymentDto
            {
                StudentInstallmentId = installment.Id,
                StudentName = installment.StudentName,
                Amount = installment.OutstandingAmount > 0 ? installment.OutstandingAmount : installment.Amount,
                PaymentDate = DateTime.Now,
                PaymentMethod = "نقداً",
                Status = PaymentStatus.Paid
            };
        showPaymentModal = true;
    }

    private void ClosePaymentModal()
    {
        showPaymentModal = false;
        selectedInstallment = new StudentInstallmentDto();
        newPayment = new InstallmentPaymentDto();
        installmentPayments.Clear();
    }

    private async Task AddPayment()
    {
        try
        {
            await InstallmentsService.AddInstallmentPaymentAsync(newPayment);
            ToastService.ShowSuccess("تمت إضافة الدفعة بنجاح", "نجاح");

            // إعادة تحميل سجل الدفعات
            installmentPayments = await InstallmentsService.GetInstallmentPaymentsAsync(selectedInstallment.Id);

            // إعادة تحميل البيانات
            await LoadInstallmentData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء إضافة الدفعة: {ex.Message}", "خطأ");
        }
    }

    private void ShowHistoryModal(StudentInstallmentDto installment)
    {
        selectedInstallment = installment;
        showHistoryModal = true;
    }

    private void CloseHistoryModal()
    {
        showHistoryModal = false;
        selectedInstallment = new StudentInstallmentDto();
        installmentHistory.Clear();
    }

    private void ShowGenerateInstallmentsModal()
    {
        generateProgram = "";
        generateAcademicYear = DateTime.Now.Year.ToString();
        generateAmount = 0;
        generateDueDate = DateTime.Now.AddMonths(1);
        showGenerateInstallmentsModal = true;
    }

    private void CloseGenerateInstallmentsModal()
    {
        showGenerateInstallmentsModal = false;
        isGenerating = false;
    }

    private async Task GenerateInstallments()
    {
        if (isGenerating) return;

        try
        {
            isGenerating = true;
            StateHasChanged();

            // هنا سيتم تنفيذ توليد الأقساط التلقائية
            ToastService.ShowSuccess("تم توليد الأقساط التلقائية بنجاح", "نجاح");

            CloseGenerateInstallmentsModal();
            await LoadInstallmentData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء توليد الأقساط: {ex.Message}", "خطأ");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task DeleteInstallment(int installmentId)
    {
        try
        {
            if (await ConfirmDelete())
            {
                await InstallmentsService.DeleteStudentInstallmentAsync(installmentId);
                ToastService.ShowSuccess("تم حذف قسط الطالب بنجاح", "نجاح");
                await LoadInstallmentData();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحذف: {ex.Message}", "خطأ");
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // هنا يمكنك إضافة مودال تأكيد الحذف
        return true; // مؤقتاً
    }

    private async Task ExportToExcel()
    {
        try
        {
            var excelData = await InstallmentsService.ExportInstallmentsToExcelAsync(DateTime.Now.AddMonths(-6), DateTime.Now);
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير الأقساط إلى Excel بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfData = await InstallmentsService.ExportInstallmentsToPdfAsync(DateTime.Now.AddMonths(-6), DateTime.Now);
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير الأقساط إلى PDF بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private void PrintInstallments()
    {
        // تنفيذ الطباعة
        ToastService.ShowInfo("جاري تحضير الطباعة...", "طباعة");
        // يمكنك إضافة كود الطباعة هنا
    }

    private string GetStatusBadgeClass(PaymentStatus status, bool isOverdue)
    {
        if (isOverdue) return "badge-error";

        return status switch
        {
            PaymentStatus.Paid => "badge-success",
            PaymentStatus.Pending => "badge-warning",
            PaymentStatus.Partial => "badge-info",
            PaymentStatus.Overdue => "badge-error",
            _ => "badge-info"
        };
    }

    private string GetStatusText(PaymentStatus status, bool isOverdue)
    {
        if (isOverdue) return "متأخر";

        return status switch
        {
            PaymentStatus.Paid => "مدفوع",
            PaymentStatus.Pending => "معلق",
            PaymentStatus.Partial => "جزئي",
            PaymentStatus.Overdue => "متأخر",
            _ => "غير محدد"
        };
    }

    private string GetPaymentStatusBadgeClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "badge-success",
            PaymentStatus.Pending => "badge-warning",
            PaymentStatus.Partial => "badge-info",
            PaymentStatus.Overdue => "badge-error",
            PaymentStatus.Failed => "badge-secondary",
            _ => "badge-info"
        };
    }

    private string GetPaymentStatusText(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "مدفوع",
            PaymentStatus.Pending => "معلق",
            PaymentStatus.Partial => "جزئي",
            PaymentStatus.Overdue => "متأخر",
            PaymentStatus.Failed => "فشل",
            _ => "غير محدد"
        };
    }

    private string GetStudentProgram(int installmentId)
    {
        var installment = allInstallments.FirstOrDefault(i => i.Id == installmentId);
        return installment?.Program ?? "غير محدد";
    }
}