@page "/inventory"
@attribute [Authorize(Roles = "Admin,WarehouseManager,StoreKeeper")]
@inject IInventoryService InventoryService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<style>
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
        --inventory-color: #795548;
        --instock-color: #4CAF50;
        --lowstock-color: #FF9800;
        --outofstock-color: #F44336;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-success {
        background: var(--success-color);
        color: white;
    }

    .btn-info {
        background: var(--info-color);
        color: white;
    }

    .btn-warning {
        background: var(--warning-color);
        color: white;
    }

    .btn-danger {
        background: var(--error-color);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon.total {
            background: rgba(121, 85, 72, 0.1);
        }

        .stat-icon.instock {
            background: rgba(76, 175, 80, 0.1);
        }

        .stat-icon.lowstock {
            background: rgba(255, 152, 0, 0.1);
        }

        .stat-icon.outofstock {
            background: rgba(244, 67, 54, 0.1);
        }

        .stat-icon.value {
            background: rgba(33, 150, 243, 0.1);
        }

        .stat-icon.movement {
            background: rgba(156, 39, 176, 0.1);
        }

        .stat-icon i {
            font-size: 24px;
        }

        .stat-icon.total i {
            color: var(--inventory-color);
        }

        .stat-icon.instock i {
            color: var(--instock-color);
        }

        .stat-icon.lowstock i {
            color: var(--lowstock-color);
        }

        .stat-icon.outofstock i {
            color: var(--outofstock-color);
        }

        .stat-icon.value i {
            color: var(--info-color);
        }

        .stat-icon.movement i {
            color: #9c27b0;
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .quantity-high {
        color: var(--instock-color);
        font-weight: 600;
    }

    .quantity-low {
        color: var(--lowstock-color);
        font-weight: 600;
    }

    .quantity-zero {
        color: var(--outofstock-color);
        font-weight: 600;
    }

    .value-amount {
        color: var(--info-color);
        font-weight: 600;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-error {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .badge-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .filter-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-row {
        display: flex;
        gap: 15px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .filter-group input, .filter-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .filter-actions {
        display: flex;
        gap: 10px;
    }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    .export-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        flex-wrap: wrap;
    }

    .total-row {
        font-weight: bold;
        background: #f0f0f0;
    }

    .section-title {
        background: #efebe9;
        padding: 10px 15px;
        border-radius: 5px;
        margin: 15px 0;
        font-weight: 600;
        color: #5d4037;
    }

    .inventory-form {
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

    .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .form-col {
        flex: 1;
        min-width: 250px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .status-instock {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .status-lowstock {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .status-outofstock {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .movement-in {
        color: var(--success-color);
        font-weight: 600;
    }

    .movement-out {
        color: var(--error-color);
        font-weight: 600;
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }

        .export-buttons {
            flex-direction: column;
        }

        .form-row {
            flex-direction: column;
        }
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        width: 90%;
        max-width: 700px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #777;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .tabs {
        display: flex;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .tab {
        padding: 10px 20px;
        cursor: pointer;
        border-bottom: 3px solid transparent;
    }

        .tab.active {
            border-bottom: 3px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 600;
        }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<div class="faculty-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> جاري تحميل بيانات المخزون...
            </div>
        }
        else if (hasError)
        {
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>خطأ!</strong>
                    <p>حدث خطأ أثناء تحميل بيانات المخزون. يرجى المحاولة مرة أخرى.</p>
                    <button class="btn btn-primary" @onclick="LoadInventoryData">إعادة المحاولة</button>
                </div>
            </div>
        }
        else
        {
            <!-- الشريط العلوي -->
            <div class="top-bar">
                <h2><i class="fas fa-warehouse"></i> إدارة المخازن</h2>
                <div class="user-profile">
                    <div class="user-info">
                        <h4>مخازن الجامعة</h4>
                        <p>آخر تحديث: @DateTime.Now.ToString("yyyy/MM/dd HH:mm")</p>
                    </div>
                </div>
            </div>

            <!-- بطاقات الإحصائيات -->
            <div class="dashboard-cards">
                <div class="card stat-card">
                    <div class="stat-icon total">
                        <i class="fas fa-boxes"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@stats.TotalItems</h4>
                        <p>إجمالي الأصناف</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon instock">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="quantity-high">@stats.InStockItems</h4>
                        <p>الأصناف المتوفرة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon lowstock">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="quantity-low">@stats.LowStockItems</h4>
                        <p>مخزون منخفض</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon outofstock">
                        <i class="fas fa-times-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="quantity-zero">@stats.OutOfStockItems</h4>
                        <p>غير متوفرة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon value">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="value-amount">@stats.TotalValue.ToString("C")</h4>
                        <p>القيمة الإجمالية</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon movement">
                        <i class="fas fa-exchange-alt"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@stats.RecentMovements</h4>
                        <p>حركات حديثة</p>
                    </div>
                </div>
            </div>

            <!-- قسم الفلترة -->
            <div class="filter-section">
                <h3><i class="fas fa-filter"></i> تصفية الأصناف</h3>
                <div class="filter-row">
                    <div class="filter-group">
                        <label for="searchTerm">البحث</label>
                        <input type="text" id="searchTerm" @bind="searchTerm" placeholder="البحث باسم الصنف أو الرمز..." />
                    </div>
                    <div class="filter-group">
                        <label for="categoryFilter">التصنيف</label>
                        <select id="categoryFilter" @bind="categoryFilter">
                            <option value="">جميع التصنيفات</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Name">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="statusFilter">الحالة</label>
                        <select id="statusFilter" @bind="statusFilter">
                            <option value="">جميع الحالات</option>
                            <option value="InStock">متوفر</option>
                            <option value="LowStock">مخزون منخفض</option>
                            <option value="OutOfStock">غير متوفر</option>
                        </select>
                    </div>
                    <div class="filter-actions">
                        <button class="btn btn-primary" @onclick="FilterItems">
                            <i class="fas fa-search"></i> بحث
                        </button>
                        <button class="btn btn-outline" @onclick="ClearFilters">
                            <i class="fas fa-times"></i> مسح
                        </button>
                    </div>
                </div>

                <div class="export-buttons">
                    <button class="btn btn-success" @onclick="()=>ShowItemModal()">
                        <i class="fas fa-plus"></i> إضافة صنف جديد
                    </button>
                    <button class="btn btn-info" @onclick="ExportToExcel">
                        <i class="fas fa-file-excel"></i> تصدير إلى Excel
                    </button>
                    <button class="btn btn-warning" @onclick="ExportToPdf">
                        <i class="fas fa-file-pdf"></i> تصدير إلى PDF
                    </button>
                    <button class="btn btn-outline" @onclick="PrintInventory">
                        <i class="fas fa-print"></i> طباعة
                    </button>
                </div>
            </div>

            <!-- علامات التبويب -->
            <div class="tabs">
                <div class="tab @(activeTab == "items" ? "active" : "")" @onclick="()=> SwitchTab(ItemsString)">
                    <i class="fas fa-list"></i> قائمة الأصناف
                </div>
                <div class="tab @(activeTab == "lowstock" ? "active" : "")" @onclick="()=> SwitchTab(LowstockString)">
                    <i class="fas fa-exclamation-triangle"></i> مخزون منخفض
                </div>
                <div class="tab @(activeTab == "outofstock" ? "active" : "")" @onclick="()=> SwitchTab(OutofstockString)">
                    <i class="fas fa-times-circle"></i> غير متوفرة
                </div>
            </div>

            <!-- قائمة الأصناف -->
            <div class="tab-content @(activeTab == "items" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-box"></i> جميع الأصناف</h3>
                        <span class="badge badge-info">@filteredItems.Count صنف</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>الرمز</th>
                                    <th>اسم الصنف</th>
                                    <th>التصنيف</th>
                                    <th class="text-center">الكمية</th>
                                    <th class="text-center">سعر الوحدة</th>
                                    <th class="text-center">القيمة الإجمالية</th>
                                    <th class="text-center">الحالة</th>
                                    <th class="text-center">الموقع</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in filteredItems)
                                {
                                    <tr>
                                        <td><strong>@item.Code</strong></td>
                                        <td>@item.Name</td>
                                        <td><span class="badge badge-info">@item.Category</span></td>
                                        <td class="text-center @(GetQuantityClass(item.Quantity, item.ReorderLevel))">
                                            @item.Quantity @item.Unit
                                        </td>
                                        <td class="text-center">@item.UnitPrice.ToString("C")</td>
                                        <td class="text-center value-amount">@item.TotalValue.ToString("C")</td>
                                        <td class="text-center">
                                            <span class="badge @(GetStatusBadgeClass(item.Status))">
                                                @GetStatusText(item.Status)
                                            </span>
                                        </td>
                                        <td class="text-center">@item.Location</td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowItemModal(item)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-info" @onclick="()=> ShowMovementsModal(item)" title="الحركات">
                                                <i class="fas fa-exchange-alt"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="()=> DeleteItem(item.Id)" title="حذف">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                                @if (filteredItems.Any())
                                {
                                    <tr class="total-row">
                                        <td colspan="5"><strong>الإجمالي</strong></td>
                                        <td class="text-center value-amount">
                                            <strong>@filteredItems.Sum(i => i.TotalValue).ToString("C")</strong>
                                        </td>
                                        <td colspan="3"></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- مخزون منخفض -->
            <div class="tab-content @(activeTab == "lowstock" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-exclamation-triangle"></i> الأصناف ذات المخزون المنخفض</h3>
                        <span class="badge badge-warning">@lowStockItems.Count صنف</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>الرمز</th>
                                    <th>اسم الصنف</th>
                                    <th>التصنيف</th>
                                    <th class="text-center">الكمية</th>
                                    <th class="text-center">مستوى إعادة الطلب</th>
                                    <th class="text-center">المورد</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in lowStockItems)
                                {
                                    <tr>
                                        <td><strong>@item.Code</strong></td>
                                        <td>@item.Name</td>
                                        <td><span class="badge badge-info">@item.Category</span></td>
                                        <td class="text-center quantity-low">@item.Quantity @item.Unit</td>
                                        <td class="text-center">@item.ReorderLevel @item.Unit</td>
                                        <td class="text-center">@item.Supplier</td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-success" @onclick="()=> ShowItemModal(item)" title="إضافة كمية">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowItemModal(item)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- غير متوفرة -->
            <div class="tab-content @(activeTab == "outofstock" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-times-circle"></i> الأصناف غير المتوفرة</h3>
                        <span class="badge badge-error">@outOfStockItems.Count صنف</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>الرمز</th>
                                    <th>اسم الصنف</th>
                                    <th>التصنيف</th>
                                    <th class="text-center">المورد</th>
                                    <th class="text-center">تاريخ آخر تحديث</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in outOfStockItems)
                                {
                                    <tr>
                                        <td><strong>@item.Code</strong></td>
                                        <td>@item.Name</td>
                                        <td><span class="badge badge-info">@item.Category</span></td>
                                        <td class="text-center">@item.Supplier</td>
                                        <td class="text-center">@item.UpdatedAt.ToString("yyyy/MM/dd")</td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-success" @onclick="()=> ShowItemModal(item)" title="إضافة كمية">
                                                <i class="fas fa-plus"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowItemModal(item)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal إضافة/تعديل صنف -->
@if (showItemModal)
{
    <div class="modal-overlay" @onclick="CloseItemModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@(isEditMode ? "تعديل صنف" : "إضافة صنف جديد")</h3>
                <button class="modal-close" @onclick="CloseItemModal">&times;</button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveItem">
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="code">رمز الصنف *</label>
                                <input type="text" id="code" @bind="currentItem.Code" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="name">اسم الصنف *</label>
                                <input type="text" id="name" @bind="currentItem.Name" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="description">الوصف</label>
                        <textarea id="description" @bind="currentItem.Description" rows="2"></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="category">التصنيف *</label>
                                <select id="category" @bind="currentItem.Category" required>
                                    <option value="">اختر التصنيف</option>
                                    @foreach (var category in categories)
                                    {
                                        <option value="@category.Name">@category.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="unit">وحدة القياس *</label>
                                <input type="text" id="unit" @bind="currentItem.Unit" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="quantity">الكمية *</label>
                                <input type="number" id="quantity" @bind="currentItem.Quantity" min="0" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="reorderLevel">مستوى إعادة الطلب</label>
                                <input type="number" id="reorderLevel" @bind="currentItem.ReorderLevel" min="0" />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="unitPrice">سعر الوحدة *</label>
                                <input type="number" id="unitPrice" @bind="currentItem.UnitPrice" step="0.01" min="0" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="location">الموقع</label>
                                <input type="text" id="location" @bind="currentItem.Location" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="supplier">المورد</label>
                        <input type="text" id="supplier" @bind="currentItem.Supplier" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseItemModal">إلغاء</button>
                <button class="btn btn-primary" @onclick="SaveItem" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span><span class="loading-spinner"></span> جاري الحفظ...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "حفظ التغييرات" : "حفظ الصنف")</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal حركات الصنف -->
@if (showMovementsModal)
{
    <div class="modal-overlay" @onclick="CloseMovementsModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>حركات الصنف: @selectedItem?.Name</h3>
                <button class="modal-close" @onclick="CloseMovementsModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="section-title">إضافة حركة جديدة</div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="movementType">نوع الحركة *</label>
                            <select id="movementType" @bind="newMovement.MovementType" required>
                                <option value="In">دخول</option>
                                <option value="Out">خروج</option>
                            </select>
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="movementQuantity">الكمية *</label>
                            <input type="number" id="movementQuantity" @bind="newMovement.Quantity" min="1" required />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="movementReason">السبب *</label>
                    <input type="text" id="movementReason" @bind="newMovement.Reason" required />
                </div>
                <button class="btn btn-success" @onclick="AddMovement">
                    <i class="fas fa-plus"></i> إضافة حركة
                </button>

                <div class="section-title" style="margin-top: 20px;">سجل الحركات</div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>التاريخ</th>
                                <th>النوع</th>
                                <th class="text-center">الكمية</th>
                                <th>السبب</th>
                                <th>أدخلها</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var movement in itemMovements)
                            {
                                <tr>
                                    <td>@movement.MovementDate.ToString("yyyy/MM/dd HH:mm")</td>
                                    <td>
                                        <span class="badge @(movement.MovementType == MovementType.In ? "badge-success" : "badge-error")">
                                            @(movement.MovementType == MovementType.In ? "دخول" : "خروج")
                                        </span>
                                    </td>
                                    <td class="text-center @(movement.MovementType == MovementType.In ? "movement-in" : "movement-out")">
                                        @movement.Quantity
                                    </td>
                                    <td>@movement.Reason</td>
                                    <td>@movement.CreatedBy</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseMovementsModal">إغلاق</button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private bool showItemModal = false;
    private bool showMovementsModal = false;
    private bool isSaving = false;
    private bool isEditMode = false;
    private string activeTab = "items";
    private string ItemsString = "items";
    private string LowstockString = "lowstock";
    private string OutofstockString = "outofstock";

    private InventoryStatsDto stats = new InventoryStatsDto();
    private List<InventoryItemDto> allItems = new List<InventoryItemDto>();
    private List<InventoryItemDto> filteredItems = new List<InventoryItemDto>();
    private List<InventoryItemDto> lowStockItems = new List<InventoryItemDto>();
    private List<InventoryItemDto> outOfStockItems = new List<InventoryItemDto>();
    private List<InventoryCategoryDto> categories = new List<InventoryCategoryDto>();
    private List<InventoryMovementDto> itemMovements = new List<InventoryMovementDto>();

    private InventoryItemDto currentItem = new InventoryItemDto();
    private InventoryItemDto selectedItem = new InventoryItemDto();
    private InventoryMovementDto newMovement = new InventoryMovementDto();

    // فلاتر
    private string searchTerm = "";
    private string categoryFilter = "";
    private string statusFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryData();
    }

    private async Task LoadInventoryData()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            stats = await InventoryService.GetInventoryStatsAsync();
            allItems = await InventoryService.GetAllInventoryItemsAsync();
            filteredItems = allItems;
            lowStockItems = await InventoryService.GetLowStockItemsAsync(10);
            outOfStockItems = await InventoryService.GetOutOfStockItemsAsync();
            categories = await InventoryService.GetInventoryCategoriesAsync();

            ToastService.ShowSuccess("تم تحميل بيانات المخزون بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء تحميل البيانات: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterItems()
    {
        try
        {
            InventoryStatus? status = null;
            if (!string.IsNullOrEmpty(statusFilter))
            {
                status = statusFilter switch
                {
                    "InStock" => InventoryStatus.InStock,
                    "LowStock" => InventoryStatus.LowStock,
                    "OutOfStock" => InventoryStatus.OutOfStock,
                    _ => null
                };
            }

            var result = await InventoryService.GetInventoryItemsAsync(1, 1000, searchTerm, categoryFilter, status);
            filteredItems = result.Data.ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصفية: {ex.Message}", "خطأ");
        }
    }

    private void ClearFilters()
    {
        searchTerm = "";
        categoryFilter = "";
        statusFilter = "";
        filteredItems = allItems;
    }

    private void SwitchTab(string tab)
    {
        activeTab = tab;
    }

    private void ShowItemModal(InventoryItemDto item = null)
    {
        isEditMode = item != null;

        if (isEditMode)
        {
            currentItem = new InventoryItemDto
                {
                    Id = item.Id,
                    Code = item.Code,
                    Name = item.Name,
                    Description = item.Description,
                    Category = item.Category,
                    Unit = item.Unit,
                    Quantity = item.Quantity,
                    ReorderLevel = item.ReorderLevel,
                    UnitPrice = item.UnitPrice,
                    Location = item.Location,
                    Supplier = item.Supplier,
                    Status = item.Status
                };
        }
        else
        {
            currentItem = new InventoryItemDto
                {
                    Quantity = 0,
                    ReorderLevel = 10,
                    UnitPrice = 0,
                    Status = InventoryStatus.InStock
                };
        }

        showItemModal = true;
    }

    private void CloseItemModal()
    {
        showItemModal = false;
        isSaving = false;
        isEditMode = false;
    }

    private async Task SaveItem()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            if (isEditMode)
            {
                await InventoryService.UpdateInventoryItemAsync(currentItem.Id, currentItem);
                ToastService.ShowSuccess("تم تحديث الصنف بنجاح", "نجاح");
            }
            else
            {
                await InventoryService.AddInventoryItemAsync(currentItem);
                ToastService.ShowSuccess("تم إضافة الصنف بنجاح", "نجاح");
            }

            CloseItemModal();
            await LoadInventoryData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحفظ: {ex.Message}", "خطأ");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowMovementsModal(InventoryItemDto item)
    {
        selectedItem = item;
        newMovement = new InventoryMovementDto
            {
                InventoryItemId = item.Id,
                ItemName = item.Name,
                MovementType = MovementType.In,
                Quantity = 1,
                CreatedBy = GetCurrentUser()
            };
        showMovementsModal = true;
    }

    private void CloseMovementsModal()
    {
        showMovementsModal = false;
        selectedItem = new InventoryItemDto();
        newMovement = new InventoryMovementDto();
        itemMovements.Clear();
    }

    private async Task AddMovement()
    {
        try
        {
            await InventoryService.AddItemMovementAsync(newMovement);
            ToastService.ShowSuccess("تمت إضافة الحركة بنجاح", "نجاح");

            // إعادة تحميل الحركات
            itemMovements = await InventoryService.GetItemMovementsAsync(selectedItem.Id);

            // إعادة تحميل البيانات
            await LoadInventoryData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء إضافة الحركة: {ex.Message}", "خطأ");
        }
    }

    private async Task DeleteItem(int itemId)
    {
        try
        {
            if (await ConfirmDelete())
            {
                await InventoryService.DeleteInventoryItemAsync(itemId);
                ToastService.ShowSuccess("تم حذف الصنف بنجاح", "نجاح");
                await LoadInventoryData();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحذف: {ex.Message}", "خطأ");
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // هنا يمكنك إضافة مودال تأكيد الحذف
        return true; // مؤقتاً
    }

    private async Task ExportToExcel()
    {
        try
        {
            var excelData = await InventoryService.ExportInventoryToExcelAsync();
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير المخزون إلى Excel بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfData = await InventoryService.ExportInventoryToPdfAsync();
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير المخزون إلى PDF بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private void PrintInventory()
    {
        // تنفيذ الطباعة
        ToastService.ShowInfo("جاري تحضير الطباعة...", "طباعة");
        // يمكنك إضافة كود الطباعة هنا
    }

    private string GetQuantityClass(int quantity, int reorderLevel)
    {
        if (quantity == 0) return "quantity-zero";
        if (quantity <= reorderLevel) return "quantity-low";
        return "quantity-high";
    }

    private string GetStatusBadgeClass(InventoryStatus status)
    {
        return status switch
        {
            InventoryStatus.InStock => "badge-success",
            InventoryStatus.LowStock => "badge-warning",
            InventoryStatus.OutOfStock => "badge-error",
            InventoryStatus.Discontinued => "badge-info",
            _ => "badge-info"
        };
    }

    private string GetStatusText(InventoryStatus status)
    {
        return status switch
        {
            InventoryStatus.InStock => "متوفر",
            InventoryStatus.LowStock => "مخزون منخفض",
            InventoryStatus.OutOfStock => "غير متوفر",
            InventoryStatus.Discontinued => "ملغى",
            _ => "غير محدد"
        };
    }

    private string GetCurrentUser()
    {
        // هنا يمكنك الحصول على اسم المستخدم الحالي
        return "مدير المخازن";
    }
}