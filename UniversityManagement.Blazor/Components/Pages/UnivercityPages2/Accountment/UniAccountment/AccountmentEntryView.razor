@page "/accountmententryview"
@attribute [Authorize(Roles = "Admin,Accountant")]
@inject IAccountingEntryService AccountingService
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<style>
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
        --accounting-color: #4CAF50;
        --debit-color: #2196F3;
        --credit-color: #F44336;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .sidebar-header {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-header h3 {
            color: white;
            margin: 10px 0;
        }

    .sidebar-menu {
        padding: 20px 0;
    }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover, .sidebar-menu a.active {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border-right: 3px solid var(--primary-color);
            }

        .sidebar-menu i {
            margin-left: 10px;
            font-size: 18px;
        }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .search-box {
        display: flex;
        align-items: center;
    }

        .search-box input {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 5px 0 0 5px;
            outline: none;
        }

        .search-box button {
            border-radius: 0 5px 5px 0;
            padding: 8px 15px;
        }

    .user-profile {
        display: flex;
        align-items: center;
    }

        .user-profile img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-left: 10px;
        }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon.debit {
            background: rgba(33, 150, 243, 0.1);
        }

        .stat-icon.credit {
            background: rgba(244, 67, 54, 0.1);
        }

        .stat-icon.balance {
            background: rgba(76, 175, 80, 0.1);
        }

        .stat-icon.entries {
            background: rgba(245, 124, 0, 0.1);
        }

        .stat-icon.recent {
            background: rgba(156, 39, 176, 0.1);
        }

        .stat-icon i {
            font-size: 24px;
        }

        .stat-icon.debit i {
            color: var(--debit-color);
        }

        .stat-icon.credit i {
            color: var(--credit-color);
        }

        .stat-icon.balance i {
            color: var(--success-color);
        }

        .stat-icon.entries i {
            color: var(--primary-color);
        }

        .stat-icon.recent i {
            color: #9c27b0;
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-error {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .badge-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background: #e57100;
        }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

        .btn-outline:hover {
            background: #f5f5f5;
        }

    .btn-sm {
        padding: 5px 10px;
        font-size: 12px;
    }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    .filter-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-row {
        display: flex;
        gap: 15px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .filter-group input, .filter-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .filter-actions {
        display: flex;
        gap: 10px;
    }

    .amount-positive {
        color: var(--debit-color);
        font-weight: 600;
    }

    .amount-negative {
        color: var(--credit-color);
        font-weight: 600;
    }

    .balance-positive {
        color: var(--success-color);
        font-weight: 600;
    }

    .balance-negative {
        color: var(--error-color);
        font-weight: 600;
    }

    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-header h3, .sidebar-menu span {
            display: none;
        }

        .sidebar-menu a {
            justify-content: center;
            padding: 15px;
        }

        .sidebar-menu i {
            margin-left: 0;
        }

        .main-content {
            margin-right: 70px;
        }

        .dashboard-cards {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .sidebar-menu {
            display: flex;
            overflow-x: auto;
        }

            .sidebar-menu ul {
                display: flex;
            }

            .sidebar-menu li {
                margin-bottom: 0;
                margin-left: 5px;
            }

            .sidebar-menu a {
                border-radius: 5px;
                border-right: none !important;
                border-bottom: 3px solid transparent;
            }

                .sidebar-menu a:hover, .sidebar-menu a.active {
                    border-right: none;
                    border-bottom: 3px solid var(--primary-color);
                }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #777;
    }

    .modal-body {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .form-row {
        display: flex;
        gap: 15px;
    }

    .form-col {
        flex: 1;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>


<div class="faculty-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> جاري تحميل البيانات المحاسبية...
            </div>
        }
        else if (hasError)
        {
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>خطأ!</strong>
                    <p>حدث خطأ أثناء تحميل البيانات. يرجى المحاولة مرة أخرى.</p>
                    <button class="btn btn-primary" @onclick="LoadData">إعادة المحاولة</button>
                </div>
            </div>
        }
        else
        {
            <!-- الشريط العلوي -->
            <div class="top-bar">
                <div class="search-box">
                    <input type="text" placeholder="بحث برقم القيد أو الوصف..." @bind="searchTerm" @oninput="FilterEntries">
                    <button class="btn btn-outline"><i class="fas fa-search"></i></button>
                </div>
                <div class="user-profile">
                    <div class="user-info">
                        <h4>لوحة التحكم المحاسبي</h4>
                        <p>إدارة القيود والمعاملات المالية</p>
                    </div>
                    <img src="https://via.placeholder.com/40" alt="User">
                </div>
            </div>

            <!-- بطاقات الإحصائيات -->
            <div class="dashboard-cards">
                <div class="card stat-card">
                    <div class="stat-icon entries">
                        <i class="fas fa-file-invoice-dollar"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@totalEntries</h4>
                        <p>إجمالي القيود</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon debit">
                        <i class="fas fa-arrow-down"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-positive">@totalDebit.ToString("C")</h4>
                        <p>إجمالي القبض</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon credit">
                        <i class="fas fa-arrow-up"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="amount-negative">@totalCredit.ToString("C")</h4>
                        <p>إجمالي الصرف</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon balance">
                        <i class="fas fa-balance-scale"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="@(netBalance >= 0 ? "balance-positive" : "balance-negative")">@netBalance.ToString("C")</h4>
                        <p>الرصيد الصافي</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon recent">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@recentEntriesCount</h4>
                        <p>القيود الحديثة</p>
                    </div>
                </div>
            </div>

            <!-- قسم الفلترة -->
            <div class="filter-section">
                <h3><i class="fas fa-filter"></i> فلترة القيود</h3>
                <div class="filter-row">
                    <div class="filter-group">
                        <label for="fromDate">من تاريخ</label>
                        <input type="date" id="fromDate" @bind="filterFromDate" />
                    </div>
                    <div class="filter-group">
                        <label for="toDate">إلى تاريخ</label>
                        <input type="date" id="toDate" @bind="filterToDate" />
                    </div>
                    <div class="filter-group">
                        <label for="entryType">نوع القيد</label>
                        <select id="entryType" @bind="filterEntryType">
                            <option value="">الجميع</option>
                            <option value="Debit">قبض</option>
                            <option value="Credit">صرف</option>
                        </select>
                    </div>
                    <div class="filter-actions">
                        <button class="btn btn-primary" @onclick="ApplyFilters">
                            <i class="fas fa-filter"></i> تطبيق
                        </button>
                        <button class="btn btn-outline" @onclick="ClearFilters">
                            <i class="fas fa-times"></i> مسح
                        </button>
                    </div>
                </div>
            </div>

            <!-- قائمة القيود -->
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-list"></i> قائمة القيود المحاسبية</h3>
                    <button class="btn btn-primary" @onclick="()=>ShowEntryModal()">
                        <i class="fas fa-plus"></i> إضافة قيد جديد
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>رقم القيد</th>
                                <th>الوصف</th>
                                <th>التاريخ</th>
                                <th>النوع</th>
                                <th>المبلغ</th>
                                <th>تاريخ الإنشاء</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var entry in filteredEntries)
                            {
                                <tr>
                                    <td><strong>@entry.EntryNumber</strong></td>
                                    <td>@entry.Description</td>
                                    <td>@entry.EntryDate.ToString("yyyy/MM/dd")</td>
                                    <td>
                                        <span class="badge @(entry.Type == EntryType.Debit ? "badge-info" : "badge-error")">
                                            @(entry.Type == EntryType.Debit ? "قبض" : "صرف")
                                        </span>
                                    </td>
                                    <td class="@(entry.Type == EntryType.Debit ? "amount-positive" : "amount-negative")">
                                        @entry.Amount.ToString("C")
                                    </td>
                                    <td>@entry.CreatedAt.ToString("yyyy/MM/dd HH:mm")</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline" @onclick="()=> ShowEntryModal(entry)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline" @onclick="()=> DeleteEntry(entry.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal لإضافة/تعديل القيد -->
@if (showEntryModal)
{
    <div class="modal-overlay" @onclick="CloseEntryModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@(isEditMode ? "تعديل قيد محاسبي" : "إضافة قيد محاسبي جديد")</h3>
                <button class="modal-close" @onclick="CloseEntryModal">&times;</button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveEntry">
                    <div class="form-group">
                        <label for="entryNumber">رقم القيد *</label>
                        <input type="text" id="entryNumber" @bind="currentEntry.EntryNumber" required />
                    </div>
                    <div class="form-group">
                        <label for="description">الوصف *</label>
                        <textarea id="description" @bind="currentEntry.Description" rows="3" required></textarea>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="entryDate">تاريخ القيد *</label>
                                <input type="date" id="entryDate" @bind="currentEntry.EntryDate" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="entryType">نوع القيد *</label>
                                <select id="entryType" @bind="currentEntry.Type" required>
                                    <option value="Debit">قبض</option>
                                    <option value="Credit">صرف</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="amount">المبلغ *</label>
                        <input type="number" id="amount" @bind="currentEntry.Amount" step="0.01" min="0.01" required />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseEntryModal">إلغاء</button>
                <button class="btn btn-primary" @onclick="SaveEntry" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span><span class="loading-spinner"></span> جاري الحفظ...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "حفظ التغييرات" : "حفظ القيد")</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private bool showEntryModal = false;
    private bool isSaving = false;
    private bool isEditMode = false;

    private List<AccountingEntryDto> allEntries = new List<AccountingEntryDto>();
    private List<AccountingEntryDto> filteredEntries = new List<AccountingEntryDto>();
    private AccountingEntryDto currentEntry = new AccountingEntryDto();
    private string searchTerm = "";

    // فلاتر
    private DateTime? filterFromDate = null;
    private DateTime? filterToDate = null;
    private string filterEntryType = "";

    // إحصائيات
    private int totalEntries = 0;
    private decimal totalDebit = 0;
    private decimal totalCredit = 0;
    private decimal netBalance = 0;
    private int recentEntriesCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            hasError = false;

            // تحميل جميع القيود
            allEntries = await AccountingService.GetAllEntriesAsync();
            filteredEntries = allEntries;

            // تحميل الإحصائيات
            var stats = await AccountingService.GetAccountingStatsAsync();
            totalEntries = stats.TotalEntries;
            totalDebit = stats.TotalDebit;
            totalCredit = stats.TotalCredit;
            netBalance = stats.NetBalance;
            recentEntriesCount = stats.RecentEntriesCount;

            ToastService.ShowSuccess("تم تحميل البيانات المحاسبية بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء تحميل البيانات: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterEntries()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredEntries = allEntries;
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredEntries = allEntries.Where(e =>
                e.EntryNumber.ToLower().Contains(term) ||
                e.Description.ToLower().Contains(term)
            ).ToList();
        }
    }

    private async Task ApplyFilters()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            EntryType? type = null;
            if (!string.IsNullOrEmpty(filterEntryType))
            {
                type = filterEntryType == "Debit" ? EntryType.Debit : EntryType.Credit;
            }

            var result = await AccountingService.GetEntriesAsync(1, 1000, searchTerm, type, filterFromDate, filterToDate);
            filteredEntries = result.Data.ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء تطبيق الفلاتر: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearFilters()
    {
        filterFromDate = null;
        filterToDate = null;
        filterEntryType = "";
        searchTerm = "";
        filteredEntries = allEntries;
    }

    private void ShowEntryModal(AccountingEntryDto entry = null)
    {
        isEditMode = entry != null;

        if (isEditMode)
        {
            // نسخ بيانات القيد للتعديل
            currentEntry = new AccountingEntryDto
                {
                    Id = entry.Id,
                    EntryNumber = entry.EntryNumber,
                    Description = entry.Description,
                    EntryDate = entry.EntryDate,
                    Type = entry.Type,
                    Amount = entry.Amount,
                    CreatedAt = entry.CreatedAt,
                    UpdatedAt = entry.UpdatedAt
                };
        }
        else
        {
            // تهيئة قيد جديد
            currentEntry = new AccountingEntryDto
                {
                    EntryDate = DateTime.Now,
                    CreatedAt = DateTime.Now,
                    UpdatedAt = DateTime.Now
                };
        }

        showEntryModal = true;
    }

    private void CloseEntryModal()
    {
        showEntryModal = false;
        currentEntry = new AccountingEntryDto();
        isSaving = false;
        isEditMode = false;
    }

    private async Task SaveEntry()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            if (isEditMode)
            {
                await AccountingService.UpdateEntryAsync(currentEntry.Id, currentEntry);
                ToastService.ShowSuccess("تم تحديث القيد المحاسبي بنجاح", "نجاح");
            }
            else
            {
                await AccountingService.CreateEntryAsync(currentEntry);
                ToastService.ShowSuccess("تم إضافة القيد المحاسبي بنجاح", "نجاح");
            }

            CloseEntryModal();
            await LoadData(); // إعادة تحميل البيانات
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحفظ: {ex.Message}", "خطأ");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteEntry(int entryId)
    {
        try
        {
            if (await ConfirmDelete())
            {
                await AccountingService.DeleteEntryAsync(entryId);
                ToastService.ShowSuccess("تم حذف القيد المحاسبي بنجاح", "نجاح");
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحذف: {ex.Message}", "خطأ");
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // هنا يمكنك إضافة مودال تأكيد الحذف
        return true; // مؤقتاً
    }
}
