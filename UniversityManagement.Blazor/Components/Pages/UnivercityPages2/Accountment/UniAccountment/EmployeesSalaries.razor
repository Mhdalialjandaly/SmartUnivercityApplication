@page "/salaries"
@attribute [Authorize(Roles = "Admin,HRManager,FinanceManager")]
@inject ISalaryService SalaryService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">

<style>
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
        --salary-color: #e91e63;
        --active-color: #4CAF50;
        --pending-color: #FF9800;
        --paid-color: #2196F3;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-success {
        background: var(--success-color);
        color: white;
    }

    .btn-info {
        background: var(--info-color);
        color: white;
    }

    .btn-warning {
        background: var(--warning-color);
        color: white;
    }

    .btn-danger {
        background: var(--error-color);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon.total {
            background: rgba(233, 30, 99, 0.1);
        }

        .stat-icon.active {
            background: rgba(76, 175, 80, 0.1);
        }

        .stat-icon.pending {
            background: rgba(255, 152, 0, 0.1);
        }

        .stat-icon.salary {
            background: rgba(33, 150, 243, 0.1);
        }

        .stat-icon.paid {
            background: rgba(156, 39, 176, 0.1);
        }

        .stat-icon.deduction {
            background: rgba(244, 67, 54, 0.1);
        }

        .stat-icon i {
            font-size: 24px;
        }

        .stat-icon.total i {
            color: var(--salary-color);
        }

        .stat-icon.active i {
            color: var(--active-color);
        }

        .stat-icon.pending i {
            color: var(--pending-color);
        }

        .stat-icon.salary i {
            color: var(--info-color);
        }

        .stat-icon.paid i {
            color: #9c27b0;
        }

        .stat-icon.deduction i {
            color: var(--error-color);
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .salary-base {
        color: var(--info-color);
        font-weight: 600;
    }

    .salary-allowance {
        color: var(--success-color);
        font-weight: 600;
    }

    .salary-deduction {
        color: var(--error-color);
        font-weight: 600;
    }

    .salary-net {
        color: var(--primary-color);
        font-weight: 600;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-error {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .badge-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .badge-secondary {
        background: rgba(158, 158, 158, 0.1);
        color: #9e9e9e;
    }

    .filter-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .filter-row {
        display: flex;
        gap: 15px;
        align-items: end;
        flex-wrap: wrap;
    }

    .filter-group {
        flex: 1;
        min-width: 200px;
    }

        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .filter-group input, .filter-group select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .filter-actions {
        display: flex;
        gap: 10px;
    }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    .export-buttons {
        display: flex;
        gap: 10px;
        margin-top: 15px;
        flex-wrap: wrap;
    }

    .total-row {
        font-weight: bold;
        background: #f0f0f0;
    }

    .section-title {
        background: #fce4ec;
        padding: 10px 15px;
        border-radius: 5px;
        margin: 15px 0;
        font-weight: 600;
        color: #ad1457;
    }

    .salary-form {
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
    }

    .form-row {
        display: flex;
        gap: 15px;
        margin-bottom: 15px;
        flex-wrap: wrap;
    }

    .form-col {
        flex: 1;
        min-width: 250px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input, .form-group select, .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .status-active {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .status-pending {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .status-suspended {
        background: rgba(244, 67, 54, 0.1);
        color: #f44336;
    }

    .payment-paid {
        color: var(--success-color);
        font-weight: 600;
    }

    .payment-pending {
        color: var(--warning-color);
        font-weight: 600;
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .filter-row {
            flex-direction: column;
            align-items: stretch;
        }

        .export-buttons {
            flex-direction: column;
        }

        .form-row {
            flex-direction: column;
        }
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #777;
    }

    .modal-body {
        padding: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .tabs {
        display: flex;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .tab {
        padding: 10px 20px;
        cursor: pointer;
        border-bottom: 3px solid transparent;
    }

        .tab.active {
            border-bottom: 3px solid var(--primary-color);
            color: var(--primary-color);
            font-weight: 600;
        }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .salary-breakdown {
        background: #e3f2fd;
        padding: 15px;
        border-radius: 5px;
        margin: 10px 0;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .salary-item {
        text-align: center;
    }

        .salary-item .amount {
            font-size: 18px;
            font-weight: 600;
            margin: 5px 0;
        }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<div class="faculty-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> جاري تحميل بيانات الرواتب...
            </div>
        }
        else if (hasError)
        {
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>خطأ!</strong>
                    <p>حدث خطأ أثناء تحميل بيانات الرواتب. يرجى المحاولة مرة أخرى.</p>
                    <button class="btn btn-primary" @onclick="LoadSalaryData">إعادة المحاولة</button>
                </div>
            </div>
        }
        else
        {
            <!-- الشريط العلوي -->
            <div class="top-bar">
                <h2><i class="fas fa-money-bill-wave"></i> إدارة الرواتب</h2>
                <div class="user-profile">
                    <div class="user-info">
                        <h4>رواتب الموظفين</h4>
                        <p>آخر تحديث: @DateTime.Now.ToString("yyyy/MM/dd HH:mm")</p>
                    </div>
                </div>
            </div>

            <!-- بطاقات الإحصائيات -->
            <div class="dashboard-cards">
                <div class="card stat-card">
                    <div class="stat-icon total">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@stats.TotalEmployees</h4>
                        <p>إجمالي الموظفين</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon active">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="payment-paid">@stats.ActiveSalaries</h4>
                        <p>الرواتب النشطة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon pending">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="payment-pending">@stats.PendingSalaries</h4>
                        <p>الرواتب المعلقة</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon salary">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="salary-net">@stats.TotalMonthlySalary.ToString("C")</h4>
                        <p>إجمالي الرواتب الشهرية</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon paid">
                        <i class="fas fa-money-check"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="payment-paid">@stats.TotalPaidThisMonth.ToString("C")</h4>
                        <p>المدفوع هذا الشهر</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon deduction">
                        <i class="fas fa-minus-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h4 class="salary-deduction">@stats.TotalDeductions.ToString("C")</h4>
                        <p>إجمالي الخصومات</p>
                    </div>
                </div>
            </div>

            <!-- قسم الفلترة -->
            <div class="filter-section">
                <h3><i class="fas fa-filter"></i> تصفية الرواتب</h3>
                <div class="filter-row">
                    <div class="filter-group">
                        <label for="searchTerm">البحث</label>
                        <input type="text" id="searchTerm" @bind="searchTerm" placeholder="البحث باسم الموظف أو الرقم..." />
                    </div>
                    <div class="filter-group">
                        <label for="departmentFilter">القسم</label>
                        <select id="departmentFilter" @bind="departmentFilter">
                            <option value="">جميع الأقسام</option>
                            <option value="الإدارة العامة">الإدارة العامة</option>
                            <option value="الموارد البشرية">الموارد البشرية</option>
                            <option value="المالية">المالية</option>
                            <option value="الخدمات الجامعية">الخدمات الجامعية</option>
                            <option value="الصيانة">الصيانة</option>
                            <option value="الأمن">الأمن</option>
                        </select>
                    </div>
                    <div class="filter-group">
                        <label for="statusFilter">الحالة</label>
                        <select id="statusFilter" @bind="statusFilter">
                            <option value="">جميع الحالات</option>
                            <option value="Active">نشط</option>
                            <option value="Inactive">غير نشط</option>
                            <option value="Pending">معلق</option>
                            <option value="Suspended">موقوف</option>
                        </select>
                    </div>
                    <div class="filter-actions">
                        <button class="btn btn-primary" @onclick="FilterSalaries">
                            <i class="fas fa-search"></i> بحث
                        </button>
                        <button class="btn btn-outline" @onclick="ClearFilters">
                            <i class="fas fa-times"></i> مسح
                        </button>
                    </div>
                </div>

                <div class="export-buttons">
                    <button class="btn btn-success" @onclick="()=>ShowSalaryModal()">
                        <i class="fas fa-plus"></i> إضافة راتب جديد
                    </button>
                    <button class="btn btn-info" @onclick="ShowProcessPayrollModal">
                        <i class="fas fa-calculator"></i> معالجة الرواتب الشهرية
                    </button>
                    <button class="btn btn-warning" @onclick="ExportToExcel">
                        <i class="fas fa-file-excel"></i> تصدير إلى Excel
                    </button>
                    <button class="btn btn-danger" @onclick="ExportToPdf">
                        <i class="fas fa-file-pdf"></i> تصدير إلى PDF
                    </button>
                    <button class="btn btn-outline" @onclick="PrintSalaries">
                        <i class="fas fa-print"></i> طباعة
                    </button>
                </div>
            </div>

            <!-- علامات التبويب -->
            <div class="tabs">
                <div class="tab @(activeTab == "salaries" ? "active" : "")" @onclick="()=> SwitchTab(SalaryString)">
                    <i class="fas fa-list"></i> قائمة الرواتب
                </div>
                <div class="tab @(activeTab == "pending" ? "active" : "")" @onclick="()=> SwitchTab(PendingString)">
                    <i class="fas fa-clock"></i> الرواتب المعلقة
                </div>
                <div class="tab @(activeTab == "payments" ? "active" : "")" @onclick="()=> SwitchTab(PaymentsString)">
                    <i class="fas fa-money-check"></i> مدفوعات الرواتب
                </div>
            </div>

            <!-- قائمة الرواتب -->
            <div class="tab-content @(activeTab == "salaries" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-money-bill-wave"></i> جميع رواتب الموظفين</h3>
                        <span class="badge badge-info">@filteredSalaries.Count راتب</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الموظف</th>
                                    <th>اسم الموظف</th>
                                    <th>القسم</th>
                                    <th>المنصب</th>
                                    <th class="text-center">الراتب الأساسي</th>
                                    <th class="text-center">البدلات</th>
                                    <th class="text-center">الخصومات</th>
                                    <th class="text-center">الراتب الصافي</th>
                                    <th class="text-center">الحالة</th>
                                    <th class="text-center">آخر دفع</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var salary in filteredSalaries)
                                {
                                    <tr>
                                        <td><strong>@salary.EmployeeId</strong></td>
                                        <td>@salary.EmployeeName</td>
                                        <td>@salary.Department</td>
                                        <td>@salary.Position</td>
                                        <td class="text-center salary-base">@salary.BaseSalary.ToString("C")</td>
                                        <td class="text-center salary-allowance">@salary.Allowances.ToString("C")</td>
                                        <td class="text-center salary-deduction">@salary.TotalDeductions.ToString("C")</td>
                                        <td class="text-center salary-net">@salary.NetSalary.ToString("C")</td>
                                        <td class="text-center">
                                            <span class="badge @(GetStatusBadgeClass(salary.Status))">
                                                @GetStatusText(salary.Status)
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            @if (salary.LastPaymentDate.HasValue)
                                            {
                                                @salary.LastPaymentDate.Value.ToString("yyyy/MM/dd")
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowSalaryModal(salary)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-info" @onclick="()=> ShowPaymentModal(salary)" title="الدفع">
                                                <i class="fas fa-money-bill"></i>
                                            </button>
                                            <button class="btn btn-sm btn-warning" @onclick="()=> ShowDeductionModal(salary)" title="الخصومات">
                                                <i class="fas fa-minus-circle"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="()=> DeleteSalary(salary.Id)" title="حذف">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                                @if (filteredSalaries.Any())
                                {
                                    <tr class="total-row">
                                        <td colspan="4"><strong>الإجمالي</strong></td>
                                        <td class="text-center salary-base">
                                            <strong>@filteredSalaries.Sum(s => s.BaseSalary).ToString("C")</strong>
                                        </td>
                                        <td class="text-center salary-allowance">
                                            <strong>@filteredSalaries.Sum(s => s.Allowances).ToString("C")</strong>
                                        </td>
                                        <td class="text-center salary-deduction">
                                            <strong>@filteredSalaries.Sum(s => s.TotalDeductions).ToString("C")</strong>
                                        </td>
                                        <td class="text-center salary-net">
                                            <strong>@filteredSalaries.Sum(s => s.NetSalary).ToString("C")</strong>
                                        </td>
                                        <td colspan="3"></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- الرواتب المعلقة -->
            <div class="tab-content @(activeTab == "pending" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-clock"></i> الرواتب المعلقة</h3>
                        <span class="badge badge-warning">@pendingSalaries.Count راتب</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الموظف</th>
                                    <th>اسم الموظف</th>
                                    <th>القسم</th>
                                    <th>المنصب</th>
                                    <th class="text-center">الراتب الصافي</th>
                                    <th>تاريخ الإنشاء</th>
                                    <th class="text-center">الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var salary in pendingSalaries)
                                {
                                    <tr>
                                        <td><strong>@salary.EmployeeId</strong></td>
                                        <td>@salary.EmployeeName</td>
                                        <td>@salary.Department</td>
                                        <td>@salary.Position</td>
                                        <td class="text-center salary-net">@salary.NetSalary.ToString("C")</td>
                                        <td>@salary.CreatedAt.ToString("yyyy/MM/dd")</td>
                                        <td class="text-center">
                                            <button class="btn btn-sm btn-success" @onclick="()=> ActivateSalary(salary)" title="تفعيل">
                                                <i class="fas fa-check"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline" @onclick="()=> ShowSalaryModal(salary)" title="تعديل">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- مدفوعات الرواتب -->
            <div class="tab-content @(activeTab == "payments" ? "active" : "")">
                <div class="card">
                    <div class="card-header">
                        <h3><i class="fas fa-money-check"></i> أحدث مدفوعات الرواتب</h3>
                        <span class="badge badge-info">@recentPayments.Count دفعة</span>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>رقم الموظف</th>
                                    <th>اسم الموظف</th>
                                    <th>القسم</th>
                                    <th class="text-center">المبلغ</th>
                                    <th>تاريخ الدفع</th>
                                    <th>طريقة الدفع</th>
                                    <th class="text-center">الحالة</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var payment in recentPayments)
                                {
                                    <tr>
                                        <td>@payment.EmployeeSalaryId</td>
                                        <td>@payment.EmployeeName</td>
                                        <td>@GetEmployeeDepartment(payment.EmployeeSalaryId)</td>
                                        <td class="text-center salary-net">@payment.Amount.ToString("C")</td>
                                        <td>@payment.PaymentDate.ToString("yyyy/MM/dd")</td>
                                        <td>@payment.PaymentMethod</td>
                                        <td class="text-center">
                                            <span class="badge @(GetPaymentStatusBadgeClass(payment.Status))">
                                                @GetPaymentStatusText(payment.Status)
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal إضافة/تعديل راتب -->
@if (showSalaryModal)
{
    <div class="modal-overlay" @onclick="CloseSalaryModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@(isEditMode ? "تعديل راتب الموظف" : "إضافة راتب جديد")</h3>
                <button class="modal-close" @onclick="CloseSalaryModal">&times;</button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveSalary">
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="employeeId">رقم الموظف *</label>
                                <input type="text" id="employeeId" @bind="currentSalary.EmployeeId" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="employeeName">اسم الموظف *</label>
                                <input type="text" id="employeeName" @bind="currentSalary.EmployeeName" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="department">القسم *</label>
                                <select id="department" @bind="currentSalary.Department" required>
                                    <option value="">اختر القسم</option>
                                    <option value="الإدارة العامة">الإدارة العامة</option>
                                    <option value="الموارد البشرية">الموارد البشرية</option>
                                    <option value="المالية">المالية</option>
                                    <option value="الخدمات الجامعية">الخدمات الجامعية</option>
                                    <option value="الصيانة">الصيانة</option>
                                    <option value="الأمن">الأمن</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="position">المنصب *</label>
                                <input type="text" id="position" @bind="currentSalary.Position" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="baseSalary">الراتب الأساسي *</label>
                                <input type="number" id="baseSalary" @bind="currentSalary.BaseSalary" step="0.01" min="0" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="allowances">البدلات</label>
                                <input type="number" id="allowances" @bind="currentSalary.Allowances" step="0.01" min="0" />
                            </div>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="totalDeductions">إجمالي الخصومات</label>
                                <input type="number" id="totalDeductions" @bind="currentSalary.TotalDeductions" step="0.01" min="0" />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="status">الحالة *</label>
                                <select id="status" @bind="currentSalary.Status" required>
                                    <option value="Active">نشط</option>
                                    <option value="Inactive">غير نشط</option>
                                    <option value="Pending">معلق</option>
                                    <option value="Suspended">موقوف</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="bankAccount">رقم الحساب البنكي</label>
                        <input type="text" id="bankAccount" @bind="currentSalary.BankAccount" />
                    </div>

                    <div class="salary-breakdown">
                        <div class="salary-item">
                            <div>الراتب الأساسي</div>
                            <div class="amount salary-base">@currentSalary.BaseSalary.ToString("C")</div>
                        </div>
                        <div class="salary-item">
                            <div>البدلات</div>
                            <div class="amount salary-allowance">@currentSalary.Allowances.ToString("C")</div>
                        </div>
                        <div class="salary-item">
                            <div>الخصومات</div>
                            <div class="amount salary-deduction">@currentSalary.TotalDeductions.ToString("C")</div>
                        </div>
                        <div class="salary-item">
                            <div>الراتب الصافي</div>
                            <div class="amount salary-net">@currentSalary.NetSalary.ToString("C")</div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseSalaryModal">إلغاء</button>
                <button class="btn btn-primary" @onclick="SaveSalary" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span><span class="loading-spinner"></span> جاري الحفظ...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "حفظ التغييرات" : "حفظ الراتب")</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal دفع الراتب -->
@if (showPaymentModal)
{
    <div class="modal-overlay" @onclick="ClosePaymentModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>دفع راتب: @selectedSalary?.EmployeeName</h3>
                <button class="modal-close" @onclick="ClosePaymentModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="section-title">إضافة دفعة جديدة</div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentAmount">المبلغ *</label>
                            <input type="number" id="paymentAmount" @bind="newPayment.Amount" step="0.01" min="0" required />
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentMethod">طريقة الدفع *</label>
                            <select id="paymentMethod" @bind="newPayment.PaymentMethod" required>
                                <option value="تحويل بنكي">تحويل بنكي</option>
                                <option value="نقداً">نقداً</option>
                                <option value="شيك">شيك</option>
                                <option value="بطاقة ائتمان">بطاقة ائتمان</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentDate">تاريخ الدفع *</label>
                            <input type="date" id="paymentDate" @bind="newPayment.PaymentDate" required />
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="paymentStatus">الحالة *</label>
                            <select id="paymentStatus" @bind="newPayment.Status" required>
                                <option value="Pending">معلق</option>
                                <option value="Paid">مدفوع</option>
                                <option value="Failed">فشل</option>
                                <option value="Cancelled">ملغي</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="paymentNotes">ملاحظات</label>
                    <textarea id="paymentNotes" @bind="newPayment.Notes" rows="2"></textarea>
                </div>
                <button class="btn btn-success" @onclick="AddPayment">
                    <i class="fas fa-plus"></i> إضافة دفعة
                </button>

                <div class="section-title" style="margin-top: 20px;">سجل الدفعات</div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>التاريخ</th>
                                <th class="text-center">المبلغ</th>
                                <th>طريقة الدفع</th>
                                <th class="text-center">الحالة</th>
                                <th>ملاحظات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in salaryPayments)
                            {
                                <tr>
                                    <td>@payment.PaymentDate.ToString("yyyy/MM/dd")</td>
                                    <td class="text-center salary-net">@payment.Amount.ToString("C")</td>
                                    <td>@payment.PaymentMethod</td>
                                    <td class="text-center">
                                        <span class="badge @(GetPaymentStatusBadgeClass(payment.Status))">
                                            @GetPaymentStatusText(payment.Status)
                                        </span>
                                    </td>
                                    <td>@payment.Notes</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="ClosePaymentModal">إغلاق</button>
            </div>
        </div>
    </div>
}

<!-- Modal الخصومات -->
@if (showDeductionModal)
{
    <div class="modal-overlay" @onclick="CloseDeductionModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>خصومات: @selectedSalary?.EmployeeName</h3>
                <button class="modal-close" @onclick="CloseDeductionModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="section-title">إضافة خصم جديد</div>
                <div class="form-row">
                    <div class="form-col">
                        <div class="form-group">
                            <label for="deductionType">نوع الخصم *</label>
                            <input type="text" id="deductionType" @bind="newDeduction.DeductionType" required />
                        </div>
                    </div>
                    <div class="form-col">
                        <div class="form-group">
                            <label for="deductionAmount">المبلغ *</label>
                            <input type="number" id="deductionAmount" @bind="newDeduction.Amount" step="0.01" min="0" required />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label for="deductionReason">السبب</label>
                    <input type="text" id="deductionReason" @bind="newDeduction.Reason" />
                </div>
                <button class="btn btn-warning" @onclick="AddDeduction">
                    <i class="fas fa-plus"></i> إضافة خصم
                </button>

                <div class="section-title" style="margin-top: 20px;">سجل الخصومات</div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>التاريخ</th>
                                <th>النوع</th>
                                <th class="text-center">المبلغ</th>
                                <th>السبب</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var deduction in salaryDeductions)
                            {
                                <tr>
                                    <td>@deduction.DeductionDate.ToString("yyyy/MM/dd")</td>
                                    <td>@deduction.DeductionType</td>
                                    <td class="text-center salary-deduction">@deduction.Amount.ToString("C")</td>
                                    <td>@deduction.Reason</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseDeductionModal">إغلاق</button>
            </div>
        </div>
    </div>
}

<!-- Modal معالجة الرواتب الشهرية -->
@if (showProcessPayrollModal)
{
    <div class="modal-overlay" @onclick="CloseProcessPayrollModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>معالجة الرواتب الشهرية</h3>
                <button class="modal-close" @onclick="CloseProcessPayrollModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle"></i>
                    سيتم معالجة رواتب @stats.ActiveSalaries موظف نشط بمبلغ إجمالي @stats.TotalMonthlySalary.ToString("C")
                </div>

                <div class="form-group">
                    <label for="payrollDate">تاريخ الدفع *</label>
                    <input type="date" id="payrollDate" @bind="payrollDate" required />
                </div>

                <div class="salary-breakdown">
                    <div class="salary-item">
                        <div>عدد الموظفين</div>
                        <div class="amount">@stats.ActiveSalaries</div>
                    </div>
                    <div class="salary-item">
                        <div>إجمالي الرواتب</div>
                        <div class="amount salary-net">@stats.TotalMonthlySalary.ToString("C")</div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseProcessPayrollModal">إلغاء</button>
                <button class="btn btn-success" @onclick="ProcessMonthlySalaries" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span><span class="loading-spinner"></span> جاري المعالجة...</span>
                    }
                    else
                    {
                        <span><i class="fas fa-calculator"></i> معالجة الرواتب</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private bool showSalaryModal = false;
    private bool showPaymentModal = false;
    private bool showDeductionModal = false;
    private bool showProcessPayrollModal = false;
    private bool isSaving = false;
    private bool isProcessing = false;
    private bool isEditMode = false;
    private string activeTab = "salaries";
    private string SalaryString = "salaries";
    private string PendingString = "pending";
    private string PaymentsString = "payments";

    private SalaryStatsDto stats = new SalaryStatsDto();
    private List<EmployeeSalaryDto> allSalaries = new List<EmployeeSalaryDto>();
    private List<EmployeeSalaryDto> filteredSalaries = new List<EmployeeSalaryDto>();
    private List<EmployeeSalaryDto> pendingSalaries = new List<EmployeeSalaryDto>();
    private List<SalaryPaymentDto> recentPayments = new List<SalaryPaymentDto>();
    private List<SalaryPaymentDto> salaryPayments = new List<SalaryPaymentDto>();
    private List<SalaryDeductionDto> salaryDeductions = new List<SalaryDeductionDto>();

    private EmployeeSalaryDto currentSalary = new EmployeeSalaryDto();
    private EmployeeSalaryDto selectedSalary = new EmployeeSalaryDto();
    private SalaryPaymentDto newPayment = new SalaryPaymentDto();
    private SalaryDeductionDto newDeduction = new SalaryDeductionDto();
    private DateTime payrollDate = DateTime.Now;

    // فلاتر
    private string searchTerm = "";
    private string departmentFilter = "";
    private string statusFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSalaryData();
    }

    private async Task LoadSalaryData()
    {
        try
        {
            isLoading = true;
            hasError = false;
            StateHasChanged();

            stats = await SalaryService.GetSalaryStatsAsync();
            allSalaries = await SalaryService.GetAllEmployeeSalariesAsync();
            filteredSalaries = allSalaries;
            pendingSalaries = await SalaryService.GetPendingSalariesAsync();

            // تحميل أحدث المدفوعات
            recentPayments = await SalaryService.GetAllSalaryPaymentsAsync();
            foreach (var item in recentPayments)
            {
                var sae = allSalaries.Where(e => e.Id == item.EmployeeSalaryId).FirstOrDefault();
                item.EmployeeName =sae.EmployeeName;
            } 
            ToastService.ShowSuccess("تم تحميل بيانات الرواتب بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء تحميل البيانات: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task FilterSalaries()
    {
        try
        {
            SalaryStatus? status = null;
            if (!string.IsNullOrEmpty(statusFilter))
            {
                status = statusFilter switch
                {
                    "Active" => SalaryStatus.Active,
                    "Inactive" => SalaryStatus.Inactive,
                    "Pending" => SalaryStatus.Pending,
                    "Suspended" => SalaryStatus.Suspended,
                    _ => null
                };
            }

            var result = await SalaryService.GetEmployeeSalariesAsync(1, 1000, searchTerm, departmentFilter, status);
            filteredSalaries = result.Data.ToList();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصفية: {ex.Message}", "خطأ");
        }
    }

    private void ClearFilters()
    {
        searchTerm = "";
        departmentFilter = "";
        statusFilter = "";
        filteredSalaries = allSalaries;
    }

    private void SwitchTab(string tab)
    {
        activeTab = tab;
    }

    private void ShowSalaryModal(EmployeeSalaryDto salary = null)
    {
        isEditMode = salary != null;

        if (isEditMode)
        {
            currentSalary = new EmployeeSalaryDto
                {
                    Id = salary.Id,
                    EmployeeId = salary.EmployeeId,
                    EmployeeName = salary.EmployeeName,
                    Department = salary.Department,
                    Position = salary.Position,
                    BaseSalary = salary.BaseSalary,
                    Allowances = salary.Allowances,
                    TotalDeductions = salary.TotalDeductions,
                    NetSalary = salary.NetSalary,
                    Status = salary.Status,
                    BankAccount = salary.BankAccount,
                    LastPaymentDate = salary.LastPaymentDate
                };
        }
        else
        {
            currentSalary = new EmployeeSalaryDto
                {
                    BaseSalary = 0,
                    Allowances = 0,
                    TotalDeductions = 0,
                    Status = SalaryStatus.Pending
                };
        }

        showSalaryModal = true;
    }

    private void CloseSalaryModal()
    {
        showSalaryModal = false;
        isSaving = false;
        isEditMode = false;
    }

    private async Task SaveSalary()
    {
        if (isSaving) return;

        try
        {
            isSaving = true;
            StateHasChanged();

            if (isEditMode)
            {
                await SalaryService.UpdateEmployeeSalaryAsync(currentSalary.Id, currentSalary);
                ToastService.ShowSuccess("تم تحديث راتب الموظف بنجاح", "نجاح");
            }
            else
            {
                await SalaryService.AddEmployeeSalaryAsync(currentSalary);
                ToastService.ShowSuccess("تم إضافة راتب الموظف بنجاح", "نجاح");
            }

            CloseSalaryModal();
            await LoadSalaryData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحفظ: {ex.Message}", "خطأ");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void ShowPaymentModal(EmployeeSalaryDto salary)
    {
        selectedSalary = salary;
        newPayment = new SalaryPaymentDto
            {
                EmployeeSalaryId = salary.Id,
                EmployeeName = salary.EmployeeName,
                Amount = salary.NetSalary,
                PaymentDate = DateTime.Now,
                PaymentMethod = "تحويل بنكي",
                Status = PaymentStatus.Pending
            };
        showPaymentModal = true;
    }

    private void ClosePaymentModal()
    {
        showPaymentModal = false;
        selectedSalary = new EmployeeSalaryDto();
        newPayment = new SalaryPaymentDto();
        salaryPayments.Clear();
    }

    private async Task AddPayment()
    {
        try
        {
            await SalaryService.AddSalaryPaymentAsync(newPayment);
            ToastService.ShowSuccess("تمت إضافة الدفعة بنجاح", "نجاح");

            // إعادة تحميل سجل الدفعات
            salaryPayments = await SalaryService.GetSalaryPaymentsAsync(selectedSalary.Id);
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء إضافة الدفعة: {ex.Message}", "خطأ");
        }
    }

    private void ShowDeductionModal(EmployeeSalaryDto salary)
    {
        selectedSalary = salary;
        newDeduction = new SalaryDeductionDto
            {
                EmployeeSalaryId = salary.Id,
                EmployeeName = salary.EmployeeName,
                DeductionDate = DateTime.Now
            };
        showDeductionModal = true;
    }

    private void CloseDeductionModal()
    {
        showDeductionModal = false;
        selectedSalary = new EmployeeSalaryDto();
        newDeduction = new SalaryDeductionDto();
        salaryDeductions.Clear();
    }

    private async Task AddDeduction()
    {
        try
        {
            await SalaryService.AddSalaryDeductionAsync(newDeduction);
            ToastService.ShowSuccess("تمت إضافة الخصم بنجاح", "نجاح");

            // إعادة تحميل سجل الخصومات
            salaryDeductions = await SalaryService.GetEmployeeDeductionsAsync(selectedSalary.Id);

            // إعادة تحميل البيانات
            await LoadSalaryData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء إضافة الخصم: {ex.Message}", "خطأ");
        }
    }

    private void ShowProcessPayrollModal()
    {
        payrollDate = DateTime.Now;
        showProcessPayrollModal = true;
    }

    private void CloseProcessPayrollModal()
    {
        showProcessPayrollModal = false;
        isProcessing = false;
    }

    private async Task ProcessMonthlySalaries()
    {
        if (isProcessing) return;

        try
        {
            isProcessing = true;
            StateHasChanged();

            await SalaryService.ProcessMonthlySalariesAsync(payrollDate);
            ToastService.ShowSuccess("تم معالجة الرواتب الشهرية بنجاح", "نجاح");

            CloseProcessPayrollModal();
            await LoadSalaryData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء معالجة الرواتب: {ex.Message}", "خطأ");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task DeleteSalary(int salaryId)
    {
        try
        {
            if (await ConfirmDelete())
            {
                await SalaryService.DeleteEmployeeSalaryAsync(salaryId);
                ToastService.ShowSuccess("تم حذف راتب الموظف بنجاح", "نجاح");
                await LoadSalaryData();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحذف: {ex.Message}", "خطأ");
        }
    }

    private async Task ActivateSalary(EmployeeSalaryDto salary)
    {
        try
        {
            salary.Status = SalaryStatus.Active;
            await SalaryService.UpdateEmployeeSalaryAsync(salary.Id, salary);
            ToastService.ShowSuccess("تم تفعيل راتب الموظف بنجاح", "نجاح");
            await LoadSalaryData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التفعيل: {ex.Message}", "خطأ");
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        // هنا يمكنك إضافة مودال تأكيد الحذف
        return true; // مؤقتاً
    }

    private async Task ExportToExcel()
    {
        try
        {
            var excelData = await SalaryService.ExportSalariesToExcelAsync(DateTime.Now.AddMonths(-1), DateTime.Now);
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير الرواتب إلى Excel بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private async Task ExportToPdf()
    {
        try
        {
            var pdfData = await SalaryService.ExportSalariesToPdfAsync(DateTime.Now.AddMonths(-1), DateTime.Now);
            // هنا يتم تنفيذ التنزيل
            ToastService.ShowSuccess("تم تصدير الرواتب إلى PDF بنجاح", "نجاح");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء التصدير: {ex.Message}", "خطأ");
        }
    }

    private void PrintSalaries()
    {
        // تنفيذ الطباعة
        ToastService.ShowInfo("جاري تحضير الطباعة...", "طباعة");
        // يمكنك إضافة كود الطباعة هنا
    }

    private string GetStatusBadgeClass(SalaryStatus status)
    {
        return status switch
        {
            SalaryStatus.Active => "badge-success",
            SalaryStatus.Inactive => "badge-info",
            SalaryStatus.Pending => "badge-warning",
            SalaryStatus.Suspended => "badge-error",
            _ => "badge-info"
        };
    }

    private string GetStatusText(SalaryStatus status)
    {
        return status switch
        {
            SalaryStatus.Active => "نشط",
            SalaryStatus.Inactive => "غير نشط",
            SalaryStatus.Pending => "معلق",
            SalaryStatus.Suspended => "موقوف",
            _ => "غير محدد"
        };
    }

    private string GetPaymentStatusBadgeClass(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "badge-success",
            PaymentStatus.Pending => "badge-warning",
            PaymentStatus.Failed => "badge-error",
            PaymentStatus.Cancelled => "badge-secondary",
            _ => "badge-info"
        };
    }

    private string GetPaymentStatusText(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.Paid => "مدفوع",
            PaymentStatus.Pending => "معلق",
            PaymentStatus.Failed => "فشل",
            PaymentStatus.Cancelled => "ملغي",
            _ => "غير محدد"
        };
    }

    private string GetEmployeeDepartment(int salaryId)
    {
        var salary = allSalaries.FirstOrDefault(s => s.Id == salaryId);
        return salary?.Department ?? "غير محدد";
    }
}