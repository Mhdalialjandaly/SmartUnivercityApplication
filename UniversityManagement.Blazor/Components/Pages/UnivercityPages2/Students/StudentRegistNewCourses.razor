@page "/student/{studentId}/registrations"
@attribute [Authorize(Roles = "Admin")]
@inject UniversityDbContext _context
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStudentServices _studentService
@inject ICourseRegistrationServices _registrationService
@inject IDepartmentServices _departmentService
@inject ICourseServices _courseService
@inject IToastService Toast
@rendermode InteractiveServer

<style>
    /* أنماط CSS من ملف النص */
    *, *:before, *:after {
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        padding: 0;
        margin: 0;
    }

    html, body {
        padding: 0;
        margin: 0;
        font-family: "Sora", sans-serif;
        font-size: 15px;
        font-weight: 400;
        color: rgba(18, 24, 32, 0.7);
        line-height: 170%;
        background-color: #f9f9f9;
    }

    h1, h2, h3, h4, h5, h6 {
        font-family: "Sora", sans-serif;
        color: rgb(18, 24, 32);
        font-weight: 600;
        line-height: 140%;
    }

    h1 {
        font-size: 42px;
    }

    h2 {
        font-size: 36px;
    }

    h3 {
        font-size: 28px;
    }

    h4 {
        font-size: 22px;
    }

    h5 {
        font-size: 18px;
    }

    h6 {
        font-size: 16px;
    }

    a {
        color: inherit;
        text-decoration: none;
    }

    .mil-accent {
        color: rgb(245, 124, 0);
    }

    .mil-bold {
        font-weight: 500;
    }

    .container {
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 15px;
    }

    .mil-section {
        padding: 80px 0;
    }

    .mil-section-title {
        text-align: center;
        margin-bottom: 60px;
    }

        .mil-section-title h2 {
            font-size: 36px;
            margin-bottom: 15px;
        }

        .mil-section-title p {
            color: rgba(18, 24, 32, 0.5);
            max-width: 600px;
            margin: 0 auto;
        }

    .mil-flex {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
    }

    .mil-flex-center {
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    }

    .mil-mb-30 {
        margin-bottom: 30px;
    }

    .mil-mb-60 {
        margin-bottom: 60px;
    }

    .mil-mb-90 {
        margin-bottom: 90px;
    }

    .mil-mt-30 {
        margin-top: 30px;
    }

    .mil-mt-60 {
        margin-top: 60px;
    }

    .mil-mt-90 {
        margin-top: 90px;
    }

    .mil-center {
        text-align: center;
    }

    .mil-button {
        cursor: pointer;
        height: 60px;
        padding: 0 40px;
        font-family: "Sora", sans-serif;
        font-size: 16px;
        color: rgb(18, 24, 32);
        font-weight: 500;
        white-space: nowrap;
        display: -webkit-inline-box;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        text-align: center;
        border: none;
        border-radius: 40px;
        background-color: rgb(245, 124, 0);
        color: black;
        -webkit-transition: 0.4s cubic-bezier(0, 0, 0.3642, 1);
        transition: 0.4s cubic-bezier(0, 0, 0.3642, 1);
    }

        .mil-button:hover {
            -webkit-transform: translateY(-5px);
            transform: translateY(-5px);
            -webkit-box-shadow: 0px 10px 20px 0px rgba(245, 124, 0, 0.3);
            box-shadow: 0px 10px 20px 0px rgba(245, 124, 0, 0.3);
        }

        .mil-button.mil-button-sm {
            height: 50px;
            padding: 0 30px;
            font-size: 14px;
            color:black;
        }

    .mil-top-panel {
        padding: 0 10px;
        height: 80px;
        background-color: rgb(255, 255, 255);
        width: 100%;
        z-index: 999;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
        justify-content: space-between;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
        -webkit-box-shadow: 0px 0px 40px 0px rgba(18, 24, 32, 0.1);
        box-shadow: 0px 0px 40px 0px rgba(18, 24, 32, 0.1);
        position: fixed;
        top: 0;
        left: 0;
    }

    .mil-logo img {
        height: 50px;
    }

    .mil-navigation nav ul {
        list-style: none;
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
    }

        .mil-navigation nav ul li {
            margin: 0 15px;
            position: relative;
        }

            .mil-navigation nav ul li a {
                font-family: "Sora", sans-serif;
                text-decoration: none;
                color: rgb(18, 24, 32);
                font-weight: 400;
                white-space: nowrap;
                -webkit-transition: 0.2s cubic-bezier(0, 0, 0.3642, 1);
                transition: 0.2s cubic-bezier(0, 0, 0.3642, 1);
            }

                .mil-navigation nav ul li a:hover {
                    color: rgb(245, 124, 0);
                }

    .mil-menu-btn {
        display: none;
        cursor: pointer;
        width: 30px;
        height: 30px;
        -webkit-box-orient: vertical;
        -webkit-box-direction: normal;
        -ms-flex-direction: column;
        flex-direction: column;
        -webkit-box-pack: center;
        -ms-flex-pack: center;
        justify-content: center;
        -webkit-box-align: center;
        -ms-flex-align: center;
        align-items: center;
    }

        .mil-menu-btn span, .mil-menu-btn span:after, .mil-menu-btn span:before {
            content: "";
            display: block;
            width: 24px;
            height: 2px;
            background: rgb(18, 24, 32);
            -webkit-backface-visibility: hidden;
            backface-visibility: hidden;
            -webkit-transition: inherit;
            transition: inherit;
        }

        .mil-menu-btn span {
            position: relative;
        }

            .mil-menu-btn span:before {
                top: -8px;
            }

            .mil-menu-btn span:after {
                top: 8px;
            }

        .mil-menu-btn.mil-active span {
            background: transparent;
        }

            .mil-menu-btn.mil-active span:before {
                top: 0;
                -webkit-transform: rotate(45deg);
                transform: rotate(45deg);
            }

            .mil-menu-btn.mil-active span:after {
                top: 0;
                -webkit-transform: rotate(-45deg);
                transform: rotate(-45deg);
            }

    /* أنماط إضافية للوحة الطلاب */
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        padding-top: 80px;
    }

    .students-dashboard {
        display: flex;
        min-height: calc(100vh - 80px);
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
    }

    .sidebar-header {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-header h3 {
            color: white;
            margin: 10px 0;
        }

    .sidebar-menu {
        padding: 20px 0;
    }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover, .sidebar-menu a.active {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border-right: 3px solid var(--primary-color);
            }

        .sidebar-menu i {
            margin-left: 10px;
            font-size: 18px;
        }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .registrations-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .registrations-header h2 {
            margin: 0;
        }

    .registrations-nav {
        display: flex;
        gap: 10px;
    }

        .registrations-nav button {
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 5px;
            font-family: 'Sora', sans-serif;
        }

            .registrations-nav button:hover {
                background: #f5f5f5;
            }

    .stats-cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        display: flex;
        align-items: center;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
        font-size: 24px;
    }

    .stat-primary {
        background: rgba(245, 124, 0, 0.1);
        color: var(--primary-color);
    }

    .stat-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .stat-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .stat-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .stat-content h3 {
        margin: 0 0 5px;
        font-size: 24px;
        color: var(--dark-color);
    }

    .stat-content p {
        margin: 0;
        color: #777;
        font-size: 14px;
    }

    .student-info-card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
        display: flex;
        align-items: center;
        gap: 20px;
    }

    .student-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        overflow: hidden;
        border: 3px solid var(--primary-color);
    }

        .student-avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

    .student-details h3 {
        margin: 0 0 10px;
        color: var(--dark-color);
    }

    .student-details p {
        margin: 5px 0;
        color: #666;
    }

    .controls-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: var(--dark-color);
    }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-family: 'Sora', sans-serif;
        font-size: 14px;
        transition: border-color 0.3s;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px rgba(245, 124, 0, 0.1);
    }

    .table-responsive {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
        margin-bottom: 30px;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

    .table th {
        background: #f8f9fa;
        color: var(--dark-color);
        font-weight: 600;
        padding: 15px;
        text-align: right;
        border-bottom: 1px solid #e9ecef;
    }

    .table td {
        padding: 15px;
        border-bottom: 1px solid #e9ecef;
        vertical-align: middle;
    }

    .table tr:hover {
        background-color: #f8f9fa;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-primary {
        background: rgba(245, 124, 0, 0.1);
        color: var(--primary-color);
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-info {
        background: rgba(33, 150, 243, 0.1);
        color: #2196f3;
    }

    .badge-secondary {
        background: rgba(158, 158, 158, 0.1);
        color: #9e9e9e;
    }

    .status-registered {
        background: rgba(59, 130, 246, 0.1);
        color: #3b82f6;
    }

    .status-cancelled {
        background: rgba(239, 68, 68, 0.1);
        color: #ef4444;
    }

    .status-completed {
        background: rgba(16, 185, 129, 0.1);
        color: #10b981;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Sora', sans-serif;
        font-weight: 500;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-primary:hover {
        background: #e65100;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(245, 124, 0, 0.3);
    }

    .btn-success {
        background: #4caf50;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Sora', sans-serif;
        font-weight: 500;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-success:hover {
        background: #45a049;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(76, 175, 80, 0.3);
    }

    .btn-danger {
        background: #f44336;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-family: 'Sora', sans-serif;
        font-weight: 500;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-danger:hover {
        background: #da190b;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(244, 67, 54, 0.3);
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
        padding: 8px 15px;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.3s;
        font-family: 'Sora', sans-serif;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .btn-outline:hover {
        background: #f5f5f5;
    }

    .no-data {
        text-align: center;
        padding: 40px;
    }

        .no-data i {
            font-size: 48px;
            color: #ddd;
            margin-bottom: 15px;
        }

    .section-title {
        font-size: 18px;
        font-weight: 600;
        color: var(--primary-color);
        margin: 20px 0 15px;
        padding-bottom: 10px;
        border-bottom: 2px solid var(--primary-color);
    }

    /* أنماط المودال */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        backdrop-filter: blur(5px);
    }

    .modal-content {
        background: white;
        border-radius: 15px;
        width: 90%;
        max-width: 800px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        animation: modalSlideIn 0.3s ease-out;
    }

    @@keyframes modalSlideIn {
        from {
            opacity: 0;
            transform: translateY(-50px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: linear-gradient(135deg, var(--primary-color), #ff9800);
        color: white;
        border-radius: 15px 15px 0 0;
    }

    .modal-header h3 {
        margin: 0;
        font-size: 22px;
    }

    .modal-close {
        background: none;
        border: none;
        color: white;
        font-size: 24px;
        cursor: pointer;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        transition: background 0.3s;
    }

    .modal-close:hover {
        background: rgba(255, 255, 255, 0.2);
    }

    .modal-body {
        padding: 20px;
    }

    .form-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 20px;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        background: #f9f9f9;
        border-radius: 0 0 15px 15px;
    }

    .loading {
        text-align: center;
        padding: 40px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

        .loading i {
            font-size: 48px;
            color: var(--primary-color);
            margin-bottom: 15px;
            animation: spin 1s linear infinite;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-header h3, .sidebar-menu span {
            display: none;
        }

        .sidebar-menu a {
            justify-content: center;
            padding: 15px;
        }

        .sidebar-menu i {
            margin-left: 0;
        }
    }

    @@media (max-width: 768px) {
        .students-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
        }

        .sidebar-menu {
            display: flex;
            overflow-x: auto;
        }

            .sidebar-menu ul {
                display: flex;
            }

            .sidebar-menu li {
                margin-bottom: 0;
                margin-left: 5px;
            }

            .sidebar-menu a {
                border-radius: 5px;
                border-right: none !important;
                border-bottom: 3px solid transparent;
            }

                .sidebar-menu a:hover, .sidebar-menu a.active {
                    border-right: none;
                    border-bottom: 3px solid var(--primary-color);
                }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }

        .registrations-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .registrations-nav {
            justify-content: center;
        }

        .controls-row {
            grid-template-columns: 1fr;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .student-info-card {
            flex-direction: column;
            text-align: center;
        }
    }
</style>

<!-- Top Panel -->
<div class="mil-top-panel">
    <div class="mil-logo">
        <a href="#home"><img src="https://via.placeholder.com/150x50?text=الجامعة" alt="Logo"></a>
    </div>
    <div class="mil-navigation">
        <nav>
            <ul>
                <li><a href="/"><i class="fas fa-home"></i> الرئيسية</a></li>
                <li><a href="/students-managment"><i class="fas fa-users"></i> الطلاب</a></li>
                <li><a href="/admin/applications"><i class="fas fa-file-signature"></i> طلبات التقديم</a></li>
                <li><a href="/student/registrations"><i class="fas fa-book"></i> تسجيل المواد</a></li>
                <li><a href="/academic-calendar"><i class="fas fa-calendar-alt"></i> التقويم الأكاديمي</a></li>
            </ul>
        </nav>
    </div>
    <div class="mil-menu-btn">
        <span></span>
    </div>
</div>

<div class="students-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />

    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        <div class="top-bar">
            <div class="user-profile">
                <div class="user-info">
                    <h4>د. أحمد محمد</h4>
                    <p>مدير النظام - قسم التسجيل الأكاديمي</p>
                </div>
                <img src="https://via.placeholder.com/40" alt="User" style="width: 40px; height: 40px; border-radius: 50%; margin-left: 10px;">
            </div>
        </div>

        <div class="registrations-header">
            <h2><i class="fas fa-book"></i> تسجيل المواد الدراسية</h2>
            <div class="registrations-nav">
                <button class="mil-button mil-button-sm" @onclick="ShowRegistrationModal">
                    <i class="fas fa-plus"></i> تسجيل مادة جديدة
                </button>
                <button class="btn-outline" @onclick="LoadRegistrations">
                    <i class="fas fa-sync"></i> تحديث
                </button>
            </div>
        </div>

        <!-- معلومات الطالب -->
        @if (currentStudent != null)
        {
            <div class="student-info-card">
                <div class="student-avatar">
                    <img src="@(string.IsNullOrEmpty(currentStudent.ProfilePicture) ? "https://ui-avatars.com/api/?name=" + Uri.EscapeDataString(currentStudent.FullName ?? "طالب") + "&background=2c3e50&color=fff" : currentStudent.ProfilePicture)" alt="صورة الطالب" />
                </div>
                <div class="student-details">
                    <h3>@currentStudent.FullName</h3>
                    <p><i class="fas fa-id-card"></i> الرقم الجامعي: @currentStudent.StudentId</p>
                    <p><i class="fas fa-graduation-cap"></i> القسم: @GetDepartmentName(currentStudent.DepartmentId)</p>
                    <p><i class="fas fa-calendar"></i> السنة الدراسية: @currentStudent.AcademicYear</p>
                    <p><i class="fas fa-envelope"></i> البريد الإلكتروني: @currentStudent.Email</p>
                </div>
            </div>
        }

        <!-- بطاقات الإحصائيات -->
        <div class="stats-cards">
            <div class="stat-card">
                <div class="stat-icon stat-primary">
                    <i class="fas fa-book-open"></i>
                </div>
                <div class="stat-content">
                    <h3>@registeredCourses.Count</h3>
                    <p>المواد المسجلة</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon stat-success">
                    <i class="fas fa-clock"></i>
                </div>
                <div class="stat-content">
                    <h3>@totalCredits</h3>
                    <p>الساعات المعتمدة</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon stat-info">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="stat-content">
                    <h3>@totalAmount.ToString("C")</h3>
                    <p>المبلغ المدفوع</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon stat-warning">
                    <i class="fas fa-plus-circle"></i>
                </div>
                <div class="stat-content">
                    <h3>@availableCredits</h3>
                    <p>الساعات المتبقية</p>
                </div>
            </div>
        </div>

        <!-- عناصر التحكم -->
        <div class="controls-row">
            <div class="form-group">
                <label for="search">بحث عن مادة</label>
                <input type="text" id="search" class="form-control" placeholder="ابحث عن مادة..." @bind="searchTerm" @oninput="SearchCourses" />
            </div>
            <div class="form-group">
                <label for="semester">الفصل الدراسي</label>
                <select id="semester" class="form-control" @bind="selectedSemester">
                    <option value="">جميع الفصول</option>
                    <option value="الأول">الفصل الأول</option>
                    <option value="الثاني">الفصل الثاني</option>
                    <option value="الصيف">الفصل الصيفي</option>
                </select>
            </div>
            <div class="form-group">
                <label for="department">القسم</label>
                <select id="department" class="form-control" @bind="selectedDepartmentId">
                    <option value="0">جميع الأقسام</option>
                    @foreach (var dept in departments)
                    {
                        <option value="@dept.Id">@dept.Name</option>
                    }
                </select>
            </div>
        </div>

        <!-- جدول المواد المتاحة -->
        <div class="section-title">المواد المتاحة للتسجيل</div>
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th width="50px">
                            <input type="checkbox"  @onchange="SelectAllChanged" />
                        </th>
                        <th>المادة</th>
                        <th width="150px">القسم</th>
                        <th width="100px">الساعات</th>
                        <th width="120px">الرسوم</th>
                        <th width="120px">الفصل</th>
                        <th width="150px">الإجراء</th>
                    </tr>
                </thead>
                <tbody>
                    @if (availableCourses.Any())
                    {
                        @for (int i = 0; i < availableCourses.Count; i++)
                        {
                            var course = availableCourses[i];
                            var isSelected = selectedCourses.Contains(course.Id);
                            <tr>
                                <td>
                                    <input type="checkbox"  @onchange="@(e => CourseSelectionChanged(course.Id, (bool)e.Value))" />
                                </td>
                                <td>
                                    <div>
                                        <strong>@course.Name</strong>
                                        <br />
                                        <small class="text-muted">الكود: @course.Code</small>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-primary">
                                        @GetDepartmentName(course.DepartmentId)
                                    </span>
                                </td>
                                <td>
                                    <span class="badge badge-info">@course.Credits ساعة</span>
                                </td>
                                <td>
                                    <span class="text-success">@course.Fee.ToString("C")</span>
                                </td>
                                <td>
                                    <span class="badge badge-secondary">@course.Semester</span>
                                </td>
                                <td>
                                    <button class="btn-primary" @onclick="() => AddCourseToRegistration(course)">
                                        <i class="fas fa-plus"></i> إضافة
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7">
                                <div class="no-data">
                                    <i class="fas fa-book"></i>
                                    <p>لا توجد مواد متاحة للتسجيل</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- جدول المواد المسجلة -->
        @if (registeredCourses.Any())
        {
            <div class="section-title">المواد المسجلة للطالب</div>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>المادة</th>
                            <th width="150px">القسم</th>
                            <th width="100px">الساعات</th>
                            <th width="120px">الرسوم</th>
                            <th width="150px">تاريخ التسجيل</th>
                            <th width="120px">الحالة</th>
                            <th width="100px">الإجراءات</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < registeredCourses.Count; i++)
                        {
                            var reg = registeredCourses[i];
                            <tr>
                                <td>
                                    <div>
                                        <strong>@reg.Course.Name</strong>
                                        <br />
                                        <small class="text-muted">الكود: @(reg.Course?.Code ?? "غير متوفر")</small>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge badge-primary">
                                        @reg.DepartmentName
                                    </span>
                                </td>
                                <td>
                                    <span class="badge badge-info">@reg.Course?.Credits ساعة</span>
                                </td>
                                <td>
                                    <span class="text-success">@reg.AmountPaid.ToString("C")</span>
                                </td>
                                <td>@reg.RegistrationDate.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <span class="badge @GetStatusClass(reg.Status)">
                                        @GetStatusText(reg.Status)
                                    </span>
                                </td>
                                <td>
                                    @if (reg.Status != "مكتمل")
                                    {
                                        <button class="btn-danger" @onclick="() => RemoveCourseFromRegistration(reg.Id)">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr>
                            <th colspan="2">الإجمالي:</th>
                            <th>@totalCredits ساعة</th>
                            <th>@totalAmount.ToString("C")</th>
                            <th colspan="3"></th>
                        </tr>
                    </tfoot>
                </table>
            </div>
        }
    </div>
</div>

<!-- مودال تسجيل مادة جديدة -->
@if (showRegistrationModal)
{
    <div class="modal-overlay" @onclick="CloseRegistrationModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3><i class="fas fa-book"></i> تسجيل مادة دراسية للطالب</h3>
                <button class="modal-close" @onclick="CloseRegistrationModal">&times;</button>
            </div>
            <div class="modal-body">
                @if (courseToRegister != null)
                {
                    <div class="form-row">
                        <div class="form-group">
                            <label>اسم المادة</label>
                            <input type="text" class="form-control" value="@courseToRegister.Name" disabled />
                        </div>
                        <div class="form-group">
                            <label>القسم</label>
                            <input type="text" class="form-control" value="@GetDepartmentName(courseToRegister.DepartmentId)" disabled />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>الساعات المعتمدة</label>
                            <input type="text" class="form-control" value="@courseToRegister.Credits ساعة" disabled />
                        </div>
                        <div class="form-group">
                            <label>الرسوم الدراسية</label>
                            <input type="text" class="form-control" value="@courseToRegister.Fee.ToString("C")" disabled />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>الفصل الدراسي</label>
                            <input type="text" class="form-control" value="@courseToRegister.Semester" disabled />
                        </div>
                        <div class="form-group">
                            <label>تاريخ التسجيل</label>
                            <input type="date" class="form-control" @bind="newRegistration.RegistrationDate" />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>المبلغ المدفوع</label>
                            <input type="number" class="form-control" @bind="newRegistration.AmountPaid" step="0.01" />
                        </div>
                        <div class="form-group">
                            <label>تاريخ الدفع</label>
                            <input type="date" class="form-control" @bind="newRegistration.PaymentDate" />
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label>الحالة</label>
                            <select class="form-control" @bind="newRegistration.Status">
                                <option value="مسجل">مسجل</option>
                                <option value="ملغي">ملغي</option>
                                <option value="مكتمل">مكتمل</option>
                            </select>
                        </div>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn-outline" @onclick="CloseRegistrationModal">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button class="btn-primary" @onclick="ConfirmCourseRegistration">
                    <i class="fas fa-check"></i> تأكيد التسجيل
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string studentId { get; set; }

    private StudentDto currentStudent;
    private List<CourseRegistrationDto> registeredCourses = new();
    private List<CourseDto> availableCourses = new();
    private List<CourseDto> allCourses = new();
    private List<DepartmentDto> departments = new();

    private CourseDto courseToRegister;
    private CourseRegistrationDto newRegistration = new();

    private string searchTerm = "";
    private string selectedSemester = "";
    private int selectedDepartmentId = 0;
    private List<int> selectedCourses = new();
    private bool selectAll = false;
    private bool hasChanges = false;
    private bool isSaving = false;

    // إحصائيات
    private int totalCredits = 0;
    private decimal totalAmount = 0;
    private int availableCredits = 18; // يمكن جلب هذا من إعدادات الطالب

    // مودال
    private bool showRegistrationModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStudentData();
        await LoadDepartments();
        await LoadCourses();
        await LoadRegistrations();
    }

    private async Task LoadStudentData()
    {
        try
        {
            // جلب بيانات الطالب الحالي باستخدام studentId من الـ URL
            if (!string.IsNullOrEmpty(studentId))
            {
                currentStudent = await _studentService.GetStudentByIdAsync(int.Parse(studentId));
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading student data: {ex.Message}");
        }
    }

    private async Task LoadDepartments()
    {
        try
        {
            departments = await _departmentService.GetAllDepartmentsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
    }

    private async Task LoadCourses()
    {
        try
        {
            allCourses = await _courseService.GetAllCoursesAsync();
            availableCourses = new List<CourseDto>(allCourses); // نسخة للتصفية
            await FilterCourses();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
    }

    private async Task LoadRegistrations()
    {
        try
        {
            // جلب التسجيلات الحالية للطالب
            if (currentStudent != null)
            {
                registeredCourses = await _registrationService.GetRegistrationsByStudentIdAsync(currentStudent.Id);
                // حساب الإحصائيات
                CalculateStatistics();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading registrations: {ex.Message}");
        }
    }

    private async Task FilterCourses()
    {
        var filtered = allCourses.AsEnumerable();

        // بحث
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(c =>
                c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                c.Code.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // تصفية حسب الفصل
        if (!string.IsNullOrEmpty(selectedSemester))
        {
            filtered = filtered.Where(c => c.Semester.ToString() == selectedSemester);
        }

        // تصفية حسب القسم
        if (selectedDepartmentId > 0)
        {
            filtered = filtered.Where(c => c.DepartmentId == selectedDepartmentId);
        }

        availableCourses = filtered.ToList();
    }

    private async Task SearchCourses(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await FilterCourses();
    }

    private void CourseSelectionChanged(int courseId, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedCourses.Contains(courseId))
                selectedCourses.Add(courseId);
        }
        else
        {
            selectedCourses.Remove(courseId);
        }
        selectAll = selectedCourses.Count == availableCourses.Count;
        hasChanges = true;
    }

    private void SelectAllChanged(ChangeEventArgs e)
    {
        selectAll = (bool)e.Value;
        selectedCourses.Clear();

        if (selectAll)
        {
            selectedCourses.AddRange(availableCourses.Select(c => c.Id));
        }

        hasChanges = true;
        StateHasChanged();
    }

    private void AddCourseToRegistration(CourseDto course)
    {
        courseToRegister = course;
        newRegistration = new CourseRegistrationDto
        {
            CourseId = course.Id,
            StudentId = currentStudent?.Id ?? 0,
            RegistrationDate = DateTime.Now,
            PaymentDate = DateTime.Now,
            AmountPaid = course.Fee,
            Status = "مسجل",
            Course = course,
            CourseFee = course.Fee,
            DepartmentName = GetDepartmentName(course.DepartmentId)
        };
        showRegistrationModal = true;
    }

    private void ShowRegistrationModal()
    {
        showRegistrationModal = true;
    }

    private void CloseRegistrationModal()
    {
        showRegistrationModal = false;
        courseToRegister = null;
        newRegistration = new CourseRegistrationDto();
    }

    private async Task ConfirmCourseRegistration()
    {
        if (courseToRegister != null && currentStudent != null)
        {
            try
            {
                var registrationToCreate = new CourseRegistrationDto
                    {                       
                        CourseId = courseToRegister.Id, 
                        StudentId = currentStudent.Id, 
                        RegistrationDate = newRegistration.RegistrationDate,
                        PaymentDate = newRegistration.PaymentDate,
                        AmountPaid = newRegistration.AmountPaid,
                        Status = newRegistration.Status,
                         CourseFee = courseToRegister.Fee, 
                         DepartmentName = GetDepartmentName(courseToRegister.DepartmentId),
                         DepartmentId=selectedDepartmentId,                         
                    };

                // إضافة التسجيل الجديد عبر الخدمة
                var result = await _registrationService.CreateRegistrationAsync(registrationToCreate);
                if (result != null)
                {
                    registeredCourses.Add(result);
                    CalculateStatistics();
                    hasChanges = true;

                    // إغلاق المودال
                    CloseRegistrationModal();
                    StateHasChanged();
                    Toast.ShowSuccess("تم الحفظ بنجاح", "حالة التسجيل", 100);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error registering course: {ex.Message}");
            }
        }
    }
    
    private async Task RemoveCourseFromRegistration(int registrationId)
    {
        try
        {
            await _registrationService.DeleteRegistrationAsync(registrationId);
            var registration = registeredCourses.FirstOrDefault(r => r.Id == registrationId);
            if (registration != null)
            {
                registeredCourses.Remove(registration);
                CalculateStatistics();
                hasChanges = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error removing course registration: {ex.Message}");
        }
    }
    
    private async Task SaveAllRegistrations()
    {
        if (!hasChanges) return;
        
        isSaving = true;
        StateHasChanged();
        
        try
        {
            // حفظ جميع التسجيلات
            foreach (var registration in registeredCourses.Where(r => r.Id == 0)) // التسجيلات الجديدة
            {
                await _registrationService.CreateRegistrationAsync(registration);
            }
            
            hasChanges = false;
            // عرض رسالة نجاح
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving registrations: {ex.Message}");
            // عرض رسالة خطأ
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
    
    private void CalculateStatistics()
    {
        totalCredits = registeredCourses.Sum(r => r.Course?.Credits ?? 0);
        totalAmount = registeredCourses.Sum(r => r.AmountPaid);
    }
    
    // Helper functions
    private string GetDepartmentName(int departmentId)
    {
        var department = departments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Name ?? "غير محدد";
    }
    
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "مسجل" => "status-registered",
            "ملغي" => "status-cancelled",
            "مكتمل" => "status-completed",
            _ => "status-registered"
        };
    }
    
    private string GetStatusText(string status)
    {
        return status switch
        {
            "مسجل" => "مسجل",
            "ملغي" => "ملغي",
            "مكتمل" => "مكتمل",
            _ => status
        };
    }
}