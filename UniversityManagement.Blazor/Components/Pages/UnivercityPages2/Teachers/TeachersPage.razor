@page "/teachers"
@attribute [Authorize(Roles = "Admin")]
@inject IProfessorServices ProfessorService
@inject IAcademicCalendarServices CalendarService
@inject IToastService ToastService
@inject IDepartmentServices DepartmentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer


<style>
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .sidebar-header {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-header h3 {
            color: white;
            margin: 10px 0;
        }

    .sidebar-menu {
        padding: 20px 0;
    }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover, .sidebar-menu a.active {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border-right: 3px solid var(--primary-color);
            }

        .sidebar-menu i {
            margin-left: 10px;
            font-size: 18px;
        }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .search-box {
        display: flex;
        align-items: center;
    }

        .search-box input {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 5px 0 0 5px;
            outline: none;
        }

        .search-box button {
            border-radius: 0 5px 5px 0;
            padding: 8px 15px;
        }

    .user-profile {
        display: flex;
        align-items: center;
    }

        .user-profile img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-left: 10px;
        }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        background: rgba(245, 124, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon i {
            color: var(--primary-color);
            font-size: 24px;
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-primary {
        background: rgba(245, 124, 0, 0.1);
        color: var(--primary-color);
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background: #e57100;
        }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

        .btn-outline:hover {
            background: #f5f5f5;
        }

    .course-list li {
        display: flex;
        justify-content: space-between;
        padding: 12px 0;
        border-bottom: 1px solid #eee;
    }

        .course-list li:last-child {
            border-bottom: none;
        }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-header h3, .sidebar-menu span {
            display: none;
        }

        .sidebar-menu a {
            justify-content: center;
            padding: 15px;
        }

        .sidebar-menu i {
            margin-left: 0;
        }

        .main-content {
            margin-right: 70px;
        }

        .dashboard-cards {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .sidebar-menu {
            display: flex;
            overflow-x: auto;
        }

            .sidebar-menu ul {
                display: flex;
            }

            .sidebar-menu li {
                margin-bottom: 0;
                margin-left: 5px;
            }

            .sidebar-menu a {
                border-radius: 5px;
                border-right: none !important;
                border-bottom: 3px solid transparent;
            }

                .sidebar-menu a:hover, .sidebar-menu a.active {
                    border-right: none;
                    border-bottom: 3px solid var(--primary-color);
                }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10000;
    }

    .modal-content {
        background: white;
        border-radius: 10px;
        width: 90%;
        max-width: 600px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #eee;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #777;
    }

    .modal-body {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 500;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-family: 'Sora', sans-serif;
        }

    .form-row {
        display: flex;
        gap: 15px;
    }

    .form-col {
        flex: 1;
    }

    .modal-footer {
        padding: 20px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255,255,255,.3);
        border-radius: 50%;
        border-top-color: #fff;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }
</style>

<div class="faculty-dashboard">
    <!-- الشريط الجانبي -->
    <NavMenu2 />
    <!-- المحتوى الرئيسي -->
    <div class="main-content">
        @if (isLoading)
        {
            <div class="loading">
                <i class="fas fa-spinner fa-spin"></i> جاري تحميل البيانات...
            </div>
        }
        else if (hasError)
        {
            <div class="error">
                <i class="fas fa-exclamation-triangle"></i>
                <div>
                    <strong>خطأ!</strong>
                    <p>حدث خطأ أثناء تحميل البيانات. يرجى المحاولة مرة أخرى.</p>
                    <button class="btn btn-primary" @onclick="LoadProfessors">إعادة المحاولة</button>
                </div>
            </div>
        }
        else
        {
            <!-- الشريط العلوي -->
            <div class="top-bar">
                <div class="search-box">
                    <input type="text" placeholder="بحث باسم المدرس أو القسم..." @bind="searchTerm" @oninput="(e => FilterProfessors())">
                    <button class="btn btn-outline"><i class="fas fa-search"></i></button>
                </div>
                <div class="user-profile">
                    <div class="user-info">
                        <h4>لوحة تحكم المدير</h4>
                        <p>إدارة المدرسين</p>
                    </div>
                    <img src="https://via.placeholder.com/40" alt="User">
                </div>
            </div>

            <!-- بطاقات الإحصائيات -->
            <div class="dashboard-cards">
                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-chalkboard-teacher"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@totalProfessors</h4>
                        <p>إجمالي المدرسين</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-user-check"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@activeProfessors</h4>
                        <p>المدرسون النشطون</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-user-plus"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@newProfessors</h4>
                        <p>مدرسون جدد</p>
                    </div>
                </div>

                <div class="card stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-book"></i>
                    </div>
                    <div class="stat-info">
                        <h4>@averageTeachingLoad.ToString("0.0")</h4>
                        <p>متوسط الحِمل الدراسي</p>
                    </div>
                </div>
            </div>

            <!-- قائمة المدرسين -->
            <div class="card">
                <div class="card-header">
                    <h3>قائمة المدرسين</h3>
                    <button class="btn btn-primary" @onclick="()=> ShowProfessorModal()">إضافة مدرس جديد</button>
                </div>
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>الصورة</th>
                                <th>الاسم</th>
                                <th>رقم الموظف</th>
                                <th>القسم</th>
                                <th>البريد الإلكتروني</th>
                                <th>الهاتف</th>
                                <th>الحالة</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var professor in filteredProfessors)
                            {
                                <tr class="clickable-row" @onclick="() => ShowProfessorDetails(professor)">
                                    <td>
                                        <img src="@professor.ProfileImageUrl" alt="@professor.FullName"
                                             style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;">
                                    </td>
                                    <td>@professor.FullName</td>
                                    <td>@professor.EmployeeId</td>
                                    <td>@professor.DepartmentName</td>
                                    <td>@professor.Email</td>
                                    <td>@professor.Phone</td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(professor.Status)">
                                            @GetStatusText(professor.Status)
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-outline" @onclick="(()=>ShowProfessorModal(professor))">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline" @onclick="(()=>DeleteProfessor(professor.Id))">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal لعرض تفاصيل البروفيسور -->
@if (showDetailsModal && selectedProfessor != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>تفاصيل المدرس</h3>
                <button class="modal-close" @onclick="CloseModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="professor-details">
                    <div class="professor-image">
                        <img src="@selectedProfessor.ProfileImageUrl" alt="@selectedProfessor.FullName">
                        <h4>@selectedProfessor.FullName</h4>
                        <span class="badge @GetStatusBadgeClass(selectedProfessor.Status)">
                            @GetStatusText(selectedProfessor.Status)
                        </span>
                    </div>

                    <div class="professor-info">
                        <div class="info-item">
                            <label>رقم الموظف:</label>
                            <span>@selectedProfessor.EmployeeId</span>
                        </div>
                        <div class="info-item">
                            <label>القسم:</label>
                            <span>@selectedProfessor.DepartmentName</span>
                        </div>
                        <div class="info-item">
                            <label>البريد الإلكتروني:</label>
                            <span>@selectedProfessor.Email</span>
                        </div>
                        <div class="info-item">
                            <label>الهاتف:</label>
                            <span>@selectedProfessor.Phone</span>
                        </div>
                        <div class="info-item">
                            <label>تاريخ التعيين:</label>
                            <span>@selectedProfessor.HireDate.ToString("yyyy/MM/dd")</span>
                        </div>
                        <div class="info-item">
                            <label>الراتب:</label>
                            <span>@selectedProfessor.Salary.ToString("C")</span>
                        </div>
                        <div class="info-item">
                            <label>التخصص:</label>
                            <span>@selectedProfessor.Specialization</span>
                        </div>
                        <div class="info-item">
                            <label>الدرجة العلمية:</label>
                            <span>@selectedProfessor.AcademicDegree</span>
                        </div>
                    </div>
                </div>

                <!-- المقررات الدراسية -->
                <div class="courses-section">
                    <h4>المقررات المسندة</h4>
                    @if (professorCourses.Any())
                    {
                        @foreach (var course in professorCourses)
                        {
                            <div class="course-item">
                                <div>
                                    <h5>@course.Name</h5>
                                    <p>@course.Code - @course.MaxStudents طالب</p>
                                </div>
                                <span class="badge badge-primary">@course.Credits ساعات معتمدة</span>
                            </div>
                        }
                    }
                    else
                    {
                        <p><i class="fas fa-info-circle"></i> لا توجد مقررات مسندة</p>
                    }
                </div>

                <!-- الجدول الدراسي -->
                <div class="schedule-section">
                    <h4>الجدول الدراسي</h4>
                    @if (professorSchedule.Any())
                    {
                        <table class="schedule-table">
                            <thead>
                                <tr>
                                    <th>اليوم</th>
                                    <th>الوقت</th>
                                    <th>المقرر</th>
                                    <th>القاعة</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var schedule in professorSchedule)
                                {
                                    <tr>
                                        <td>@schedule.Day</td>
                                        <td>@schedule.StartTime - @schedule.EndTime</td>
                                        <td>@schedule.CourseName</td>
                                        <td>@schedule.Room</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p><i class="fas fa-info-circle"></i> لا يوجد جدول دراسي</p>
                    }
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="() => ShowProfessorModal(selectedProfessor)">
                        <i class="fas fa-edit"></i> تعديل
                    </button>
                    <button class="btn btn-outline" @onclick="CloseModal">
                        <i class="fas fa-times"></i> إغلاق
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal موحد للإضافة والتعديل -->
@if (showProfessorModal)
{
    <div class="modal-overlay" @onclick="CloseProfessorModal">
        <div class="modal-content" @onclick:stopPropagation>
            <div class="modal-header">
                <h3>@(isEditMode ? "تعديل بيانات المدرس" : "إضافة مدرس جديد")</h3>
                <button class="modal-close" @onclick="CloseProfessorModal">&times;</button>
            </div>
            <div class="modal-body">
                <form @onsubmit="SaveProfessor">
                    <div class="form-row">
                        <div class="form-col">
                            <div class="form-group">
                                <label for="firstName">الاسم الأول</label>
                                <input type="text" id="firstName" @bind="currentProfessor.FirstName" required />
                            </div>
                        </div>
                        <div class="form-col">
                            <div class="form-group">
                                <label for="lastName">الاسم الأخير</label>
                                <input type="text" id="lastName" @bind="currentProfessor.LastName" required />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="employeeId">رقم الموظف</label>
                        <input type="text" id="employeeId" @bind="currentProfessor.EmployeeId" required />
                    </div>
                    <div class="form-group">
                        <label for="departmentId">القسم</label>
                        @if (departmentsLoading)
                        {
                            <div class="loading">جاري تحميل الأقسام...</div>
                        }
                        else
                        {
                            <select id="departmentId" @bind="currentProfessor.DepartmentId" required>
                                <option value="">اختر القسم</option>
                                @foreach (var dept in departments)
                                {
                                    <option value="@dept.Id">@dept.Name</option>
                                }
                            </select>
                        }
                    </div>
                    <div class="form-group">
                        <label for="email">البريد الإلكتروني</label>
                        <input type="email" id="email" @bind="currentProfessor.Email" required />
                    </div>
                    <div class="form-group">
                        <label for="phone">الهاتف</label>
                        <input type="text" id="phone" @bind="currentProfessor.Phone" />
                    </div>
                    <div class="form-group">
                        <label for="specialization">التخصص</label>
                        <input type="text" id="specialization" @bind="currentProfessor.Specialization" />
                    </div>
                    <div class="form-group">
                        <label for="academicDegree">الدرجة العلمية</label>
                        <input type="text" id="academicDegree" @bind="currentProfessor.AcademicDegree" />
                    </div>
                    <div class="form-group">
                        <label for="salary">الراتب</label>
                        <input type="number" id="salary" @bind="currentProfessor.Salary" step="0.01" />
                    </div>
                    <div class="form-group">
                        <label for="status">الحالة</label>
                        <select id="status" @bind="currentProfessor.Status">
                            <option value="Active">نشط</option>
                            <option value="Inactive">غير نشط</option>
                            <option value="OnLeave">في إجازة</option>
                            <option value="Retired">متقاعد</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" @onclick="CloseProfessorModal">إلغاء</button>
                <button class="btn btn-primary" @onclick="SaveProfessor" disabled="@isSaving">
                    @if (isSaving)
                    {
                        <span><span class="loading-spinner"></span> جاري الحفظ...</span>
                    }
                    else
                    {
                        <span>@(isEditMode ? "حفظ التغييرات" : "حفظ")</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

<script>
    // تفعيل القائمة الجانبية
    document.querySelectorAll('.sidebar-menu a').forEach(item => {
        item.addEventListener('click', function (e) {
            document.querySelectorAll('.sidebar-menu a').forEach(link => {
                link.classList.remove('active');
            });
            this.classList.add('active');
        });
    });
</script>

@code {
    private bool isLoading = true;
    private bool hasError = false;
    private bool showDetailsModal = false;
    private bool showProfessorModal = false;
    private bool departmentsLoading = false;
    private bool isSaving = false;
    private bool isEditMode = false;
    private string searchTerm = "";

    private List<ProfessorDto> allProfessors = new List<ProfessorDto>();
    private List<ProfessorDto> filteredProfessors = new List<ProfessorDto>();
    private ProfessorDto selectedProfessor = null;
    private ProfessorDto currentProfessor = new ProfessorDto();
    private List<CourseDto> professorCourses = new List<CourseDto>();
    private List<ScheduleDto> professorSchedule = new List<ScheduleDto>();
    private List<DepartmentDto> departments = new List<DepartmentDto>(); // قائمة الأقسام

    private int totalProfessors = 0;
    private int activeProfessors = 0;
    private int newProfessors = 0;
    private double averageTeachingLoad = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadProfessors();
    }

    private async Task LoadProfessors()
    {
        try
        {
            isLoading = true;
            hasError = false;

            // تحميل جميع المدرسين
            allProfessors = await ProfessorService.GetAllProfessorsAsync();
            filteredProfessors = allProfessors;

            // تحميل الإحصائيات
            totalProfessors = await ProfessorService.GetTotalProfessorsCountAsync();
            activeProfessors = await ProfessorService.GetActiveProfessorsCountAsync();
            newProfessors = await ProfessorService.GetNewProfessorsCountAsync();
            averageTeachingLoad = await ProfessorService.GetAverageTeachingLoadAsync();

           
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء تحميل البيانات: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async void ShowProfessorDetails(ProfessorDto professor)
    {
        try
        {
            selectedProfessor = professor;

            // تحميل المقررات والجدول الدراسي للبروفيسور المحدد
            professorCourses = await ProfessorService.GetProfessorCoursesAsync(professor.Id);
            professorSchedule = await ProfessorService.GetProfessorScheduleAsync(professor.Id);

            showDetailsModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء تحميل التفاصيل: {ex.Message}", "خطأ");
        }
    }

    private void CloseModal()
    {
        showDetailsModal = false;
        selectedProfessor = null;
        professorCourses.Clear();
        professorSchedule.Clear();
    }

    private void FilterProfessors()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredProfessors = allProfessors;
        }
        else
        {
            var term = searchTerm.ToLower();
            filteredProfessors = allProfessors.Where(p =>
                p.FullName.ToLower().Contains(term) ||
                p.EmployeeId.ToLower().Contains(term) ||
                p.DepartmentName.ToLower().Contains(term) ||
                p.Email.ToLower().Contains(term) ||
                p.Phone.Contains(term)
            ).ToList();
        }
    }

    private string GetStatusBadgeClass(ProfessorStatus status)
    {
        return status switch
        {
            ProfessorStatus.Active => "badge-success",
            ProfessorStatus.Inactive => "badge-warning",
            ProfessorStatus.OnLeave => "badge-info",
            ProfessorStatus.Retired => "badge-error",
            _ => "badge-warning"
        };
    }

    private string GetStatusText(ProfessorStatus status)
    {
        return status switch
        {
            ProfessorStatus.Active => "نشط",
            ProfessorStatus.Inactive => "غير نشط",
            ProfessorStatus.OnLeave => "في إجازة",
            ProfessorStatus.Retired => "متقاعد",
            _ => "غير محدد"
        };
    }

    private async void DeleteProfessor(int professorId)
    {
        try
        {
            await ProfessorService.DeleteProfessorAsync(professorId);
            ToastService.ShowSuccess("تم حذف المدرس بنجاح", "نجاح");
            await LoadProfessors();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحذف: {ex.Message}", "خطأ");
        }
    }

    // دوال جديدة لإدارة المودال الموحد
    private async void ShowProfessorModal(ProfessorDto professor = null)
    {
        isEditMode = professor != null;

        if (isEditMode)
        {
            // نسخ بيانات المدرس للتعديل
            currentProfessor = new ProfessorDto
                {
                    Id = professor.Id,
                    FirstName = professor.FirstName,
                    LastName = professor.LastName,
                    FullName = professor.FullName,
                    EmployeeId = professor.EmployeeId,
                    DepartmentId = professor.DepartmentId,
                    DepartmentName = professor.DepartmentName,
                    Email = professor.Email,
                    Phone = professor.Phone,
                    Specialization = professor.Specialization,
                    AcademicDegree = professor.AcademicDegree,
                    Salary = professor.Salary,
                    Status = professor.Status,
                    HireDate = professor.HireDate,
                    ProfileImageUrl = professor.ProfileImageUrl
                };
        }
        else
        {
            // تهيئة كائن جديد للإضافة
            currentProfessor = new ProfessorDto();
        }

        showProfessorModal = true;
        await LoadDepartments(); // تحميل الأقسام عند فتح المودال
    }

    private async Task LoadDepartments()
    {
        try
        {
            departmentsLoading = true;
            StateHasChanged();

             departments = await DepartmentService.GetAllDepartmentsAsync();

          
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء تحميل الأقسام: {ex.Message}", "خطأ");
        }
        finally
        {
            departmentsLoading = false;
            StateHasChanged();
        }
    }

    private void CloseProfessorModal()
    {
        showProfessorModal = false;
        currentProfessor = new ProfessorDto();
        isSaving = false;
        isEditMode = false;
    }

    private async Task SaveProfessor()
    {
        if (isSaving) return; // منع النقر المتكرر

        try
        {
            isSaving = true;
            StateHasChanged();

            // تعيين تاريخ التعيين الحالي كافتراضي إذا كان الإضافة
            if (!isEditMode && currentProfessor.HireDate == default)
            {
                currentProfessor.HireDate = DateTime.Now;
            }

            // تعيين الاسم الكامل من الاسم الأول والأخير
            currentProfessor.FullName = $"{currentProfessor.FirstName} {currentProfessor.LastName}";

            if (isEditMode)
            {
                await ProfessorService.UpdateProfessorAsync(currentProfessor.Id,currentProfessor);
                ToastService.ShowSuccess("تم تحديث بيانات المدرس بنجاح", "نجاح");
            }
            else
            {
                await ProfessorService.CreateProfessorAsync(currentProfessor);
                ToastService.ShowSuccess("تم إضافة المدرس بنجاح", "نجاح");
            }

            CloseProfessorModal();
            await LoadProfessors(); // إعادة تحميل البيانات
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"حدث خطأ أثناء الحفظ: {ex.Message}", "خطأ");
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }
}