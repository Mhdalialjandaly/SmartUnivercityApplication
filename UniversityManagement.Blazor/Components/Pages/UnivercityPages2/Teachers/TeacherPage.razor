@page "/teacher/{ProfessorId:int}"
@attribute [Authorize(Roles = "Admin")]
@inject IProfessorServices ProfessorService
@inject IAcademicCalendarServices CalendarService
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider


@using UniversityManagementSystem.Application.DTOs
@using UniversityManagementSystem.Application.Models
@using Microsoft.AspNetCore.Components.Authorization
@using global::System.Security.Claims


<style>
    /* الأنماط كما هي - بدون تغيير */
    :root {
        --primary-color: #f57c00;
        --dark-color: #121820;
        --light-color: #ffffff;
        --gray-color: #f5f5f5;
        --text-color: #333333;
        --success-color: #4caf50;
        --error-color: #f44336;
        --warning-color: #ff9800;
        --info-color: #2196f3;
    }

    body {
        font-family: 'Sora', sans-serif;
        color: var(--text-color);
        background-color: #f9f9f9;
        margin: 0;
        padding: 0;
    }

    .faculty-dashboard {
        display: flex;
        min-height: 100vh;
    }

    .sidebar {
        width: 280px;
        background: var(--dark-color);
        color: white;
        padding: 20px 0;
        transition: all 0.3s ease;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        z-index: 1000;
    }

    .sidebar-header {
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

        .sidebar-header h3 {
            color: white;
            margin: 10px 0;
        }

    .sidebar-menu {
        padding: 20px 0;
    }

        .sidebar-menu ul {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .sidebar-menu li {
            margin-bottom: 5px;
        }

        .sidebar-menu a {
            display: flex;
            align-items: center;
            padding: 12px 20px;
            color: rgba(255, 255, 255, 0.7);
            text-decoration: none;
            transition: all 0.3s;
        }

            .sidebar-menu a:hover, .sidebar-menu a.active {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                border-right: 3px solid var(--primary-color);
            }

        .sidebar-menu i {
            margin-left: 10px;
            font-size: 18px;
        }

    .main-content {
        flex: 1;
        padding: 20px;
        background: var(--gray-color);
        margin-right: 280px;
        min-height: 100vh;
    }

    .top-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 20px;
    }

    .search-box {
        display: flex;
        align-items: center;
    }

        .search-box input {
            padding: 8px 15px;
            border: 1px solid #ddd;
            border-radius: 5px 0 0 5px;
            outline: none;
        }

        .search-box button {
            border-radius: 0 5px 5px 0;
            padding: 8px 15px;
        }

    .user-profile {
        display: flex;
        align-items: center;
    }

        .user-profile img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-left: 10px;
        }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .stat-card {
        display: flex;
        align-items: center;
    }

    .stat-icon {
        width: 60px;
        height: 60px;
        border-radius: 10px;
        background: rgba(245, 124, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        margin-left: 15px;
    }

        .stat-icon i {
            color: var(--primary-color);
            font-size: 24px;
        }

    .stat-info h4 {
        margin: 0;
        font-size: 24px;
        font-weight: 600;
    }

    .stat-info p {
        margin: 5px 0 0;
        color: #777;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

        .card-header h3 {
            margin: 0;
            font-size: 18px;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 12px 15px;
            text-align: right;
        }

        .table th {
            background: #f9f9f9;
            font-weight: 600;
        }

        .table tr {
            border-bottom: 1px solid #eee;
        }

            .table tr:last-child {
                border-bottom: none;
            }

    .badge {
        padding: 5px 10px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 500;
    }

    .badge-success {
        background: rgba(76, 175, 80, 0.1);
        color: #4caf50;
    }

    .badge-warning {
        background: rgba(255, 152, 0, 0.1);
        color: #ff9800;
    }

    .badge-primary {
        background: rgba(245, 124, 0, 0.1);
        color: var(--primary-color);
    }

    .btn {
        padding: 8px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-weight: 500;
        transition: all 0.3s;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

        .btn-primary:hover {
            background: #e57100;
        }

    .btn-outline {
        background: transparent;
        border: 1px solid #ddd;
        color: #777;
    }

        .btn-outline:hover {
            background: #f5f5f5;
        }

    .course-list li {
        display: flex;
        justify-content: space-between;
        padding: 12px 0;
        border-bottom: 1px solid #eee;
    }

        .course-list li:last-child {
            border-bottom: none;
        }

    .loading {
        text-align: center;
        padding: 50px;
        font-size: 18px;
        color: #777;
    }

    .error {
        background: #ffebee;
        color: #c62828;
        padding: 15px;
        border-radius: 5px;
        margin-bottom: 20px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .error i {
            font-size: 20px;
        }

    @@media (max-width: 992px) {
        .sidebar {
            width: 70px;
        }

        .sidebar-header h3, .sidebar-menu span {
            display: none;
        }

        .sidebar-menu a {
            justify-content: center;
            padding: 15px;
        }

        .sidebar-menu i {
            margin-left: 0;
        }

        .main-content {
            margin-right: 70px;
        }

        .dashboard-cards {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        }
    }

    @@media (max-width: 768px) {
        .faculty-dashboard {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
            height: auto;
            position: relative;
        }

        .sidebar-menu {
            display: flex;
            overflow-x: auto;
        }

            .sidebar-menu ul {
                display: flex;
            }

            .sidebar-menu li {
                margin-bottom: 0;
                margin-left: 5px;
            }

            .sidebar-menu a {
                border-radius: 5px;
                border-right: none !important;
                border-bottom: 3px solid transparent;
            }

                .sidebar-menu a:hover, .sidebar-menu a.active {
                    border-right: none;
                    border-bottom: 3px solid var(--primary-color);
                }

        .main-content {
            margin-right: 0;
            padding: 10px;
        }

        .dashboard-cards {
            grid-template-columns: 1fr;
        }

        .top-bar {
            flex-direction: column;
            gap: 15px;
        }
    }
</style>
    <div class="faculty-dashboard">
        <!-- الشريط الجانبي -->
      <NavMenu2/>

        <!-- المحتوى الرئيسي -->
        <div class="main-content">
            @if (isLoading)
            {
                <div class="loading">
                    <i class="fas fa-spinner fa-spin"></i> جاري تحميل البيانات...
                </div>
            }
            else if (hasError)
            {
                <div class="error">
                    <i class="fas fa-exclamation-triangle"></i>
                    <div>
                        <strong>خطأ!</strong>
                        <p>حدث خطأ أثناء تحميل البيانات. يرجى المحاولة مرة أخرى.</p>
                        <button class="btn btn-primary" @onclick="LoadData">إعادة المحاولة</button>
                    </div>
                </div>
            }
            else
            {
                <!-- الشريط العلوي -->
                <div class="top-bar">
                    <div class="search-box">
                        <input type="text" placeholder="بحث..." @bind="searchTerm" @onkeyup="@(e => Search())">
                        <button class="btn btn-outline"><i class="fas fa-search"></i></button>
                    </div>
                    <div class="user-profile">
                        <div class="user-info">
                            <h4>@(currentProfessor?.FullName ?? "غير محدد")</h4>
                            <p>@(currentProfessor?.DepartmentName ?? "غير محدد")</p>
                        </div>
                        <img src="@(currentProfessor?.ProfileImageUrl ?? "https://via.placeholder.com/40")" alt="User">
                    </div>
                </div>

                <!-- بطاقات الإحصائيات -->
                <div class="dashboard-cards">
                    <div class="card stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-book"></i>
                        </div>
                        <div class="stat-info">
                            <h4>@professorCourses.Count()</h4>
                            <p>المقررات المسندة</p>
                        </div>
                    </div>

                    <div class="card stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="stat-info">
                            <h4>@totalStudents</h4>
                            <p>الطلاب</p>
                        </div>
                    </div>

                    <div class="card stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <div class="stat-info">
                            <h4>@pendingAssignments</h4>
                            <p>الواجبات المعلقة</p>
                        </div>
                    </div>

                    <div class="card stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-calendar"></i>
                        </div>
                        <div class="stat-info">
                            <h4>@upcomingEvents</h4>
                            <p>الأحداث القادمة</p>
                        </div>
                    </div>
                </div>

                <!-- المقررات الدراسية -->
                <div class="card">
                    <div class="card-header">
                        <h3>مقررات هذا الفصل</h3>
                        <button class="btn btn-primary" onclick="/coursesview">عرض الكل</button>
                    </div>
                    <ul class="course-list">
                        @if (professorCourses.Any())
                        {
                            @foreach (var course in professorCourses.Take(4))
                            {
                                <li>
                                    <div>
                                        <h4>@course.Name</h4>
                                        <p>@course.Code - @course.DepartmentName</p>
                                    </div>
                                    <span class="badge badge-primary">@course.MaxStudents طالب</span>
                                </li>
                            }
                        }
                        else
                        {
                            <li>
                                <div>
                                    <p><i class="fas fa-info-circle"></i> لا توجد مقررات مسندة</p>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                <!-- الجدول الدراسي -->
                <div class="card" style="margin-top: 20px;">
                    <div class="card-header">
                        <h3>جدول المحاضرات لهذا الأسبوع</h3>
                        <button class="btn btn-primary">عرض الجدول الكامل</button>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>الوقت</th>
                                    <th>الأحد</th>
                                    <th>الاثنين</th>
                                    <th>الثلاثاء</th>
                                    <th>الأربعاء</th>
                                    <th>الخميس</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (professorSchedule.Any())
                                {
                                    @foreach (var timeSlot in GetTimeSlots())
                                    {
                                        <tr>
                                            <td>@timeSlot.Time</td>
                                            <td>@((MarkupString)GetScheduleForDay(timeSlot.Time, "الأحد"))</td>
                                            <td>@((MarkupString)GetScheduleForDay(timeSlot.Time, "الاثنين"))</td>
                                            <td>@((MarkupString)GetScheduleForDay(timeSlot.Time, "الثلاثاء"))</td>
                                            <td>@((MarkupString)GetScheduleForDay(timeSlot.Time, "الأربعاء"))</td>
                                            <td>@((MarkupString)GetScheduleForDay(timeSlot.Time, "الخميس"))</td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" style="text-align: center;">
                                            <i class="fas fa-info-circle"></i> لا يوجد جدول دراسي
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- الأحداث القادمة -->
                <div class="card" style="margin-top: 20px;">
                    <div class="card-header">
                        <h3>الأحداث القادمة</h3>
                        <button class="btn btn-primary">عرض الكل</button>
                    </div>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>الحدث</th>
                                    <th>الوصف</th>
                                    <th>التاريخ</th>
                                    <th>النوع</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (upcomingCalendarEvents.Any())
                                {
                                    @foreach (var calendarEvent in upcomingCalendarEvents.Take(5))
                                    {
                                        <tr>
                                            <td>@calendarEvent.Title</td>
                                            <td>@calendarEvent.Description</td>
                                            <td>@calendarEvent.StartDate.ToString("dd/MM/yyyy")</td>
                                            <td>
                                                <span class="badge @(calendarEvent.IsHoliday ? "badge-warning" : "badge-primary")">
                                                    @(calendarEvent.IsHoliday ? "عطلة" : "حدث")
                                                </span>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4" style="text-align: center;">
                                            <i class="fas fa-info-circle"></i> لا توجد أحداث قادمة
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }
        </div>
    </div>

    <script>
        // تفعيل القائمة الجانبية
        document.querySelectorAll('.sidebar-menu a').forEach(item => {
            item.addEventListener('click', function (e) {
                document.querySelectorAll('.sidebar-menu a').forEach(link => {
                    link.classList.remove('active');
                });
                this.classList.add('active');
            });
        });
    </script>

@code {

    [Parameter]
    public int ProfessorId { get; set; }
    private bool isLoading = true;
    private bool hasError = false;
    private string searchTerm = "";

    private int currentProfessorId = 0;

    // البيانات
    private ProfessorDto currentProfessor = new ProfessorDto();
    private List<CourseDto> professorCourses = new List<CourseDto>();
    private List<ScheduleDto> professorSchedule = new List<ScheduleDto>();
    private List<AcademicCalendarDto> upcomingCalendarEvents = new List<AcademicCalendarDto>();

    // الإحصائيات
    private int totalStudents = 0;
    private int pendingAssignments = 0;
    private int upcomingEvents = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // الحصول على معرف الأستاذ الحالي من التوكن
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (int.TryParse(userId, out int professorId))
            {
                currentProfessorId = professorId;
            }
            else
            {
                // قيمة افتراضية للتجربة
                currentProfessorId = ProfessorId;
            }
        }
        catch
        {
            currentProfessorId = ProfessorId; // قيمة افتراضية
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            hasError = false;

            // تحميل بيانات الأستاذ الحالي
            currentProfessor = await ProfessorService.GetProfessorByIdAsync(currentProfessorId);

            // تحميل المقررات
            professorCourses = await ProfessorService.GetProfessorCoursesAsync(currentProfessorId);

            // تحميل الجدول
            professorSchedule = await ProfessorService.GetProfessorScheduleAsync(currentProfessorId);


            // تحميل الأحداث القادمة من التقويم الأكاديمي
            var startDate = DateTime.Now;
            var endDate = DateTime.Now.AddDays(30); // الأحداث القادمة خلال 30 يوم
            upcomingCalendarEvents = await CalendarService.GetEventsByDateRangeAsync(startDate, endDate);

            // حساب الإحصائيات
            totalStudents = professorCourses.Sum(c => c.Department.StudentCount);
            pendingAssignments = 0;
            upcomingEvents = upcomingCalendarEvents.Count;

            ToastService.ShowSuccess("تم تحميل البيانات بنجاح", "نجاح", 50);
        }
        catch (Exception ex)
        {
            hasError = true;
            ToastService.ShowError($"حدث خطأ أثناء تحميل البيانات: {ex.Message}", "خطأ");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void Search()
    {
        ToastService.ShowInfo("جاري البحث...", "بحث");
    }

    private List<dynamic> GetTimeSlots()
    {
        return new List<dynamic>
        {
            new { Time = "8:00 - 9:30" },
            new { Time = "10:00 - 11:30" },
            new { Time = "12:00 - 1:30" },
            new { Time = "2:00 - 3:30" },
            new { Time = "4:00 - 5:30" }
        };
    }

    private string GetScheduleForDay(string timeSlot, string day)
    {
        // تحويل الوقت إلى تنسيق مناسب للبحث
        var startTime = timeSlot.Split(" - ")[0];
        var endTime = timeSlot.Split(" - ")[1];

        // البحث في الجدول حسب اليوم والوقت
        var schedules = professorSchedule.Where(s =>
            s.Day == day &&
            (s.StartTime == startTime || s.EndTime == endTime)).ToList();

        if (schedules.Any())
        {
            var schedule = schedules.First();
            return $"{schedule.CourseName}<br><span class='badge badge-primary'>{schedule.Room}</span>";
        }
        return "-";
    }
}