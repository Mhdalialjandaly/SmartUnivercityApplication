@page "/academic-calendar"
@inject IAcademicCalendarService CalendarService
@inject IDepartmentService DepartmentService
@rendermode InteractiveServer
<div class="academic-calendar-container">
    <div class="calendar-header">
        <h2>التقويم الأكاديمي</h2>
        <div class="controls">
            <select @bind="selectedAcademicYear" class="form-control">
                @foreach (var year in academicYears)
                {
                    <option value="@year">@year - @(year + 1)</option>
                }
            </select>
            <select @bind="selectedSemester" class="form-control">
                <option value="0">كل الفصول</option>
                <option value="1">الفصل الأول</option>
                <option value="2">الفصل الثاني</option>
                <option value="3">الفصل الصيفي</option>
            </select>
            <button class="btn btn-primary" @onclick="LoadCalendarData">تحديث</button>
            <button class="btn @(isInEditMode ? "btn-success" : "btn-outline-secondary")"
                    @onclick="ToggleEditMode">
                <i class="fas @(isInEditMode ? "fa-check" : "fa-plus")"></i>
                @(isInEditMode ? "إنهاء التحرير" : "إضافة حدث")
            </button>
        </div>
    </div>

    <div class="calendar-view">
        <div class="calendar-nav">
            <button @onclick="PreviousMonth" class="nav-btn">
                <i class="fas fa-chevron-right"></i> الشهر السابق
            </button>
            <h3>@currentMonthName @currentYear</h3>
            <button @onclick="NextMonth" class="nav-btn">
                الشهر التالي <i class="fas fa-chevron-left"></i>
            </button>
        </div>

        <div class="calendar-grid">
            <div class="calendar-weekdays">
                @foreach (var day in arabicWeekDays)
                {
                    <div>@day</div>
                }
            </div>

            <div class="calendar-days">
               @*  @foreach (var day in blankDays)
                {
                    <div class="calendar-day empty"></div>
                } *@

                @foreach (var day in Enumerable.Range(1, daysInMonth))
                {
                    var currentDate = new DateTime(currentYear, currentMonth, day);
                    var dayEvents = GetEventsForDay(currentDate);

                    <div class="calendar-day @(IsToday(currentDate) ? "today" : "")" @onclick="() => HandleDayClick(currentDate)">

                        <div class="day-number">@day</div>
                        <div class="day-events">
                            @foreach (var evt in dayEvents)
                            {
                                <div class="calendar-event @GetEventClass(evt)"
                                     @onclick="() => ShowEventDetails(evt)">
                                    @evt.Title
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- نافذة تفاصيل الحدث -->
    @if (selectedEvent != null)
    {
        <div class="event-modal">
            <div class="event-modal-content">
                <div class="event-header @GetEventClass(selectedEvent)">
                    <h3>@selectedEvent.Title</h3>
                    <button @onclick="CloseEventDetails" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="event-body">
                    <p><i class="fas fa-calendar-alt"></i> @selectedEvent.StartDate.ToString("yyyy/MM/dd") - @selectedEvent.EndDate.ToString("yyyy/MM/dd")</p>
                    <p><i class="fas fa-clock"></i> @selectedEvent.StartDate.ToString("hh:mm tt") - @selectedEvent.EndDate.ToString("hh:mm tt")</p>
                    <p><i class="fas fa-info-circle"></i> @selectedEvent.Description</p>
                    <p><i class="fas fa-building"></i> @(selectedEvent.Department?.Name ?? "جميع الأقسام")</p>
                </div>
                <div class="event-footer">
                    <button class="btn btn-danger" @onclick="DeleteEvent">حذف</button>
                    <button class="btn btn-secondary" @onclick="CloseEventDetails">إغلاق</button>
                </div>
            </div>
        </div>
    }

    <!-- نافذة إضافة حدث جديد -->
    @if (showAddEventModal)
    {
        <div class="event-modal">
            <div class="event-modal-content">
                <div class="event-header">
                    <h3>إضافة حدث جديد</h3>
                    <button @onclick="CloseAddEventModal" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="event-body">
                    <div class="form-group">
                        <label>عنوان الحدث</label>
                        <input @bind="newEvent.Title" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>وصف الحدث</label>
                        <textarea @bind="newEvent.Description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="form-group">
                        <label>التاريخ</label>
                        <input type="date" @bind="newEvent.StartDate"
                               min="@DateTime.Now.ToString("yyyy-MM-dd")"
                               class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>وقت البداية</label>
                        <input type="time" @bind="newEvent.StartTime" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>وقت النهاية</label>
                        <input type="time" @bind="newEvent.EndTime" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label>نوع الحدث</label>
                        <select @bind="newEvent.EventType" class="form-control">
                            <option value="@CalendarEventType.Academic">أكاديمي</option>
                            <option value="@CalendarEventType.Holiday">إجازة</option>
                            <option value="@CalendarEventType.Exam">امتحان</option>
                            <option value="@CalendarEventType.Registration">تسجيل</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>القسم</label>
                        <select @bind="newEvent.DepartmentId" class="form-control">
                            <option value="">جميع الأقسام</option>
                            @if (departments != null)
                            {
                                @foreach (var dept in departments)
                                {
                                    <option value="@dept.Id">@dept.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="event-footer">
                    <button class="btn btn-primary" @onclick="AddNewEvent">حفظ</button>
                    <button class="btn btn-secondary" @onclick="CloseAddEventModal">إلغاء</button>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private DateTime currentDate = DateTime.Now;
    private int currentYear => currentDate.Year;
    private int currentMonth => currentDate.Month;
    private int daysInMonth => DateTime.DaysInMonth(currentYear, currentMonth);
    private string currentMonthName => new System.Globalization.CultureInfo("ar-SA").DateTimeFormat.GetMonthName(currentMonth);
    private int firstDayOfWeek => (int)new DateTime(currentYear, currentMonth, 1).DayOfWeek;
    private int blankDays => (firstDayOfWeek + 6) % 7; // تعديل لبدء الأسبوع من الأحد

    private List<AcademicCalendarDto> calendarEvents = new();
    private AcademicCalendarDto selectedEvent = null;
    private int selectedAcademicYear = DateTime.Now.Year;
    private int selectedSemester = 0;
    private List<int> academicYears = Enumerable.Range(DateTime.Now.Year - 2, 5).ToList();
    private string[] arabicWeekDays = { "الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت" };
    private bool isInEditMode = false;
    private bool showAddEventModal = false;
    private DateTime selectedDayForEvent;
    private NewEventDto newEvent = new();
    public List<DepartmentDto> departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCalendarData();
        await Loaddepartments();
    }

    private async Task LoadCalendarData()
    {
        DateTime startDate = new DateTime(selectedAcademicYear, 1, 1);
        DateTime endDate = new DateTime(selectedAcademicYear, 12, 31);

        if (selectedSemester > 0)
        {
            // تحديد تواريخ الفصول الدراسية (يمكن تعديلها حسب نظامك)
            switch (selectedSemester)
            {
                case 1: // الفصل الأول
                    startDate = new DateTime(selectedAcademicYear, 9, 1);
                    endDate = new DateTime(selectedAcademicYear, 12, 31);
                    break;
                case 2: // الفصل الثاني
                    startDate = new DateTime(selectedAcademicYear, 1, 1);
                    endDate = new DateTime(selectedAcademicYear, 4, 30);
                    break;
                case 3: // الفصل الصيفي
                    startDate = new DateTime(selectedAcademicYear, 5, 1);
                    endDate = new DateTime(selectedAcademicYear, 8, 31);
                    break;
            }
        }

        calendarEvents = await CalendarService.GetEventsByDateRangeAsync(startDate, endDate);
    }
    private async Task Loaddepartments()
    {
      departments = await DepartmentService.GetAllDepartmentsAsync();
    }
    // تعديل دالة عرض اليوم لإضافة حدث
    private void ShowDayForAddEvent(DateTime date)
    {
        selectedDayForEvent = date;
        newEvent = new NewEventDto
            {
                EndtDate = date,
                StartDate = date,
                StartTime = DateTime.Now, 
                EndTime = new DateTime(), 
                EventType = CalendarEventType.Academic
            };
        showAddEventModal = true;
    }

    private void CloseAddEventModal()
    {
        showAddEventModal = false;
    }

    private async Task AddNewEvent()
    {
        try
        {
            var eventToAdd = new AcademicCalendarDto
                {
                    Title = newEvent.Title,
                    Description = newEvent.Description,
                    StartDate = newEvent.StartTime,
                    EndDate = newEvent.EndTime,
                    EventType = newEvent.EventType,
                    DepartmentId = newEvent.DepartmentId,
                    AcademicYear = newEvent.StartDate.Year,
                    IsUniversityWide = newEvent.DepartmentId == null
                };

            await CalendarService.CreateEventAsync(eventToAdd);
            await LoadCalendarData();
            showAddEventModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"حدث خطأ أثناء إضافة الحدث: {ex.Message}");
        }
    }

    // تعديل جزء التقويم لإضافة حدث عند النقر على اليوم
    private void HandleDayClick(DateTime date)
    {
        if (isInEditMode)
        {
            ShowDayForAddEvent(date);
        }
    }

    private List<AcademicCalendarDto> GetEventsForDay(DateTime date)
    {
        return calendarEvents.Where(e => date >= e.StartDate.Date && date <= e.EndDate.Date).ToList();
    }

    private string GetEventClass(AcademicCalendarDto evt)
    {
        return evt.EventType switch
        {
            CalendarEventType.Academic => "academic-event",
            CalendarEventType.Holiday => "holiday-event",
            CalendarEventType.Exam => "exam-event",
            CalendarEventType.Registration => "registration-event",
            _ => "other-event"
        };
    }

    private bool IsToday(DateTime date)
    {
        return date.Date == DateTime.Now.Date;
    }

    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
    }

    private void ShowEventDetails(AcademicCalendarDto evt)
    {
        selectedEvent = evt;
    }

    private void CloseEventDetails()
    {
        selectedEvent = null;
    }

    private async Task DeleteEvent()
    {
        if (selectedEvent != null)
        {
            await CalendarService.DeleteEventAsync(selectedEvent.Id);
            await LoadCalendarData();
            selectedEvent = null;
        }
    }
    private void ToggleEditMode()
    {
        isInEditMode = !isInEditMode;
        if (!isInEditMode)
        {
            showAddEventModal = false;
        }
    }
}

<style>
        .calendar-day {
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .calendar-day:hover {
                background-color: #f5f5f5;
            }

        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }

            .form-group .form-control {
                width: 100%;
                padding: 8px;
                border: 1px solid #ddd;
                border-radius: 4px;
            }
    .academic-calendar-container {
        direction: rtl;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .calendar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .controls {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .form-control {
        padding: 8px 12px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .calendar-view {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .calendar-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: #f8f9fa;
        border-bottom: 1px solid #eee;
    }

    .nav-btn {
        background: #4a6cf7;
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 4px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
    }

    .calendar-weekdays {
        display: contents;
    }

        .calendar-weekdays div {
            padding: 15px;
            text-align: center;
            font-weight: bold;
            background: #f1f3f5;
        }

    .calendar-days {
        display: contents;
    }

    .calendar-day {
        min-height: 100px;
        padding: 5px;
        border: 1px solid #eee;
        position: relative;
    }

        .calendar-day.empty {
            background: #f9f9f9;
        }

        .calendar-day.today {
            background-color: #fff8e1;
        }

    .day-number {
        text-align: left;
        padding: 5px;
        font-weight: bold;
    }

    .day-events {
        margin-top: 5px;
    }

    .calendar-event {
        font-size: 0.8rem;
        padding: 3px 6px;
        margin-bottom: 3px;
        border-radius: 3px;
        cursor: pointer;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .academic-event {
        background: #d4edff;
        color: #004085;
        border-left: 3px solid #007bff;
    }

    .holiday-event {
        background: #ffeaea;
        color: #721c24;
        border-left: 3px solid #dc3545;
    }

    .exam-event {
        background: #fff3cd;
        color: #856404;
        border-left: 3px solid #ffc107;
    }

    .registration-event {
        background: #e2f3e8;
        color: #155724;
        border-left: 3px solid #28a745;
    }

    .event-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .event-modal-content {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .event-header {
        padding: 15px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .event-header.academic-event {
            background: #007bff;
        }

        .event-header.holiday-event {
            background: #dc3545;
        }

        .event-header.exam-event {
            background: #ffc107;
        }

        .event-header.registration-event {
            background: #28a745;
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .event-body {
        padding: 20px;
    }

        .event-body p {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

    .edit-mode-active {
        box-shadow: 0 0 0 2px #4a6cf7;
    }

    .edit-mode-btn {
        transition: all 0.3s ease;
    }
    .event-footer {
        padding: 15px;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        border-top: 1px solid #eee;
    }

    @@media (max-width: 768px) {
        .calendar-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .controls {
            width: 100%;
            flex-wrap: wrap;
        }

        .form-control {
            flex-grow: 1;
        }
    }
</style>