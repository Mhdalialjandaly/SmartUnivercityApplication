@page "/academic-calendar"
@inject IAcademicCalendarService CalendarService
@inject IDepartmentService DepartmentService
@rendermode InteractiveServer

<PageTitle>التقويم الأكاديمي - الجامعة الذكية</PageTitle>

<div class="academic-calendar-container">
    <!-- شريط العنوان والتنقل -->
    <div class="page-header">
        <div class="header-content">
            <div class="title-section">
                <h1 class="page-title">
                    <i class="fas fa-calendar-alt me-2"></i>التقويم الأكاديمي
                </h1>
                <nav class="breadcrumb-nav">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/"><i class="fas fa-home"></i></a></li>
                        <li class="breadcrumb-item active">التقويم الأكاديمي</li>
                    </ol>
                </nav>
            </div>
        </div>
    </div>

    <!-- لوحة التحكم الرئيسية -->
    <div class="main-panel">
        <!-- شريط التحكم -->
        <div class="panel-toolbar">
            <div class="controls">
                <div class="form-group">
                    <label>السنة الأكاديمية</label>
                    <select @bind="selectedAcademicYear" class="form-select">
                        @foreach (var year in academicYears)
                        {
                            <option value="@year">@year - @(year + 1)</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label>الفصل الدراسي</label>
                    <select @bind="selectedSemester" class="form-select">
                        <option value="0">كل الفصول</option>
                        <option value="1">الفصل الأول</option>
                        <option value="2">الفصل الثاني</option>
                        <option value="3">الفصل الصيفي</option>
                    </select>
                </div>

                <button class="btn btn-main" @onclick="LoadCalendarData">
                    <i class="fas fa-sync-alt me-2"></i>تحديث
                </button>

                <button class="btn @(isInEditMode ? "btn-success" : "btn-outline-secondary")"
                        @onclick="ToggleEditMode">
                    <i class="fas @(isInEditMode ? "fa-check" : "fa-plus") me-2"></i>
                    @(isInEditMode ? "إنهاء التحرير" : "إضافة حدث")
                </button>
            </div>
        </div>

        <!-- عرض التقويم -->
        <div class="calendar-view">
            <div class="calendar-nav">
                <button @onclick="PreviousMonth" class="btn btn-nav">
                    <i class="fas fa-chevron-right me-2"></i> الشهر السابق
                </button>
                <h3>@currentMonthName @currentYear</h3>
                <button @onclick="NextMonth" class="btn btn-nav">
                    الشهر التالي <i class="fas fa-chevron-left me-2"></i>
                </button>
            </div>

            <div class="calendar-grid">
                <div class="calendar-weekdays">
                    @foreach (var day in arabicWeekDays)
                    {
                        <div>@day</div>
                    }
                </div>

                <div class="calendar-days">
                    @foreach (var day in Enumerable.Range(1, daysInMonth))
                    {
                        var currentDate = new DateTime(currentYear, currentMonth, day);
                        var dayEvents = GetEventsForDay(currentDate);

                        <div class="calendar-day @(IsToday(currentDate) ? "today" : "")"
                             @onclick="() => HandleDayClick(currentDate)">

                            <div class="day-number">@day</div>
                            <div class="day-events">
                                @foreach (var evt in dayEvents)
                                {
                                    <div class="calendar-event @GetEventClass(evt)"
                                         @onclick="() => ShowEventDetails(evt)">
                                        @evt.Title
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- نافذة تفاصيل الحدث -->
    @if (selectedEvent != null)
    {
        <div class="event-modal">
            <div class="event-modal-content">
                <div class="event-header @GetEventClass(selectedEvent)">
                    <h3>@selectedEvent.Title</h3>
                    <button @onclick="CloseEventDetails" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="event-body">
                    <p><i class="fas fa-calendar-alt me-2"></i> @selectedEvent.StartDate.ToString("yyyy/MM/dd") - @selectedEvent.EndDate.ToString("yyyy/MM/dd")</p>
                    <p><i class="fas fa-clock me-2"></i> @selectedEvent.StartDate.ToString("hh:mm tt") - @selectedEvent.EndDate.ToString("hh:mm tt")</p>
                    <p><i class="fas fa-info-circle me-2"></i> @selectedEvent.Description</p>
                    <p><i class="fas fa-building me-2"></i> @(selectedEvent.Department?.Name ?? "جميع الأقسام")</p>
                </div>
                <div class="event-footer">
                    <button class="btn btn-danger" @onclick="DeleteEvent">
                        <i class="fas fa-trash me-2"></i>حذف
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseEventDetails">
                        <i class="fas fa-times me-2"></i>إغلاق
                    </button>
                </div>
            </div>
        </div>
    }

    <!-- نافذة إضافة حدث جديد -->
    @if (showAddEventModal)
    {
        <div class="event-modal">
            <div class="event-modal-content">
                <div class="event-header">
                    <h3><i class="fas fa-plus-circle me-2"></i>إضافة حدث جديد</h3>
                    <button @onclick="CloseAddEventModal" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="event-body">
                    <div class="form-group">
                        <label class="form-label required">عنوان الحدث</label>
                        <input @bind="newEvent.Title" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="form-label">وصف الحدث</label>
                        <textarea @bind="newEvent.Description" class="form-control" rows="3"></textarea>
                    </div>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label required">تاريخ البداية</label>
                                <input type="date" @bind="newEvent.StartDate" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">وقت البداية</label>
                                <input type="time" @bind="newEvent.StartTime" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">تاريخ النهاية</label>
                                <input type="date" @bind="newEvent.EndDate" class="form-control" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">وقت النهاية</label>
                                <input type="time" @bind="newEvent.EndTime" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="form-label required">نوع الحدث</label>
                        <select @bind="newEvent.EventType" class="form-select">
                            <option value="@CalendarEventType.Academic">أكاديمي</option>
                            <option value="@CalendarEventType.Holiday">إجازة</option>
                            <option value="@CalendarEventType.Exam">امتحان</option>
                            <option value="@CalendarEventType.Registration">تسجيل</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">القسم</label>
                        <select @bind="newEvent.DepartmentId" class="form-select">
                            <option value="">جميع الأقسام</option>
                            @if (departments != null)
                            {
                                @foreach (var dept in departments)
                                {
                                    <option value="@dept.Id">@dept.Name</option>
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="event-footer">
                    <button class="btn btn-primary" @onclick="AddNewEvent">
                        <i class="fas fa-save me-2"></i>حفظ
                    </button>
                    <button class="btn btn-secondary" @onclick="CloseAddEventModal">
                        <i class="fas fa-times me-2"></i>إلغاء
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    /* أنماط عامة */
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --accent-color: #3498db;
        --success-color: #27ae60;
        --warning-color: #f39c12;
        --danger-color: #e74c3c;
        --light-color: #ecf0f1;
        --dark-color: #2c3e50;
        --gray-color: #95a5a6;
        --border-color: #dfe6e9;
    }

    body {
        font-family: 'Tajawal', sans-serif;
        background-color: #f5f7fa;
        color: #333;
    }

    /* تصميم الصفحة الرئيسية */
    .academic-calendar-container {
        padding: 20px;
        max-width: 1400px;
        margin: 0 auto;
    }

    .page-header {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 20px;
    }

    .title-section {
        display: flex;
        flex-direction: column;
    }

    .page-title {
        color: var(--primary-color);
        font-weight: 700;
        margin: 0;
        font-size: 1.5rem;
    }

    .breadcrumb-nav {
        margin-top: 8px;
    }

    .breadcrumb {
        background: none;
        padding: 0;
        margin: 0;
        font-size: 0.9rem;
    }

    .breadcrumb-item a {
        color: var(--gray-color);
        text-decoration: none;
        transition: color 0.2s;
    }

        .breadcrumb-item a:hover {
            color: var(--primary-color);
        }

    .breadcrumb-item.active {
        color: var(--primary-color);
    }

    /* لوحة التحكم الرئيسية */
    .main-panel {
        background-color: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    /* شريط التحكم */
    .panel-toolbar {
        margin-bottom: 20px;
    }

    .controls {
        display: flex;
        align-items: flex-end;
        gap: 15px;
        flex-wrap: wrap;
    }

    .form-group {
        margin-bottom: 0;
    }

    .form-label {
        font-weight: 500;
        margin-bottom: 5px;
        display: block;
        font-size: 0.9rem;
    }

        .form-label.required::after {
            content: " *";
            color: var(--danger-color);
        }

    .form-control, .form-select {
        border-radius: 6px;
        border: 1px solid var(--border-color);
        padding: 8px 12px;
        font-size: 0.9rem;
    }

    .btn-main {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s;
        height: 38px;
    }

        .btn-main:hover {
            background-color: var(--secondary-color);
            color: white;
        }

    /* عرض التقويم */
    .calendar-view {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

    .calendar-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: #f8f9fa;
        border-bottom: 1px solid var(--border-color);
    }

    .btn-nav {
        background: var(--primary-color);
        color: white;
        border: none;
        padding: 8px 15px;
        border-radius: 6px;
        display: flex;
        align-items: center;
    }

        .btn-nav:hover {
            background: var(--secondary-color);
        }

    .calendar-grid {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
    }

    .calendar-weekdays {
        display: contents;
    }

        .calendar-weekdays div {
            padding: 15px;
            text-align: center;
            font-weight: bold;
            background: #f1f3f5;
            border-bottom: 1px solid var(--border-color);
        }

    .calendar-days {
        display: contents;
    }

    .calendar-day {
        min-height: 120px;
        padding: 8px;
        border: 1px solid var(--border-color);
        position: relative;
        transition: background-color 0.2s;
    }

        .calendar-day:hover {
            background-color: #f8f9fa;
        }

        .calendar-day.today {
            background-color: #e3f2fd;
        }

    .day-number {
        text-align: left;
        font-weight: bold;
        margin-bottom: 5px;
    }

    .day-events {
        margin-top: 5px;
    }

    .calendar-event {
        font-size: 0.8rem;
        padding: 4px 8px;
        margin-bottom: 4px;
        border-radius: 4px;
        cursor: pointer;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        transition: all 0.2s;
    }

        .calendar-event:hover {
            opacity: 0.9;
            transform: translateX(-2px);
        }

    .academic-event {
        background: #e3f2fd;
        color: #0d47a1;
        border-left: 3px solid #2196f3;
    }

    .holiday-event {
        background: #ffebee;
        color: #b71c1c;
        border-left: 3px solid #f44336;
    }

    .exam-event {
        background: #fff8e1;
        color: #ff8f00;
        border-left: 3px solid #ffc107;
    }

    .registration-event {
        background: #e8f5e9;
        color: #1b5e20;
        border-left: 3px solid #4caf50;
    }

    /* نافذة تفاصيل الحدث */
    .event-modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .event-modal-content {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 600px;
        overflow: hidden;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
    }

    .event-header {
        padding: 15px 20px;
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .event-header.academic-event {
            background: var(--accent-color);
        }

        .event-header.holiday-event {
            background: var(--danger-color);
        }

        .event-header.exam-event {
            background: var(--warning-color);
        }

        .event-header.registration-event {
            background: var(--success-color);
        }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .event-body {
        padding: 20px;
    }

        .event-body p {
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

    .event-footer {
        padding: 15px 20px;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        border-top: 1px solid var(--border-color);
    }

    /* تصميم متجاوب */
    @@media (max-width: 992px) {
        .calendar-day {
            min-height: 100px;
        }
    }

    @@media (max-width: 768px) {
        .controls {
            flex-direction: column;
            align-items: stretch;
        }

        .form-group {
            width: 100%;
        }

        .btn-main {
            width: 100%;
        }

        .calendar-nav {
            flex-direction: column;
            gap: 10px;
        }

        .calendar-day {
            min-height: 80px;
            font-size: 0.8rem;
        }

        .calendar-event {
            font-size: 0.7rem;
            padding: 2px 4px;
        }
    }

    @@media (max-width: 576px) {
        .calendar-grid {
            grid-template-columns: repeat(1, 1fr);
        }

        .calendar-weekdays {
            display: none;
        }

        .calendar-day {
            border-bottom: 1px solid var(--border-color);
        }

        .event-modal-content {
            width: 95%;
        }
    }
</style>

@code {
    private DateTime currentDate = DateTime.Now;
    private int currentYear => currentDate.Year;
    private int currentMonth => currentDate.Month;
    private int daysInMonth => DateTime.DaysInMonth(currentYear, currentMonth);
    private string currentMonthName => new System.Globalization.CultureInfo("ar-SA").DateTimeFormat.GetMonthName(currentMonth);
    private int firstDayOfWeek => (int)new DateTime(currentYear, currentMonth, 1).DayOfWeek;

    private List<AcademicCalendarDto> calendarEvents = new();
    private AcademicCalendarDto selectedEvent = null;
    private int selectedAcademicYear = DateTime.Now.Year;
    private int selectedSemester = 0;
    private List<int> academicYears = Enumerable.Range(DateTime.Now.Year - 2, 5).ToList();
    private string[] arabicWeekDays = { "الأحد", "الإثنين", "الثلاثاء", "الأربعاء", "الخميس", "الجمعة", "السبت" };
    private bool isInEditMode = false;
    private bool showAddEventModal = false;
    private NewEventDto newEvent = new();
    public List<DepartmentDto> departments { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadCalendarData();
        await LoadDepartments();
    }

    private async Task LoadCalendarData()
    {
        DateTime startDate = new DateTime(selectedAcademicYear, 1, 1);
        DateTime endDate = new DateTime(selectedAcademicYear, 12, 31);

        if (selectedSemester > 0)
        {
            switch (selectedSemester)
            {
                case 1: // الفصل الأول
                    startDate = new DateTime(selectedAcademicYear, 9, 1);
                    endDate = new DateTime(selectedAcademicYear, 12, 31);
                    break;
                case 2: // الفصل الثاني
                    startDate = new DateTime(selectedAcademicYear, 1, 1);
                    endDate = new DateTime(selectedAcademicYear, 4, 30);
                    break;
                case 3: // الفصل الصيفي
                    startDate = new DateTime(selectedAcademicYear, 5, 1);
                    endDate = new DateTime(selectedAcademicYear, 8, 31);
                    break;
            }
        }

        calendarEvents = await CalendarService.GetEventsByDateRangeAsync(startDate, endDate);
    }

    private async Task LoadDepartments()
    {
        departments = await DepartmentService.GetAllDepartmentsAsync();
    }

    private void ShowDayForAddEvent(DateTime date)
    {
        newEvent = new NewEventDto
            {
                StartDate = date,
                EndDate = date,
                StartTime = DateTime.Now,
                EndTime = DateTime.Now.AddHours(1),
                EventType = CalendarEventType.Academic
            };
        showAddEventModal = true;
    }

    private void CloseAddEventModal()
    {
        showAddEventModal = false;
    }

    private async Task AddNewEvent()
    {
        try
        {
            var eventToAdd = new AcademicCalendarDto
                {
                    Title = newEvent.Title,
                    Description = newEvent.Description,
                    StartDate = new DateTime(newEvent.StartDate.Year, newEvent.StartDate.Month, newEvent.StartDate.Day,
                                            newEvent.StartTime.Hour, newEvent.StartTime.Minute, 0),
                    EndDate = new DateTime(newEvent.EndDate.Year, newEvent.EndDate.Month, newEvent.EndDate.Day,
                                          newEvent.EndTime.Hour, newEvent.EndTime.Minute, 0),
                    EventType = newEvent.EventType,
                    DepartmentId = newEvent.DepartmentId,
                    AcademicYear = newEvent.StartDate.Year,
                    IsUniversityWide = newEvent.DepartmentId == null
                };

            await CalendarService.CreateEventAsync(eventToAdd);
            await LoadCalendarData();
            showAddEventModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"حدث خطأ أثناء إضافة الحدث: {ex.Message}");
        }
    }

    private void HandleDayClick(DateTime date)
    {
        if (isInEditMode)
        {
            ShowDayForAddEvent(date);
        }
    }

    private List<AcademicCalendarDto> GetEventsForDay(DateTime date)
    {
        return calendarEvents.Where(e => date >= e.StartDate.Date && date <= e.EndDate.Date).ToList();
    }

    private string GetEventClass(AcademicCalendarDto evt)
    {
        return evt.EventType switch
        {
            CalendarEventType.Academic => "academic-event",
            CalendarEventType.Holiday => "holiday-event",
            CalendarEventType.Exam => "exam-event",
            CalendarEventType.Registration => "registration-event",
            _ => ""
        };
    }

    private bool IsToday(DateTime date)
    {
        return date.Date == DateTime.Now.Date;
    }

    private void PreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
    }

    private void NextMonth()
    {
        currentDate = currentDate.AddMonths(1);
    }

    private void ShowEventDetails(AcademicCalendarDto evt)
    {
        selectedEvent = evt;
    }

    private void CloseEventDetails()
    {
        selectedEvent = null;
    }

    private async Task DeleteEvent()
    {
        if (selectedEvent != null)
        {
            await CalendarService.DeleteEventAsync(selectedEvent.Id);
            await LoadCalendarData();
            selectedEvent = null;
        }
    }

    private void ToggleEditMode()
    {
        isInEditMode = !isInEditMode;
        if (!isInEditMode)
        {
            showAddEventModal = false;
        }
    }
}