@page "/admin/applications"
@attribute [Authorize(Roles = "Admin")]
@inject UniversityDbContext _context
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject IStudentServices _studentService
@inject IDepartmentService _departmentService
@inject IStudentApplicationsServices _applicationService

@rendermode InteractiveServer

<!-- تصميم رئيسي جديد -->
<div class="admin-applications-container">
    <!-- شريط العنوان مع خلفية متدرجة -->
    <div class="admin-header bg-gradient-primary">
        <div class="container-fluid">
            <div class="header-content">
                <div class="header-title">
                    <h1>
                        <i class="fas fa-file-signature"></i>
                        <span>إدارة طلبات التقديم</span>
                    </h1>
                    <nav class="breadcrumb">
                        <a href="/" class="breadcrumb-item"><i class="fas fa-home"></i></a>
                        <a href="/admin" class="breadcrumb-item">لوحة التحكم</a>
                        <span class="breadcrumb-item active">طلبات التقديم</span>
                    </nav>
                </div>
                <div class="header-actions">
                    <button class="btn btn-light btn-refresh" @onclick="RefreshApplications">
                        <i class="fas fa-sync-alt"></i>
                        <span>تحديث البيانات</span>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- بطاقات الإحصاءات -->
    <div class="stats-cards">
        <div class="container-fluid">
            <div class="row">
                <!-- بطاقة إجمالي الطلبات -->
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="card-body">
                            <div class="stat-info">
                                <h5>إجمالي الطلبات</h5>
                                <h2>@totalApplications</h2>
                                <a href="#" @onclick="() => FilterApplications(ApplicationStatus.All)" class="stat-link">
                                    عرض الكل <i class="fas fa-chevron-left"></i>
                                </a>
                            </div>
                            <div class="stat-icon">
                                <i class="fas fa-file-alt"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- بطاقة الطلبات المعلقة -->
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="card-body">
                            <div class="stat-info">
                                <h5>قيد المراجعة</h5>
                                <h2>@pendingApplications</h2>
                                <a href="#" @onclick="() => FilterApplications(ApplicationStatus.Pending)" class="stat-link">
                                    عرض الطلبات <i class="fas fa-chevron-left"></i>
                                </a>
                            </div>
                            <div class="stat-icon">
                                <i class="fas fa-clock"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- بطاقة الطلبات المقبولة -->
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="card-body">
                            <div class="stat-info">
                                <h5>المقبولة</h5>
                                <h2>@acceptedApplications</h2>
                                <a href="#" @onclick="() => FilterApplications(ApplicationStatus.Accepted)" class="stat-link">
                                    عرض المقبولة <i class="fas fa-chevron-left"></i>
                                </a>
                            </div>
                            <div class="stat-icon">
                                <i class="fas fa-check-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- بطاقة الطلبات المرفوضة -->
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="card-body">
                            <div class="stat-info">
                                <h5>المرفوضة</h5>
                                <h2>@rejectedApplications</h2>
                                <a href="#" @onclick="() => FilterApplications(ApplicationStatus.Rejected)" class="stat-link">
                                    عرض المرفوضة <i class="fas fa-chevron-left"></i>
                                </a>
                            </div>
                            <div class="stat-icon">
                                <i class="fas fa-times-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- لوحة التحكم -->
    <div class="admin-control-panel">
        <div class="container-fluid">
            <!-- شريط التبويبات -->
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <button class="nav-link @(currentStatus == ApplicationStatus.All ? "active" : "")"
                            @onclick="() => FilterApplications(ApplicationStatus.All)">
                        <i class="fas fa-list"></i> جميع الطلبات
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(currentStatus == ApplicationStatus.Pending ? "active" : "")"
                            @onclick="() => FilterApplications(ApplicationStatus.Pending)">
                        <i class="fas fa-clock"></i> قيد المراجعة
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(currentStatus == ApplicationStatus.Accepted ? "active" : "")"
                            @onclick="() => FilterApplications(ApplicationStatus.Accepted)">
                        <i class="fas fa-check-circle"></i> المقبولة
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(currentStatus == ApplicationStatus.Rejected ? "active" : "")"
                            @onclick="() => FilterApplications(ApplicationStatus.Rejected)">
                        <i class="fas fa-times-circle"></i> المرفوضة
                    </button>
                </li>
            </ul>

            <!-- شريط البحث والتحكم -->
            <div class="control-bar">
                <div class="search-box">
                    <i class="fas fa-search"></i>
                    <input type="text" placeholder="ابحث عن طلب..."
                           @bind="searchTerm" @oninput="SearchApplications">
                </div>
                <div class="actions">
                    <button class="btn btn-export">
                        <i class="fas fa-file-export"></i> تصدير البيانات
                    </button>
                </div>
            </div>

            <!-- جدول الطلبات -->
            <div class="applications-table">
                @if (applications.Any())
                {
                    <table class="table">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>الطالب</th>
                                <th>القسم</th>
                                <th>المعدل</th>
                                <th>الحالة</th>
                                <th>التاريخ</th>
                                <th>الإجراءات</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var app in applications)
                            {
                                <tr>
                                    <td>@app.Id</td>
                                    <td class="student-cell">
                                        <div class="student-info">
                                            <img src="https://ui-avatars.com/api/?name=@Uri.EscapeDataString(app.FirstName + " " + app.LastName)&background=random"
                                                 alt="صورة الطالب" />
                                            <div>
                                                <h6>@app.FirstName @app.LastName</h6>
                                                <span>@app.Email</span>
                                            </div>
                                        </div>
                                    </td>
                                    <td>@GetDepartmentName(app.DepartmentId)</td>
                                    <td>
                                        <span class="gpa-badge">@app.GPA.ToString("F2")</span>
                                    </td>
                                    <td>
                                        <span class="status-badge @GetStatusClass(app.Status)">
                                            @app.Status
                                        </span>
                                    </td>
                                    <td>@app.SubmitDate.ToString("yyyy-MM-dd")</td>
                                    <td>
                                        <div class="dropdown">
                                            <button class="btn btn-actions" data-bs-toggle="dropdown">
                                                <i class="fas fa-ellipsis-v"></i>
                                            </button>
                                            <ul class="dropdown-menu">
                                                <li>
                                                    <a class="dropdown-item" @onclick="() => ViewApplicationDetails(app)">
                                                        <i class="fas fa-eye"></i> عرض التفاصيل
                                                    </a>
                                                </li>
                                                @if (app.Status == "قيد المراجعة")
                                                {
                                                    <li>
                                                        <a class="dropdown-item text-success" @onclick="() => AcceptApplication(app)">
                                                            <i class="fas fa-check"></i> قبول الطلب
                                                        </a>
                                                    </li>
                                                    <li>
                                                        <a class="dropdown-item text-danger" @onclick="() => ShowRejectModal(app)">
                                                            <i class="fas fa-times"></i> رفض الطلب
                                                        </a>
                                                    </li>
                                                }
                                                <li class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item text-danger" @onclick="() => DeleteApplication(app.Id)">
                                                        <i class="fas fa-trash"></i> حذف الطلب
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="no-data">
                        <i class="fas fa-file-alt"></i>
                        <h4>لا توجد طلبات متاحة</h4>
                        <p>قم بتغيير عوامل التصفية أو تحقق لاحقًا</p>
                    </div>
                }
            </div>

            <!-- الترقيم -->
            @if (totalPages > 1)
            {
                <div class="pagination-container">
                    <div class="pagination-info">
                        عرض @((currentPage - 1) * pageSize + 1)-@Math.Min(currentPage * pageSize, totalApplications) من @totalApplications
                    </div>
                    <ul class="pagination">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" @onclick="() => GoToPage(1)">
                                <i class="fas fa-angle-double-right"></i>
                            </a>
                        </li>
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <a class="page-link" @onclick="() => GoToPage(currentPage - 1)">
                                <i class="fas fa-angle-right"></i>
                            </a>
                        </li>

                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <a class="page-link" @onclick="() => GoToPage(i)">@i</a>
                            </li>
                        }

                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" @onclick="() => GoToPage(currentPage + 1)">
                                <i class="fas fa-angle-left"></i>
                            </a>
                        </li>
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <a class="page-link" @onclick="() => GoToPage(totalPages)">
                                <i class="fas fa-angle-double-left"></i>
                            </a>
                        </li>
                    </ul>
                </div>
            }
        </div>
    </div>
</div>

<!-- مودال عرض التفاصيل -->
<div class="modal fade" id="applicationDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-file-alt"></i> تفاصيل الطلب #@selectedApplication?.Id
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (selectedApplication != null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <div class="details-section">
                                <h6><i class="fas fa-user"></i> المعلومات الشخصية</h6>
                                <div class="detail-item">
                                    <span>الاسم الكامل:</span>
                                    <strong>@selectedApplication.FirstName @selectedApplication.LastName</strong>
                                </div>
                                <div class="detail-item">
                                    <span>البريد الإلكتروني:</span>
                                    <strong>@selectedApplication.Email</strong>
                                </div>
                                <div class="detail-item">
                                    <span>رقم الهاتف:</span>
                                    <strong>@selectedApplication.Phone</strong>
                                </div>
                                <div class="detail-item">
                                    <span>تاريخ الميلاد:</span>
                                    <strong>@selectedApplication.BirthDate.ToString("yyyy-MM-dd")</strong>
                                </div>
                                <div class="detail-item">
                                    <span>الجنس:</span>
                                    <strong>@selectedApplication.Gender</strong>
                                </div>
                                <div class="detail-item">
                                    <span>العنوان:</span>
                                    <strong>@selectedApplication.Address</strong>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="details-section">
                                <h6><i class="fas fa-graduation-cap"></i> المعلومات الأكاديمية</h6>
                                <div class="detail-item">
                                    <span>القسم المطلوب:</span>
                                    <strong>@GetDepartmentName(selectedApplication.DepartmentId)</strong>
                                </div>
                                <div class="detail-item">
                                    <span>المؤهل الدراسي:</span>
                                    <strong>@selectedApplication.EducationLevel</strong>
                                </div>
                                <div class="detail-item">
                                    <span>المعدل التراكمي:</span>
                                    <strong>@selectedApplication.GPA.ToString("F2")</strong>
                                </div>
                                <div class="detail-item">
                                    <span>تاريخ التقديم:</span>
                                    <strong>@selectedApplication.SubmitDate.ToString("yyyy-MM-dd HH:mm")</strong>
                                </div>
                                <div class="detail-item">
                                    <span>الحالة:</span>
                                    <strong>
                                        <span class="status-badge @GetStatusClass(selectedApplication.Status)">
                                            @selectedApplication.Status
                                        </span>
                                    </strong>
                                </div>
                                @if (!string.IsNullOrEmpty(selectedApplication.RejectionReason))
                                {
                                    <div class="detail-item">
                                        <span>سبب الرفض:</span>
                                        <strong class="text-danger">@selectedApplication.RejectionReason</strong>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(selectedApplication.CertificatePath))
                    {
                        <div class="documents-section">
                            <h6><i class="fas fa-paperclip"></i> المستندات المرفقة</h6>
                            <a href="@selectedApplication.CertificatePath" target="_blank" class="btn btn-outline-primary">
                                <i class="fas fa-download"></i> تحميل الشهادة
                            </a>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> إغلاق
                </button>
            </div>
        </div>
    </div>
</div>

<!-- مودال رفض الطلب -->
<div class="modal fade" id="rejectApplicationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="fas fa-times-circle"></i> رفض الطلب #@applicationToReject?.Id
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                @if (applicationToReject != null)
                {
                    <div class="mb-3">
                        <label class="form-label">سبب الرفض <span class="text-danger">*</span></label>
                        <textarea class="form-control" rows="4" placeholder="أدخل سبب الرفض..."
                                  @bind="rejectionReason" required></textarea>
                    </div>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        سيتم إعلام الطالب برفض طلبه. لا يمكن التراجع عن هذا الإجراء.
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> إلغاء
                </button>
                <button type="button" class="btn btn-danger" @onclick="RejectApplication"
                        disabled="@string.IsNullOrEmpty(rejectionReason)">
                    <i class="fas fa-times-circle"></i> تأكيد الرفض
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* أنماط CSS جديدة */
    .admin-applications-container {
        font-family: 'Tajawal', sans-serif;
        background-color: #f8fafc;
        min-height: 100vh;
    }

    .admin-header {
        padding: 1.5rem 0;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #2c3e50 0%, #1a2530 100%);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-title h1 {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .breadcrumb {
        display: flex;
        padding: 0;
        margin: 0;
        background: transparent;
    }

    .breadcrumb-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: rgba(255,255,255,0.8);
    }

        .breadcrumb-item.active {
            color: white;
            font-weight: 500;
        }

        .breadcrumb-item a {
            color: rgba(255,255,255,0.8);
            text-decoration: none;
            transition: color 0.2s;
        }

            .breadcrumb-item a:hover {
                color: white;
            }

    .btn-refresh {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-weight: 500;
    }

    /* بطاقات الإحصاءات */
    .stats-cards {
        margin-bottom: 2rem;
    }

    .stat-card {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        overflow: hidden;
        height: 100%;
        transition: transform 0.2s;
    }

        .stat-card:hover {
            transform: translateY(-5px);
        }

        .stat-card .card-body {
            display: flex;
            justify-content: space-between;
            padding: 1.5rem;
        }

    .stat-info h5 {
        color: #6c757d;
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .stat-info h2 {
        font-size: 1.75rem;
        font-weight: 700;
        color: #2c3e50;
        margin-bottom: 1rem;
    }

    .stat-link {
        color: #6c757d;
        font-size: 0.85rem;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        transition: color 0.2s;
    }

        .stat-link:hover {
            color: #2c3e50;
        }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.2;
        color: #2c3e50;
    }

    /* لوحة التحكم */
    .admin-control-panel {
        background: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        padding: 1.5rem;
        margin-bottom: 2rem;
    }

    .nav-tabs {
        border-bottom: 1px solid #e9ecef;
        margin-bottom: 1.5rem;
    }

        .nav-tabs .nav-link {
            border: none;
            color: #6c757d;
            font-weight: 500;
            padding: 0.75rem 1.25rem;
            border-bottom: 3px solid transparent;
            transition: all 0.2s;
        }

            .nav-tabs .nav-link:hover {
                color: #2c3e50;
            }

            .nav-tabs .nav-link.active {
                color: #2c3e50;
                border-bottom: 3px solid #2c3e50;
                background: transparent;
            }

    .control-bar {
        display: flex;
        justify-content: space-between;
        margin-bottom: 1.5rem;
    }

    .search-box {
        position: relative;
        width: 300px;
    }

        .search-box i {
            position: absolute;
            right: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
        }

        .search-box input {
            width: 100%;
            padding: 0.5rem 2.5rem 0.5rem 1rem;
            border: 1px solid #e9ecef;
            border-radius: 0.25rem;
            transition: border-color 0.2s;
        }

            .search-box input:focus {
                border-color: #2c3e50;
                outline: none;
            }

    .btn-export {
        background: white;
        border: 1px solid #e9ecef;
        color: #6c757d;
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s;
    }

        .btn-export:hover {
            background: #f8f9fa;
            color: #2c3e50;
        }

    /* جدول الطلبات */
    .applications-table {
        margin-bottom: 1.5rem;
    }

        .applications-table table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        .applications-table th {
            background: #f8f9fa;
            color: #2c3e50;
            font-weight: 600;
            padding: 1rem;
            text-align: right;
            border-bottom: 1px solid #e9ecef;
        }

        .applications-table td {
            padding: 1rem;
            border-bottom: 1px solid #e9ecef;
            vertical-align: middle;
        }

    .student-cell {
        min-width: 250px;
    }

    .student-info {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

        .student-info img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            object-fit: cover;
        }

        .student-info h6 {
            margin: 0;
            font-weight: 600;
            color: #2c3e50;
        }

        .student-info span {
            font-size: 0.85rem;
            color: #6c757d;
        }

    .gpa-badge {
        background: rgba(52, 152, 219, 0.1);
        color: #3498db;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        font-weight: 600;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.85rem;
        font-weight: 500;
    }

    .status-pending {
        background: rgba(241, 196, 15, 0.1);
        color: #f1c40f;
    }

    .status-accepted {
        background: rgba(46, 204, 113, 0.1);
        color: #2ecc71;
    }

    .status-rejected {
        background: rgba(231, 76, 60, 0.1);
        color: #e74c3c;
    }

    .btn-actions {
        background: none;
        border: none;
        color: #6c757d;
        padding: 0.5rem;
        border-radius: 50%;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
    }

        .btn-actions:hover {
            background: #f8f9fa;
            color: #2c3e50;
        }

    .dropdown-menu {
        border: none;
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        border-radius: 0.5rem;
        padding: 0.5rem;
    }

    .dropdown-item {
        padding: 0.5rem 1rem;
        border-radius: 0.25rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.2s;
    }

        .dropdown-item:hover {
            background: #f8f9fa;
        }

    .no-data {
        text-align: center;
        padding: 3rem;
    }

        .no-data i {
            font-size: 3rem;
            color: #6c757d;
            margin-bottom: 1rem;
        }

        .no-data h4 {
            color: #2c3e50;
            margin-bottom: 0.5rem;
        }

        .no-data p {
            color: #6c757d;
        }

    /* الترقيم */
    .pagination-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .pagination-info {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
    }

    .page-item .page-link {
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px solid #e9ecef;
        color: #6c757d;
        border-radius: 0.25rem;
        text-decoration: none;
        transition: all 0.2s;
    }

    .page-item.active .page-link {
        background: #2c3e50;
        border-color: #2c3e50;
        color: white;
    }

    .page-item:not(.active) .page-link:hover {
        background: #f8f9fa;
        color: #2c3e50;
    }

    .page-item.disabled .page-link {
        opacity: 0.5;
        pointer-events: none;
    }

    /* المودالات */
    .modal-content {
        border: none;
        border-radius: 0.5rem;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
    }

    .modal-header {
        border-bottom: 1px solid #e9ecef;
        padding: 1.25rem;
    }

        .modal-header.bg-danger {
            color: white;
        }

    .modal-title {
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .modal-body {
        padding: 1.5rem;
    }

    .details-section {
        margin-bottom: 1.5rem;
    }

        .details-section h6 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 0.75rem;
    }

        .detail-item span:first-child {
            color: #6c757d;
        }

        .detail-item strong {
            color: #2c3e50;
            font-weight: 500;
        }

    .documents-section {
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e9ecef;
    }

        .documents-section h6 {
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .modal-footer {
        border-top: 1px solid #e9ecef;
        padding: 1rem 1.5rem;
    }

    /* تصميم متجاوب */
    @@media (max-width: 992px) {
        .header-content {
            flex-direction: column;
            align-items: flex-start;
            gap: 1rem;
        }

        .search-box {
            width: 100%;
        }

        .control-bar {
            flex-direction: column;
            gap: 1rem;
        }
    }

    @@media (max-width: 768px) {
        .applications-table {
            overflow-x: auto;
        }

            .applications-table table {
                min-width: 800px;
            }

        .stat-card .card-body {
            flex-direction: column;
            gap: 1rem;
        }

        .stat-icon {
            display: none;
        }
    }

    @@media (max-width: 576px) {
        .modal-dialog {
            margin: 1rem;
        }

        .pagination-container {
            flex-direction: column;
            gap: 1rem;
        }
    }
</style>
@code {
    private List<StudentApplicationDto> applications = new();
    private StudentApplicationDto selectedApplication;
    private StudentApplicationDto applicationToReject;
    private string searchTerm = "";
    private string rejectionReason = "";

    // إحصائيات
    private int totalApplications = 0;
    private int pendingApplications = 0;
    private int acceptedApplications = 0;
    private int rejectedApplications = 0;

    // ترقيم الصفحات
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 10;

    // الفلاتر
    private ApplicationStatus currentStatus = ApplicationStatus.All;

    // الأقسام
    private List<DepartmentDto> departments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDepartments();
        await LoadStatistics();
        await LoadApplications();
    }

    private async Task LoadDepartments()
    {
        try
        {
            departments = await _departmentService.GetAllDepartmentsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading departments: {ex.Message}");
        }
    }

    private async Task LoadStatistics()
    {
        try
        {
            totalApplications = await _applicationService.GetApplicationsCountAsync();
            pendingApplications = await _applicationService.GetPendingCountAsync();
            acceptedApplications = await _applicationService.GetApprovedCountAsync();
            rejectedApplications = await _applicationService.GetRejectedCountAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading statistics: {ex.Message}");
        }
    }

    private async Task LoadApplications()
    {
        try
        {
            List<StudentApplicationDto> allApps = currentStatus switch
            {
                ApplicationStatus.Pending => await _applicationService.GetPendingApplicationsAsync(),
                ApplicationStatus.Accepted => (await _applicationService.GetAllApplicationsAsync()).Where(a => a.Status == "مقبول").ToList(),
                ApplicationStatus.Rejected => (await _applicationService.GetAllApplicationsAsync()).Where(a => a.Status == "مرفوض").ToList(),
                _ => await _applicationService.GetAllApplicationsAsync()
            };

            // بحث
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                allApps = allApps.Where(a =>
                    a.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.LastName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    a.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            // ترقيم الصفحات
            totalApplications = allApps.Count;
            totalPages = (int)Math.Ceiling((double)totalApplications / pageSize);
            applications = allApps.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading applications: {ex.Message}");
        }
    }

    private async Task RefreshApplications()
    {
        await LoadStatistics();
        await LoadApplications();
        StateHasChanged();
    }

    private async Task FilterApplications(ApplicationStatus status)
    {
        currentStatus = status;
        currentPage = 1;
        await LoadApplications();
    }

    private async Task SearchApplications(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        currentPage = 1;
        await LoadApplications();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            await LoadApplications();
        }
    }

    private async void ViewApplicationDetails(StudentApplicationDto application)
    {
        selectedApplication = application;
        // فتح الـ Modal
        // await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#viewApplicationModal");
    }

    private async Task AcceptApplication(StudentApplicationDto application)
    {
        try
        {
            var savedUser = await CreateStudentAccount(application);
            application.StudentId = savedUser.Id;
            application.TemporaryPassword = GenerateTemporaryPassword();

            var success = await _applicationService.ApproveApplicationAsync(application.Id, application.StudentId);

            if (success)
            {
                await LoadStatistics();
                await LoadApplications();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error accepting application: {ex.Message}");
        }
    }

    private async void ShowRejectModal(StudentApplicationDto application)
    {
        applicationToReject = application;
        rejectionReason = "";
        // فتح الـ Modal
        await JS.InvokeVoidAsync("bootstrap.Modal.getOrCreateInstance", "#rejectApplicationModal");
    }
    // Helper functions
    private string GetStatusClass(string status)
    {
        return status switch
        {
            "قيد المراجعة" => "status-pending",
            "مقبول" => "status-accepted",
            "مرفوض" => "status-rejected",
            _ => "status-pending"
        };
    }
    private async Task RejectApplication()
    {
        if (applicationToReject != null && !string.IsNullOrEmpty(rejectionReason))
        {
            try
            {
                var success = await _applicationService.RejectApplicationAsync(applicationToReject.Id, rejectionReason);
                if (success)
                {
                    await JS.InvokeVoidAsync("bootstrap.Modal.getInstance", "#rejectApplicationModal");
                    await RefreshApplications();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error rejecting application: {ex.Message}");
            }
        }
    }
    private async Task<StudentDto> CreateStudentAccount(StudentApplicationDto application)
    {
        try
        {
            var student = new StudentDto
                {
                    Id = "0",
                    StudentId = GenerateStudentId(),
                    FullName = application.FirstName + "-" + application.LastName,
                    Phone = application.Phone,
                    BirthOfDate = application.BirthDate,
                    Sexual = application.Gender == "ذكر",
                    HomeAddress = application.Address,
                    DepartmentId = application.DepartmentId,
                    Status = StudentStatus.New,
                    StatusOnSite = "نشط",
                    RegistrationDate = DateTime.Now,
                    UserNameOnSite = application.Email,
                    PasswordOnSite = application.TemporaryPassword,
                    // باقي الحقول تبقى فارغة أو بالقيم الافتراضية
                    Religion = "",
                    SecoundPhone = "",
                    TrueIsEmployee = false,
                    WorkAddress = "",
                    PoliticalNationalism = "",
                    Nationality = "",
                    HomeNumber = 0,
                    CivilstatusIDNumberAndNationalCard = "",
                    CivilstatusIDNumberAndNationalCardFrom = "",
                    CivilstatusIDNumberAndNationalCardDate = DateTime.MinValue,
                    NationalityCertificateNumber = 0,
                    NationalityCertificateNumberFrom = "",
                    NationalityCertificateNumberDate = DateTime.MinValue,
                    ExamNumber = 0,
                    SecretNumber = 0,
                    ApplyTunnel = false,
                    TunnelId = 1,
                    ERegistrationCompleted = false,
                    RegistraionCompleted = false,
                    SubmissionIsCompleted = false,
                    SubmissionDepartment = "",
                    TunnelDepartment = "",
                    AccountsReceiptNumber = 0,
                    SchoolName = "",
                    Branch = "",
                    DateOfSchoolGraduate = DateTime.MinValue,
                    StudentTotalWithoutAdditions = 0,
                    StudentTotalWithAdditions = 0,
                    StudentGPAWithoutAdditions = 0,
                    StudentGPAWithAdditions = 0,
                    FullAddress = application.Address,
                    AccountBalance = 0               
                };              

            try
            {
                var savedUser =  await _studentService.CreateStudentAsync(student);
                return savedUser;
            }
            catch (Exception)
            { 
                throw;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating student account: {ex.Message}");
            return new StudentDto();
        }
    }

    private async Task DeleteApplication(int applicationId)
    {
        try
        {
            await _applicationService.DeleteApplicationAsync(applicationId);
            await LoadStatistics();
            await LoadApplications();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting application: {ex.Message}");
        }
    }

    private string GenerateStudentId()
    {
        return $"STU-{DateTime.Now:yyyy}-{new Random().Next(1000, 9999)}";
    }

    private string GenerateTemporaryPassword()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var random = new Random();
        return new string(Enumerable.Repeat(chars, 8)
            .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private string GetDepartmentName(int departmentId)
    {
        var department = departments.FirstOrDefault(d => d.Id == departmentId);
        return department?.Name ?? "غير محدد";
    }

    public enum ApplicationStatus
    {
        All,
        Pending,
        Accepted,
        Rejected
    }

   
}