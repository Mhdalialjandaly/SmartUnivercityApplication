@page "/finance/student-payments"
@attribute [Authorize]
@inject IStudentPaymentService StudentPaymentService
@inject IStudentServices StudentService
@inject ICourseService CourseService
@rendermode InteractiveServer
<PageTitle>مدفوعات الطلاب - الجامعة الذكية</PageTitle>

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h3 mb-0 fw-bold text-primary">مدفوعات الطلاب</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="/">الرئيسية</a></li>
                            <li class="breadcrumb-item"><a href="/finance">الشؤون المالية</a></li>
                            <li class="breadcrumb-item active">مدفوعات الطلاب</li>
                        </ol>
                    </nav>
                </div>
                <div>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addPaymentModal">
                        <i class="fas fa-plus me-2"></i>إضافة دفعة جديدة
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- إحصائيات سريعة -->
    <div class="row g-4 mb-4">
        <div class="col-md-3">
            <div class="card border-primary border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">إجمالي المدفوعات</h5>
                            <h2 class="mb-0 fw-bold">@paymentSummary.TotalPayments</h2>
                        </div>
                        <div class="bg-primary bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-receipt fa-2x text-primary"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-success border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">إجمالي المبالغ</h5>
                            <h2 class="mb-0 fw-bold">@paymentSummary.TotalAmount.ToString("C")</h2>
                        </div>
                        <div class="bg-success bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-money-bill-wave fa-2x text-success"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-warning border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">المدفوعات المعلقة</h5>
                            <h2 class="mb-0 fw-bold">@paymentSummary.PendingPayments</h2>
                        </div>
                        <div class="bg-warning bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-clock fa-2x text-warning"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card border-info border-start border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="text-muted">المبالغ المعلقة</h5>
                            <h2 class="mb-0 fw-bold">@paymentSummary.PendingAmount.ToString("C")</h2>
                        </div>
                        <div class="bg-info bg-opacity-10 p-3 rounded-circle">
                            <i class="fas fa-exclamation-circle fa-2x text-info"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- قائمة المدفوعات -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-white">
                    <div class="row align-items-center">
                        <div class="col-md-6">
                            <h5 class="mb-0">قائمة المدفوعات</h5>
                        </div>
                        <div class="col-md-6">
                            <div class="d-flex justify-content-md-end gap-2">
                                <div class="input-group" style="max-width: 300px;">
                                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                                    <input type="text" class="form-control" placeholder="بحث عن طالب أو مادة..." @bind="searchTerm" @oninput="SearchPayments">
                                </div>
                                <select class="form-select" style="max-width: 150px;" @onchange="FilterByStatus">
                                    <option value="">جميع الحالات</option>
                                    <option value="مدفوع">مدفوع</option>
                                    <option value="معلق">معلق</option>
                                    <option value="مرفوض">مرفوض</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>#</th>
                                    <th>الطالب</th>
                                    <th>المادة</th>
                                    <th>المبلغ</th>
                                    <th>تاريخ الدفع</th>
                                    <th>طريقة الدفع</th>
                                    <th>الحالة</th>
                                    <th>الإجراءات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (payments.Any())
                                {
                                    @for (int i = 0; i < payments.Count; i++)
                                    {
                                        var payment = payments[i];
                                        <tr>
                                            <td>@payment.Id</td>
                                            <td>@payment.StudentName</td>
                                            <td>@payment.CourseName</td>
                                            <td>@payment.Amount.ToString("C")</td>
                                            <td>@payment.PaymentDate.ToString("yyyy-MM-dd")</td>
                                            <td>@payment.PaymentMethod</td>
                                            <td>
                                                <span class="badge @(payment.Status == "مدفوع" ? "bg-success" : 
                                                                    payment.Status == "معلق" ? "bg-warning" : "bg-danger")">
                                                    @payment.Status
                                                </span>
                                            </td>
                                            <td>
                                                <div class="dropdown">
                                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                                        <i class="fas fa-ellipsis-v"></i>
                                                    </button>
                                                    <ul class="dropdown-menu">
                                                        <li><a class="dropdown-item" href="javascript:void(0)" @onclick="() => ViewPaymentDetails(payment)"><i class="fas fa-eye me-2"></i>عرض التفاصيل</a></li>
                                                        <li><a class="dropdown-item" href="javascript:void(0)" @onclick="() => EditPayment(payment)"><i class="fas fa-edit me-2"></i>تعديل</a></li>
                                                        <li><hr class="dropdown-divider"></li>
                                                        <li><a class="dropdown-item text-danger" href="javascript:void(0)" @onclick="() => DeletePayment(payment.Id)"><i class="fas fa-trash me-2"></i>حذف</a></li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8" class="text-center">لا توجد مدفوعات</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal إضافة دفعة جديدة -->
<div class="modal fade" id="addPaymentModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">إضافة دفعة جديدة</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">الطالب *</label>
                            <select class="form-select" @bind="newPayment.StudentId" required>
                                <option value="">اختر الطالب</option>
                                @foreach (var student in students)
                                {
                                    <option value="@student.Id" onselect="@(newPayment.StudentId = student.Id)">@($"{student.FullName}")</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">المادة *</label>
                            <select class="form-select" @bind="newPayment.CourseId" required>
                                <option value="">اختر المادة</option>
                                @foreach (var course in courses)
                                {
                                    <option value="@course.Id">@course.Name</option>
                                }
                            </select>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">المبلغ *</label>
                            <input type="number" step="0.01" class="form-control" placeholder="أدخل المبلغ" @bind="newPayment.Amount" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">طريقة الدفع *</label>
                            <select class="form-select" @bind="newPayment.PaymentMethod" required>
                                <option value="">اختر طريقة الدفع</option>
                                <option value="نقداً">نقداً</option>
                                <option value="تحويل بنكي">تحويل بنكي</option>
                                <option value="بطاقة ائتمان">بطاقة ائتمان</option>
                                <option value="شيك">شيك</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">رقم المعاملة</label>
                        <input type="text" class="form-control" placeholder="أدخل رقم المعاملة" @bind="newPayment.TransactionId">
                    </div>

                    <div class="mb-3">
                        <label class="form-label">الملاحظات</label>
                        <textarea class="form-control" rows="2" placeholder="أدخل الملاحظات" @bind="newPayment.Notes"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">إلغاء</button>
                <button type="button" class="btn btn-primary" @onclick="CreatePayment">حفظ الدفعة</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<StudentPaymentDto> payments = new();
    private List<StudentDto> students = new();
    private List<CourseDto> courses = new();
    private StudentPaymentDto newPayment = new();
    private StudentPaymentSummaryDto paymentSummary = new();
    private string searchTerm = "";
    private string selectedStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadStudents();
        await LoadCourses();
        await LoadPaymentSummary();
        await LoadPayments();
    }

    private async Task LoadStudents()
    {
        try
        {
            students = await StudentService.GetAllStudentsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
        }
    }

    private async Task LoadCourses()
    {
        try
        {
            courses = await CourseService.GetAllCoursesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading courses: {ex.Message}");
        }
    }

    private async Task LoadPayments()
    {
        try
        {
            payments = await StudentPaymentService.GetAllPaymentsAsync();
            
            // تطبيق الفلاتر
            if (!string.IsNullOrEmpty(searchTerm))
            {
                payments = payments.Where(p => 
                    p.StudentName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    p.CourseName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }
            
            if (!string.IsNullOrEmpty(selectedStatus))
            {
                payments = payments.Where(p => p.Status == selectedStatus).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading payments: {ex.Message}");
        }
    }

    private async Task LoadPaymentSummary()
    {
        try
        {
            paymentSummary = await StudentPaymentService.GetPaymentSummaryAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading payment summary: {ex.Message}");
        }
    }

    private async Task SearchPayments(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        await LoadPayments();
    }

    private async Task FilterByStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        await LoadPayments();
    }

    private async Task CreatePayment()
    {
        try
        {
            newPayment.PaymentDate = DateTime.Now;
            newPayment.Status = "مدفوع";
            
            var createdPayment = await StudentPaymentService.CreatePaymentAsync(newPayment);
            
            // إعادة تعيين النموذج
            newPayment = new StudentPaymentDto();
            
            // تحديث القائمة والإحصائيات
            await LoadPaymentSummary();
            await LoadPayments();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating payment: {ex.Message}");
        }
    }

    private void ViewPaymentDetails(StudentPaymentDto payment)
    {
        // عرض تفاصيل الدفعة
    }

    private void EditPayment(StudentPaymentDto payment)
    {
        // تعديل الدفعة
    }

    private async Task DeletePayment(int paymentId)
    {
        try
        {
            await StudentPaymentService.DeletePaymentAsync(paymentId);
            
            // تحديث القائمة والإحصائيات
            await LoadPaymentSummary();
            await LoadPayments();
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting payment: {ex.Message}");
        }
    }
}